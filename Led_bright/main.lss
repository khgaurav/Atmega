
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000d8  0000014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000011  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000160  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006f2  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005dc  00000000  00000000  000008ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000121  00000000  00000000  00000e8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000fac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000345  00000000  00000000  00000fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000e8  00000000  00000000  00001315  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000013fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

int main ()
{
	unsigned int bright;

	TCCR2 |= 1<<WGM20 | 1<< WGM21 | 1<< COM21 |1 <<CS20;
  6c:	85 b5       	in	r24, 0x25	; 37
  6e:	89 66       	ori	r24, 0x69	; 105
  70:	85 bd       	out	0x25, r24	; 37
	DDRD |= 1<< PB7 | 1<< PB2;
  72:	81 b3       	in	r24, 0x11	; 17
  74:	84 68       	ori	r24, 0x84	; 132
  76:	81 bb       	out	0x11, r24	; 17
	TCCR0 |= 1<<WGM00 | 1<< WGM01  | 1<< COM01 |1 <<CS00;
  78:	83 b7       	in	r24, 0x33	; 51
  7a:	89 66       	ori	r24, 0x69	; 105
  7c:	83 bf       	out	0x33, r24	; 51
	DDRB |= 1<< PB3;
  7e:	bb 9a       	sbi	0x17, 3	; 23

#include "avr/io.h"
#include <util/delay.h>

int main ()
{
  80:	80 e0       	ldi	r24, 0x00	; 0
		while(1)
		{

			for(bright=0; bright<255; bright++)
		{
			OCR0=bright;
  82:	8c bf       	out	0x3c, r24	; 60
			OCR2=bright;
  84:	83 bd       	out	0x23, r24	; 35
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  86:	ef e9       	ldi	r30, 0x9F	; 159
  88:	ff e0       	ldi	r31, 0x0F	; 15
  8a:	31 97       	sbiw	r30, 0x01	; 1
  8c:	f1 f7       	brne	.-4      	; 0x8a <main+0x1e>
  8e:	00 c0       	rjmp	.+0      	; 0x90 <main+0x24>
  90:	00 00       	nop
  92:	8f 5f       	subi	r24, 0xFF	; 255
	TCCR0 |= 1<<WGM00 | 1<< WGM01  | 1<< COM01 |1 <<CS00;
	DDRB |= 1<< PB3;
		while(1)
		{

			for(bright=0; bright<255; bright++)
  94:	8f 3f       	cpi	r24, 0xFF	; 255
  96:	a9 f7       	brne	.-22     	; 0x82 <main+0x16>
  98:	ff ef       	ldi	r31, 0xFF	; 255
  9a:	29 e6       	ldi	r18, 0x69	; 105
  9c:	38 e1       	ldi	r19, 0x18	; 24
  9e:	f1 50       	subi	r31, 0x01	; 1
  a0:	20 40       	sbci	r18, 0x00	; 0
  a2:	30 40       	sbci	r19, 0x00	; 0
  a4:	e1 f7       	brne	.-8      	; 0x9e <main+0x32>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <main+0x3c>
  a8:	00 00       	nop
			_delay_ms(2);
		}
		_delay_ms(1000);
		for(bright=255; bright>1; bright--)
		{
			OCR0=bright;
  aa:	8c bf       	out	0x3c, r24	; 60
			OCR2=bright;
  ac:	83 bd       	out	0x23, r24	; 35
  ae:	ef e9       	ldi	r30, 0x9F	; 159
  b0:	ff e0       	ldi	r31, 0x0F	; 15
  b2:	31 97       	sbiw	r30, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <main+0x46>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <main+0x4c>
  b8:	00 00       	nop
  ba:	81 50       	subi	r24, 0x01	; 1
			OCR0=bright;
			OCR2=bright;
			_delay_ms(2);
		}
		_delay_ms(1000);
		for(bright=255; bright>1; bright--)
  bc:	81 30       	cpi	r24, 0x01	; 1
  be:	a9 f7       	brne	.-22     	; 0xaa <main+0x3e>
  c0:	ff ef       	ldi	r31, 0xFF	; 255
  c2:	29 e6       	ldi	r18, 0x69	; 105
  c4:	38 e1       	ldi	r19, 0x18	; 24
  c6:	f1 50       	subi	r31, 0x01	; 1
  c8:	20 40       	sbci	r18, 0x00	; 0
  ca:	30 40       	sbci	r19, 0x00	; 0
  cc:	e1 f7       	brne	.-8      	; 0xc6 <main+0x5a>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <main+0x64>
  d0:	00 00       	nop
  d2:	d6 cf       	rjmp	.-84     	; 0x80 <main+0x14>

000000d4 <_exit>:
  d4:	f8 94       	cli

000000d6 <__stop_program>:
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <__stop_program>
