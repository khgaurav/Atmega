
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000032e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000032e  000003a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000011  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000776  00000000  00000000  0000041c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000647  00000000  00000000  00000b92  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000018d  00000000  00000000  000011d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000134  00000000  00000000  00001368  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b0  00000000  00000000  0000149c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000032e  00000000  00000000  0000184c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001b7a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__vector_14>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e2       	ldi	r30, 0x2E	; 46
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 05 01 	call	0x20a	; 0x20a <main>
  7a:	0c 94 95 01 	jmp	0x32a	; 0x32a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <_Z7Receivev>:
#define BAUD 9600
#define ubbr_value FOSC/16/BAUD-1
int ch=1;
unsigned char Receive(void)
{
	while (! (UCSRA & (1 << RXC)) );
  82:	5f 9b       	sbis	0x0b, 7	; 11
  84:	fe cf       	rjmp	.-4      	; 0x82 <_Z7Receivev>
	return UDR;
  86:	8c b1       	in	r24, 0x0c	; 12
}
  88:	08 95       	ret

0000008a <_Z8Transmith>:

void Transmit(unsigned char data)
{
	while (! (UCSRA & (1 << UDRE)) );
  8a:	5d 9b       	sbis	0x0b, 5	; 11
  8c:	fe cf       	rjmp	.-4      	; 0x8a <_Z8Transmith>
	UDR = data;
  8e:	8c b9       	out	0x0c, r24	; 12
  90:	08 95       	ret

00000092 <_Z3maplllll>:

}
long map(long x, long in_min, long in_max, long out_min, long out_max)
{
  92:	4f 92       	push	r4
  94:	5f 92       	push	r5
  96:	6f 92       	push	r6
  98:	7f 92       	push	r7
  9a:	af 92       	push	r10
  9c:	bf 92       	push	r11
  9e:	cf 92       	push	r12
  a0:	df 92       	push	r13
  a2:	ef 92       	push	r14
  a4:	ff 92       	push	r15
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	cd b7       	in	r28, 0x3d	; 61
  b0:	de b7       	in	r29, 0x3e	; 62
  b2:	29 01       	movw	r4, r18
  b4:	3a 01       	movw	r6, r20
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  b6:	9b 01       	movw	r18, r22
  b8:	ac 01       	movw	r20, r24
  ba:	24 19       	sub	r18, r4
  bc:	35 09       	sbc	r19, r5
  be:	46 09       	sbc	r20, r6
  c0:	57 09       	sbc	r21, r7
  c2:	89 89       	ldd	r24, Y+17	; 0x11
  c4:	9a 89       	ldd	r25, Y+18	; 0x12
  c6:	ab 89       	ldd	r26, Y+19	; 0x13
  c8:	bc 89       	ldd	r27, Y+20	; 0x14
  ca:	bc 01       	movw	r22, r24
  cc:	cd 01       	movw	r24, r26
  ce:	6a 19       	sub	r22, r10
  d0:	7b 09       	sbc	r23, r11
  d2:	8c 09       	sbc	r24, r12
  d4:	9d 09       	sbc	r25, r13
  d6:	0e 94 23 01 	call	0x246	; 0x246 <__mulsi3>
  da:	a8 01       	movw	r20, r16
  dc:	97 01       	movw	r18, r14
  de:	24 19       	sub	r18, r4
  e0:	35 09       	sbc	r19, r5
  e2:	46 09       	sbc	r20, r6
  e4:	57 09       	sbc	r21, r7
  e6:	0e 94 33 01 	call	0x266	; 0x266 <__divmodsi4>
  ea:	ca 01       	movw	r24, r20
  ec:	b9 01       	movw	r22, r18
  ee:	6a 0d       	add	r22, r10
  f0:	7b 1d       	adc	r23, r11
  f2:	8c 1d       	adc	r24, r12
  f4:	9d 1d       	adc	r25, r13
}
  f6:	df 91       	pop	r29
  f8:	cf 91       	pop	r28
  fa:	1f 91       	pop	r17
  fc:	0f 91       	pop	r16
  fe:	ff 90       	pop	r15
 100:	ef 90       	pop	r14
 102:	df 90       	pop	r13
 104:	cf 90       	pop	r12
 106:	bf 90       	pop	r11
 108:	af 90       	pop	r10
 10a:	7f 90       	pop	r7
 10c:	6f 90       	pop	r6
 10e:	5f 90       	pop	r5
 110:	4f 90       	pop	r4
 112:	08 95       	ret

00000114 <__vector_14>:

	}

}
ISR(ADC_vect)
{
 114:	1f 92       	push	r1
 116:	0f 92       	push	r0
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	0f 92       	push	r0
 11c:	11 24       	eor	r1, r1
 11e:	ef 92       	push	r14
 120:	ff 92       	push	r15
 122:	0f 93       	push	r16
 124:	1f 93       	push	r17
 126:	2f 93       	push	r18
 128:	3f 93       	push	r19
 12a:	4f 93       	push	r20
 12c:	5f 93       	push	r21
 12e:	6f 93       	push	r22
 130:	7f 93       	push	r23
 132:	8f 93       	push	r24
 134:	9f 93       	push	r25
 136:	af 93       	push	r26
 138:	bf 93       	push	r27
 13a:	cf 93       	push	r28
 13c:	df 93       	push	r29
 13e:	ef 93       	push	r30
 140:	ff 93       	push	r31
		uint8_t t1 = ADCL;
 142:	e4 b0       	in	r14, 0x04	; 4
		uint8_t t=ADCH;
 144:	f5 b0       	in	r15, 0x05	; 5
		if(ch==1)
 146:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 14a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
 14e:	cf 2d       	mov	r28, r15
 150:	d0 e0       	ldi	r29, 0x00	; 0
 152:	0e 2d       	mov	r16, r14
 154:	10 e0       	ldi	r17, 0x00	; 0
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	e9 f4       	brne	.+58     	; 0x194 <__vector_14+0x80>
		{
			Transmit(0x11);
 15a:	81 e1       	ldi	r24, 0x11	; 17
 15c:	0e 94 45 00 	call	0x8a	; 0x8a <_Z8Transmith>
			Transmit(t1);
 160:	8e 2d       	mov	r24, r14
 162:	0e 94 45 00 	call	0x8a	; 0x8a <_Z8Transmith>
			Transmit(t);
 166:	8f 2d       	mov	r24, r15
 168:	0e 94 45 00 	call	0x8a	; 0x8a <_Z8Transmith>
			int x=t<<8|t1;
 16c:	bc 2f       	mov	r27, r28
 16e:	aa 27       	eor	r26, r26
 170:	a0 2b       	or	r26, r16
 172:	b1 2b       	or	r27, r17
			OCR0=map(x,0,1023,0,255);
 174:	2f ef       	ldi	r18, 0xFF	; 255
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	0e 94 52 01 	call	0x2a4	; 0x2a4 <__usmulhisi3>
 17c:	2f ef       	ldi	r18, 0xFF	; 255
 17e:	33 e0       	ldi	r19, 0x03	; 3
 180:	40 e0       	ldi	r20, 0x00	; 0
 182:	50 e0       	ldi	r21, 0x00	; 0
 184:	0e 94 33 01 	call	0x266	; 0x266 <__divmodsi4>
 188:	2c bf       	out	0x3c, r18	; 60
			ch=0;
 18a:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__data_start+0x1>
 18e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
 192:	1f c0       	rjmp	.+62     	; 0x1d2 <__vector_14+0xbe>
		}
		else
		{
			Transmit(0x21);
 194:	81 e2       	ldi	r24, 0x21	; 33
 196:	0e 94 45 00 	call	0x8a	; 0x8a <_Z8Transmith>
			ch=1;
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
 1a2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
			Transmit(t1);
 1a6:	8e 2d       	mov	r24, r14
 1a8:	0e 94 45 00 	call	0x8a	; 0x8a <_Z8Transmith>
			Transmit(t);
 1ac:	8f 2d       	mov	r24, r15
 1ae:	0e 94 45 00 	call	0x8a	; 0x8a <_Z8Transmith>
			int y=t<<8|t1;
 1b2:	dc 2f       	mov	r29, r28
 1b4:	cc 27       	eor	r28, r28
 1b6:	de 01       	movw	r26, r28
 1b8:	a0 2b       	or	r26, r16
 1ba:	b1 2b       	or	r27, r17
			OCR2=map(y,0,1023,0,255);
 1bc:	2f ef       	ldi	r18, 0xFF	; 255
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	0e 94 52 01 	call	0x2a4	; 0x2a4 <__usmulhisi3>
 1c4:	2f ef       	ldi	r18, 0xFF	; 255
 1c6:	33 e0       	ldi	r19, 0x03	; 3
 1c8:	40 e0       	ldi	r20, 0x00	; 0
 1ca:	50 e0       	ldi	r21, 0x00	; 0
 1cc:	0e 94 33 01 	call	0x266	; 0x266 <__divmodsi4>
 1d0:	23 bd       	out	0x23, r18	; 35
		}
			ADMUX ^=(1<<MUX0);
 1d2:	97 b1       	in	r25, 0x07	; 7
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	89 27       	eor	r24, r25
 1d8:	87 b9       	out	0x07, r24	; 7


ADCSRA |= (1<<ADSC);
 1da:	36 9a       	sbi	0x06, 6	; 6

	}
 1dc:	ff 91       	pop	r31
 1de:	ef 91       	pop	r30
 1e0:	df 91       	pop	r29
 1e2:	cf 91       	pop	r28
 1e4:	bf 91       	pop	r27
 1e6:	af 91       	pop	r26
 1e8:	9f 91       	pop	r25
 1ea:	8f 91       	pop	r24
 1ec:	7f 91       	pop	r23
 1ee:	6f 91       	pop	r22
 1f0:	5f 91       	pop	r21
 1f2:	4f 91       	pop	r20
 1f4:	3f 91       	pop	r19
 1f6:	2f 91       	pop	r18
 1f8:	1f 91       	pop	r17
 1fa:	0f 91       	pop	r16
 1fc:	ff 90       	pop	r15
 1fe:	ef 90       	pop	r14
 200:	0f 90       	pop	r0
 202:	0f be       	out	0x3f, r0	; 63
 204:	0f 90       	pop	r0
 206:	1f 90       	pop	r1
 208:	18 95       	reti

0000020a <main>:
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}
int main(void)
{
	TCCR0 |= 1<<WGM00 | 1<< WGM01  | 1<< COM01 |1 <<CS00;
 20a:	83 b7       	in	r24, 0x33	; 51
 20c:	89 66       	ori	r24, 0x69	; 105
 20e:	83 bf       	out	0x33, r24	; 51
DDRB |= 1<< PB3 | 1<<PINB0 | 1<<PINB1;
 210:	87 b3       	in	r24, 0x17	; 23
 212:	8b 60       	ori	r24, 0x0B	; 11
 214:	87 bb       	out	0x17, r24	; 23
TCCR2 |= 1<<WGM20 | 1<< WGM21 | 1<< COM21 |1 <<CS20;
 216:	85 b5       	in	r24, 0x25	; 37
 218:	89 66       	ori	r24, 0x69	; 105
 21a:	85 bd       	out	0x25, r24	; 37
DDRD |= 1<< PB7 | 1<< PB2;
 21c:	81 b3       	in	r24, 0x11	; 17
 21e:	84 68       	ori	r24, 0x84	; 132
 220:	81 bb       	out	0x11, r24	; 17
PORTB &= ~(1<< PINB0);
 222:	c0 98       	cbi	0x18, 0	; 24
PORTD &= ~(1<< PIND2);
 224:	92 98       	cbi	0x12, 2	; 18

  UCSRA = (1 << U2X);
 226:	82 e0       	ldi	r24, 0x02	; 2
 228:	8b b9       	out	0x0b, r24	; 11
   UBRRH = (unsigned char) (ubbr_value >> 8);
 22a:	10 bc       	out	0x20, r1	; 32
   UBRRL = (unsigned char) ubbr_value;
 22c:	8f ef       	ldi	r24, 0xFF	; 255
 22e:	89 b9       	out	0x09, r24	; 9
   UCSRB = (1 << TXEN);
 230:	88 e0       	ldi	r24, 0x08	; 8
 232:	8a b9       	out	0x0a, r24	; 10
   UCSRC = (1 << URSEL)| (3 << UCSZ0);
 234:	86 e8       	ldi	r24, 0x86	; 134
 236:	80 bd       	out	0x20, r24	; 32

  ADMUX |= 1<< REFS0;													// ADC setup
 238:	3e 9a       	sbi	0x07, 6	; 7
	ADCSRA |= 1<< ADPS2;
 23a:	32 9a       	sbi	0x06, 2	; 6
	ADCSRA|=1<<ADIE;
 23c:	33 9a       	sbi	0x06, 3	; 6
	sei();
 23e:	78 94       	sei

	ADCSRA |= 1<< ADEN;
 240:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA|=(1<<ADSC);
 242:	36 9a       	sbi	0x06, 6	; 6
 244:	ff cf       	rjmp	.-2      	; 0x244 <main+0x3a>

00000246 <__mulsi3>:
 246:	db 01       	movw	r26, r22
 248:	8f 93       	push	r24
 24a:	9f 93       	push	r25
 24c:	0e 94 59 01 	call	0x2b2	; 0x2b2 <__muluhisi3>
 250:	bf 91       	pop	r27
 252:	af 91       	pop	r26
 254:	a2 9f       	mul	r26, r18
 256:	80 0d       	add	r24, r0
 258:	91 1d       	adc	r25, r1
 25a:	a3 9f       	mul	r26, r19
 25c:	90 0d       	add	r25, r0
 25e:	b2 9f       	mul	r27, r18
 260:	90 0d       	add	r25, r0
 262:	11 24       	eor	r1, r1
 264:	08 95       	ret

00000266 <__divmodsi4>:
 266:	05 2e       	mov	r0, r21
 268:	97 fb       	bst	r25, 7
 26a:	1e f4       	brtc	.+6      	; 0x272 <__divmodsi4+0xc>
 26c:	00 94       	com	r0
 26e:	0e 94 4a 01 	call	0x294	; 0x294 <__negsi2>
 272:	57 fd       	sbrc	r21, 7
 274:	07 d0       	rcall	.+14     	; 0x284 <__divmodsi4_neg2>
 276:	0e 94 64 01 	call	0x2c8	; 0x2c8 <__udivmodsi4>
 27a:	07 fc       	sbrc	r0, 7
 27c:	03 d0       	rcall	.+6      	; 0x284 <__divmodsi4_neg2>
 27e:	4e f4       	brtc	.+18     	; 0x292 <__divmodsi4_exit>
 280:	0c 94 4a 01 	jmp	0x294	; 0x294 <__negsi2>

00000284 <__divmodsi4_neg2>:
 284:	50 95       	com	r21
 286:	40 95       	com	r20
 288:	30 95       	com	r19
 28a:	21 95       	neg	r18
 28c:	3f 4f       	sbci	r19, 0xFF	; 255
 28e:	4f 4f       	sbci	r20, 0xFF	; 255
 290:	5f 4f       	sbci	r21, 0xFF	; 255

00000292 <__divmodsi4_exit>:
 292:	08 95       	ret

00000294 <__negsi2>:
 294:	90 95       	com	r25
 296:	80 95       	com	r24
 298:	70 95       	com	r23
 29a:	61 95       	neg	r22
 29c:	7f 4f       	sbci	r23, 0xFF	; 255
 29e:	8f 4f       	sbci	r24, 0xFF	; 255
 2a0:	9f 4f       	sbci	r25, 0xFF	; 255
 2a2:	08 95       	ret

000002a4 <__usmulhisi3>:
 2a4:	0e 94 86 01 	call	0x30c	; 0x30c <__umulhisi3>

000002a8 <__usmulhisi3_tail>:
 2a8:	b7 ff       	sbrs	r27, 7
 2aa:	08 95       	ret
 2ac:	82 1b       	sub	r24, r18
 2ae:	93 0b       	sbc	r25, r19
 2b0:	08 95       	ret

000002b2 <__muluhisi3>:
 2b2:	0e 94 86 01 	call	0x30c	; 0x30c <__umulhisi3>
 2b6:	a5 9f       	mul	r26, r21
 2b8:	90 0d       	add	r25, r0
 2ba:	b4 9f       	mul	r27, r20
 2bc:	90 0d       	add	r25, r0
 2be:	a4 9f       	mul	r26, r20
 2c0:	80 0d       	add	r24, r0
 2c2:	91 1d       	adc	r25, r1
 2c4:	11 24       	eor	r1, r1
 2c6:	08 95       	ret

000002c8 <__udivmodsi4>:
 2c8:	a1 e2       	ldi	r26, 0x21	; 33
 2ca:	1a 2e       	mov	r1, r26
 2cc:	aa 1b       	sub	r26, r26
 2ce:	bb 1b       	sub	r27, r27
 2d0:	fd 01       	movw	r30, r26
 2d2:	0d c0       	rjmp	.+26     	; 0x2ee <__udivmodsi4_ep>

000002d4 <__udivmodsi4_loop>:
 2d4:	aa 1f       	adc	r26, r26
 2d6:	bb 1f       	adc	r27, r27
 2d8:	ee 1f       	adc	r30, r30
 2da:	ff 1f       	adc	r31, r31
 2dc:	a2 17       	cp	r26, r18
 2de:	b3 07       	cpc	r27, r19
 2e0:	e4 07       	cpc	r30, r20
 2e2:	f5 07       	cpc	r31, r21
 2e4:	20 f0       	brcs	.+8      	; 0x2ee <__udivmodsi4_ep>
 2e6:	a2 1b       	sub	r26, r18
 2e8:	b3 0b       	sbc	r27, r19
 2ea:	e4 0b       	sbc	r30, r20
 2ec:	f5 0b       	sbc	r31, r21

000002ee <__udivmodsi4_ep>:
 2ee:	66 1f       	adc	r22, r22
 2f0:	77 1f       	adc	r23, r23
 2f2:	88 1f       	adc	r24, r24
 2f4:	99 1f       	adc	r25, r25
 2f6:	1a 94       	dec	r1
 2f8:	69 f7       	brne	.-38     	; 0x2d4 <__udivmodsi4_loop>
 2fa:	60 95       	com	r22
 2fc:	70 95       	com	r23
 2fe:	80 95       	com	r24
 300:	90 95       	com	r25
 302:	9b 01       	movw	r18, r22
 304:	ac 01       	movw	r20, r24
 306:	bd 01       	movw	r22, r26
 308:	cf 01       	movw	r24, r30
 30a:	08 95       	ret

0000030c <__umulhisi3>:
 30c:	a2 9f       	mul	r26, r18
 30e:	b0 01       	movw	r22, r0
 310:	b3 9f       	mul	r27, r19
 312:	c0 01       	movw	r24, r0
 314:	a3 9f       	mul	r26, r19
 316:	70 0d       	add	r23, r0
 318:	81 1d       	adc	r24, r1
 31a:	11 24       	eor	r1, r1
 31c:	91 1d       	adc	r25, r1
 31e:	b2 9f       	mul	r27, r18
 320:	70 0d       	add	r23, r0
 322:	81 1d       	adc	r24, r1
 324:	11 24       	eor	r1, r1
 326:	91 1d       	adc	r25, r1
 328:	08 95       	ret

0000032a <_exit>:
 32a:	f8 94       	cli

0000032c <__stop_program>:
 32c:	ff cf       	rjmp	.-2      	; 0x32c <__stop_program>
