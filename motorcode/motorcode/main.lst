   1               		.file	"main.cpp"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	_Z7Receivev
  12               	_Z7Receivev:
  13               	.LFB2:
  14               		.file 1 "main.cpp"
   1:main.cpp      **** 
   2:main.cpp      **** #include <avr/io.h>
   3:main.cpp      **** #include<avr/interrupt.h>
   4:main.cpp      **** #include<math.h>
   5:main.cpp      **** #define FOSC 1000000// Clock Speed
   6:main.cpp      **** #define BAUD 9600
   7:main.cpp      **** #define ubbr_value FOSC/16/BAUD-1
   8:main.cpp      **** int Receive()
   9:main.cpp      **** {
  15               		.loc 1 9 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
  21               	.L2:
  10:main.cpp      **** 	while (! (UCSRA & (1 << RXC)) );
  22               		.loc 1 10 0
  23 0000 5F9B      		sbis 0xb,7
  24 0002 00C0      		rjmp .L2
  11:main.cpp      **** 	return UDR;
  25               		.loc 1 11 0
  26 0004 8CB1      		in r24,0xc
  12:main.cpp      **** }
  27               		.loc 1 12 0
  28 0006 90E0      		ldi r25,0
  29 0008 0895      		ret
  30               		.cfi_endproc
  31               	.LFE2:
  33               	.global	_Z8Transmith
  35               	_Z8Transmith:
  36               	.LFB3:
  13:main.cpp      **** 
  14:main.cpp      **** void Transmit(unsigned char data)
  15:main.cpp      **** {
  37               		.loc 1 15 0
  38               		.cfi_startproc
  39               	/* prologue: function */
  40               	/* frame size = 0 */
  41               	/* stack size = 0 */
  42               	.L__stack_usage = 0
  43               	.LVL0:
  44               	.L6:
  16:main.cpp      **** 	while (! (UCSRA & (1 << UDRE)) );
  45               		.loc 1 16 0
  46 000a 5D9B      		sbis 0xb,5
  47 000c 00C0      		rjmp .L6
  17:main.cpp      **** 	UDR = data;
  48               		.loc 1 17 0
  49 000e 8CB9      		out 0xc,r24
  50 0010 0895      		ret
  51               		.cfi_endproc
  52               	.LFE3:
  54               	.global	_Z3maplllll
  56               	_Z3maplllll:
  57               	.LFB4:
  18:main.cpp      **** 
  19:main.cpp      **** }
  20:main.cpp      **** long map(long x, long in_min, long in_max, long out_min, long out_max)
  21:main.cpp      **** {
  58               		.loc 1 21 0
  59               		.cfi_startproc
  60               	.LVL1:
  61 0012 4F92      		push r4
  62               	.LCFI0:
  63               		.cfi_def_cfa_offset 3
  64               		.cfi_offset 4, -2
  65 0014 5F92      		push r5
  66               	.LCFI1:
  67               		.cfi_def_cfa_offset 4
  68               		.cfi_offset 5, -3
  69 0016 6F92      		push r6
  70               	.LCFI2:
  71               		.cfi_def_cfa_offset 5
  72               		.cfi_offset 6, -4
  73 0018 7F92      		push r7
  74               	.LCFI3:
  75               		.cfi_def_cfa_offset 6
  76               		.cfi_offset 7, -5
  77 001a AF92      		push r10
  78               	.LCFI4:
  79               		.cfi_def_cfa_offset 7
  80               		.cfi_offset 10, -6
  81 001c BF92      		push r11
  82               	.LCFI5:
  83               		.cfi_def_cfa_offset 8
  84               		.cfi_offset 11, -7
  85 001e CF92      		push r12
  86               	.LCFI6:
  87               		.cfi_def_cfa_offset 9
  88               		.cfi_offset 12, -8
  89 0020 DF92      		push r13
  90               	.LCFI7:
  91               		.cfi_def_cfa_offset 10
  92               		.cfi_offset 13, -9
  93 0022 EF92      		push r14
  94               	.LCFI8:
  95               		.cfi_def_cfa_offset 11
  96               		.cfi_offset 14, -10
  97 0024 FF92      		push r15
  98               	.LCFI9:
  99               		.cfi_def_cfa_offset 12
 100               		.cfi_offset 15, -11
 101 0026 0F93      		push r16
 102               	.LCFI10:
 103               		.cfi_def_cfa_offset 13
 104               		.cfi_offset 16, -12
 105 0028 1F93      		push r17
 106               	.LCFI11:
 107               		.cfi_def_cfa_offset 14
 108               		.cfi_offset 17, -13
 109 002a CF93      		push r28
 110               	.LCFI12:
 111               		.cfi_def_cfa_offset 15
 112               		.cfi_offset 28, -14
 113 002c DF93      		push r29
 114               	.LCFI13:
 115               		.cfi_def_cfa_offset 16
 116               		.cfi_offset 29, -15
 117 002e CDB7      		in r28,__SP_L__
 118 0030 DEB7      		in r29,__SP_H__
 119               	.LCFI14:
 120               		.cfi_def_cfa_register 28
 121               	/* prologue: function */
 122               	/* frame size = 0 */
 123               	/* stack size = 14 */
 124               	.L__stack_usage = 14
 125 0032 2901      		movw r4,r18
 126 0034 3A01      		movw r6,r20
  22:main.cpp      **** 	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 127               		.loc 1 22 0
 128 0036 9B01      		movw r18,r22
 129 0038 AC01      		movw r20,r24
 130               	.LVL2:
 131 003a 2419      		sub r18,r4
 132 003c 3509      		sbc r19,r5
 133 003e 4609      		sbc r20,r6
 134 0040 5709      		sbc r21,r7
 135 0042 8989      		ldd r24,Y+17
 136 0044 9A89      		ldd r25,Y+18
 137 0046 AB89      		ldd r26,Y+19
 138 0048 BC89      		ldd r27,Y+20
 139 004a BC01      		movw r22,r24
 140 004c CD01      		movw r24,r26
 141               	.LVL3:
 142 004e 6A19      		sub r22,r10
 143 0050 7B09      		sbc r23,r11
 144 0052 8C09      		sbc r24,r12
 145 0054 9D09      		sbc r25,r13
 146 0056 0E94 0000 		call __mulsi3
 147 005a A801      		movw r20,r16
 148 005c 9701      		movw r18,r14
 149 005e 2419      		sub r18,r4
 150 0060 3509      		sbc r19,r5
 151 0062 4609      		sbc r20,r6
 152 0064 5709      		sbc r21,r7
 153 0066 0E94 0000 		call __divmodsi4
 154 006a CA01      		movw r24,r20
 155 006c B901      		movw r22,r18
 156 006e 6A0D      		add r22,r10
 157 0070 7B1D      		adc r23,r11
 158 0072 8C1D      		adc r24,r12
 159 0074 9D1D      		adc r25,r13
 160               	/* epilogue start */
  23:main.cpp      **** }
 161               		.loc 1 23 0
 162 0076 DF91      		pop r29
 163 0078 CF91      		pop r28
 164 007a 1F91      		pop r17
 165 007c 0F91      		pop r16
 166 007e FF90      		pop r15
 167 0080 EF90      		pop r14
 168               	.LVL4:
 169 0082 DF90      		pop r13
 170 0084 CF90      		pop r12
 171 0086 BF90      		pop r11
 172 0088 AF90      		pop r10
 173               	.LVL5:
 174 008a 7F90      		pop r7
 175 008c 6F90      		pop r6
 176 008e 5F90      		pop r5
 177 0090 4F90      		pop r4
 178               	.LVL6:
 179 0092 0895      		ret
 180               		.cfi_endproc
 181               	.LFE4:
 183               	.global	__subsf3
 184               	.global	__mulsf3
 185               	.global	__divsf3
 186               	.global	__addsf3
 187               	.global	_Z3mapddddd
 189               	_Z3mapddddd:
 190               	.LFB5:
  24:main.cpp      **** double map(double x, double in_min, double in_max, double out_min, double out_max)
  25:main.cpp      **** {
 191               		.loc 1 25 0
 192               		.cfi_startproc
 193               	.LVL7:
 194 0094 4F92      		push r4
 195               	.LCFI15:
 196               		.cfi_def_cfa_offset 3
 197               		.cfi_offset 4, -2
 198 0096 5F92      		push r5
 199               	.LCFI16:
 200               		.cfi_def_cfa_offset 4
 201               		.cfi_offset 5, -3
 202 0098 6F92      		push r6
 203               	.LCFI17:
 204               		.cfi_def_cfa_offset 5
 205               		.cfi_offset 6, -4
 206 009a 7F92      		push r7
 207               	.LCFI18:
 208               		.cfi_def_cfa_offset 6
 209               		.cfi_offset 7, -5
 210 009c AF92      		push r10
 211               	.LCFI19:
 212               		.cfi_def_cfa_offset 7
 213               		.cfi_offset 10, -6
 214 009e BF92      		push r11
 215               	.LCFI20:
 216               		.cfi_def_cfa_offset 8
 217               		.cfi_offset 11, -7
 218 00a0 CF92      		push r12
 219               	.LCFI21:
 220               		.cfi_def_cfa_offset 9
 221               		.cfi_offset 12, -8
 222 00a2 DF92      		push r13
 223               	.LCFI22:
 224               		.cfi_def_cfa_offset 10
 225               		.cfi_offset 13, -9
 226 00a4 EF92      		push r14
 227               	.LCFI23:
 228               		.cfi_def_cfa_offset 11
 229               		.cfi_offset 14, -10
 230 00a6 FF92      		push r15
 231               	.LCFI24:
 232               		.cfi_def_cfa_offset 12
 233               		.cfi_offset 15, -11
 234 00a8 0F93      		push r16
 235               	.LCFI25:
 236               		.cfi_def_cfa_offset 13
 237               		.cfi_offset 16, -12
 238 00aa 1F93      		push r17
 239               	.LCFI26:
 240               		.cfi_def_cfa_offset 14
 241               		.cfi_offset 17, -13
 242 00ac CF93      		push r28
 243               	.LCFI27:
 244               		.cfi_def_cfa_offset 15
 245               		.cfi_offset 28, -14
 246 00ae DF93      		push r29
 247               	.LCFI28:
 248               		.cfi_def_cfa_offset 16
 249               		.cfi_offset 29, -15
 250 00b0 CDB7      		in r28,__SP_L__
 251 00b2 DEB7      		in r29,__SP_H__
 252               	.LCFI29:
 253               		.cfi_def_cfa_register 28
 254 00b4 2897      		sbiw r28,8
 255               	.LCFI30:
 256               		.cfi_def_cfa_offset 24
 257 00b6 0FB6      		in __tmp_reg__,__SREG__
 258 00b8 F894      		cli
 259 00ba DEBF      		out __SP_H__,r29
 260 00bc 0FBE      		out __SREG__,__tmp_reg__
 261 00be CDBF      		out __SP_L__,r28
 262               	/* prologue: function */
 263               	/* frame size = 8 */
 264               	/* stack size = 22 */
 265               	.L__stack_usage = 22
 266 00c0 2901      		movw r4,r18
 267 00c2 3A01      		movw r6,r20
 268 00c4 ED82      		std Y+5,r14
 269 00c6 FE82      		std Y+6,r15
 270 00c8 0F83      		std Y+7,r16
 271 00ca 1887      		std Y+8,r17
  26:main.cpp      ****   return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 272               		.loc 1 26 0
 273 00cc 0E94 0000 		call __subsf3
 274               	.LVL8:
 275 00d0 6983      		std Y+1,r22
 276 00d2 7A83      		std Y+2,r23
 277 00d4 8B83      		std Y+3,r24
 278 00d6 9C83      		std Y+4,r25
 279 00d8 A601      		movw r20,r12
 280 00da 9501      		movw r18,r10
 281 00dc 698D      		ldd r22,Y+25
 282 00de 7A8D      		ldd r23,Y+26
 283 00e0 8B8D      		ldd r24,Y+27
 284 00e2 9C8D      		ldd r25,Y+28
 285 00e4 0E94 0000 		call __subsf3
 286               	.LVL9:
 287 00e8 9B01      		movw r18,r22
 288 00ea AC01      		movw r20,r24
 289 00ec 6981      		ldd r22,Y+1
 290 00ee 7A81      		ldd r23,Y+2
 291 00f0 8B81      		ldd r24,Y+3
 292 00f2 9C81      		ldd r25,Y+4
 293 00f4 0E94 0000 		call __mulsf3
 294               	.LVL10:
 295 00f8 6983      		std Y+1,r22
 296 00fa 7A83      		std Y+2,r23
 297 00fc 8B83      		std Y+3,r24
 298 00fe 9C83      		std Y+4,r25
 299 0100 A301      		movw r20,r6
 300 0102 9201      		movw r18,r4
 301 0104 C801      		movw r24,r16
 302 0106 B701      		movw r22,r14
 303 0108 0E94 0000 		call __subsf3
 304               	.LVL11:
 305 010c 9B01      		movw r18,r22
 306 010e AC01      		movw r20,r24
 307 0110 6981      		ldd r22,Y+1
 308 0112 7A81      		ldd r23,Y+2
 309 0114 8B81      		ldd r24,Y+3
 310 0116 9C81      		ldd r25,Y+4
 311 0118 0E94 0000 		call __divsf3
 312               	.LVL12:
 313 011c A601      		movw r20,r12
 314 011e 9501      		movw r18,r10
 315 0120 0E94 0000 		call __addsf3
 316               	.LVL13:
 317               	/* epilogue start */
  27:main.cpp      **** }
 318               		.loc 1 27 0
 319 0124 2896      		adiw r28,8
 320 0126 0FB6      		in __tmp_reg__,__SREG__
 321 0128 F894      		cli
 322 012a DEBF      		out __SP_H__,r29
 323 012c 0FBE      		out __SREG__,__tmp_reg__
 324 012e CDBF      		out __SP_L__,r28
 325 0130 DF91      		pop r29
 326 0132 CF91      		pop r28
 327 0134 1F91      		pop r17
 328 0136 0F91      		pop r16
 329 0138 FF90      		pop r15
 330 013a EF90      		pop r14
 331               	.LVL14:
 332 013c DF90      		pop r13
 333 013e CF90      		pop r12
 334 0140 BF90      		pop r11
 335 0142 AF90      		pop r10
 336               	.LVL15:
 337 0144 7F90      		pop r7
 338 0146 6F90      		pop r6
 339 0148 5F90      		pop r5
 340 014a 4F90      		pop r4
 341               	.LVL16:
 342 014c 0895      		ret
 343               		.cfi_endproc
 344               	.LFE5:
 346               	.global	_Z22ellipticalSquareToDiscddRdS_
 348               	_Z22ellipticalSquareToDiscddRdS_:
 349               	.LFB6:
  28:main.cpp      **** void ellipticalSquareToDisc(double x, double y, double& u, double& v)
  29:main.cpp      **** {
 350               		.loc 1 29 0
 351               		.cfi_startproc
 352               	.LVL17:
 353 014e 4F92      		push r4
 354               	.LCFI31:
 355               		.cfi_def_cfa_offset 3
 356               		.cfi_offset 4, -2
 357 0150 5F92      		push r5
 358               	.LCFI32:
 359               		.cfi_def_cfa_offset 4
 360               		.cfi_offset 5, -3
 361 0152 6F92      		push r6
 362               	.LCFI33:
 363               		.cfi_def_cfa_offset 5
 364               		.cfi_offset 6, -4
 365 0154 7F92      		push r7
 366               	.LCFI34:
 367               		.cfi_def_cfa_offset 6
 368               		.cfi_offset 7, -5
 369 0156 8F92      		push r8
 370               	.LCFI35:
 371               		.cfi_def_cfa_offset 7
 372               		.cfi_offset 8, -6
 373 0158 9F92      		push r9
 374               	.LCFI36:
 375               		.cfi_def_cfa_offset 8
 376               		.cfi_offset 9, -7
 377 015a AF92      		push r10
 378               	.LCFI37:
 379               		.cfi_def_cfa_offset 9
 380               		.cfi_offset 10, -8
 381 015c BF92      		push r11
 382               	.LCFI38:
 383               		.cfi_def_cfa_offset 10
 384               		.cfi_offset 11, -9
 385 015e EF92      		push r14
 386               	.LCFI39:
 387               		.cfi_def_cfa_offset 11
 388               		.cfi_offset 14, -10
 389 0160 FF92      		push r15
 390               	.LCFI40:
 391               		.cfi_def_cfa_offset 12
 392               		.cfi_offset 15, -11
 393 0162 0F93      		push r16
 394               	.LCFI41:
 395               		.cfi_def_cfa_offset 13
 396               		.cfi_offset 16, -12
 397 0164 1F93      		push r17
 398               	.LCFI42:
 399               		.cfi_def_cfa_offset 14
 400               		.cfi_offset 17, -13
 401               	/* prologue: function */
 402               	/* frame size = 0 */
 403               	/* stack size = 12 */
 404               	.L__stack_usage = 12
 405 0166 2B01      		movw r4,r22
 406 0168 3C01      		movw r6,r24
 407 016a 4901      		movw r8,r18
 408 016c 5A01      		movw r10,r20
  30:main.cpp      ****     u = x * sqrt(1.0 - y*y/2.0);
 409               		.loc 1 30 0
 410 016e CA01      		movw r24,r20
 411 0170 B901      		movw r22,r18
 412               	.LVL18:
 413 0172 0E94 0000 		call __mulsf3
 414               	.LVL19:
 415 0176 20E0      		ldi r18,0
 416 0178 30E0      		ldi r19,0
 417 017a 40E0      		ldi r20,0
 418 017c 5FE3      		ldi r21,lo8(63)
 419 017e 0E94 0000 		call __mulsf3
 420               	.LVL20:
 421 0182 9B01      		movw r18,r22
 422 0184 AC01      		movw r20,r24
 423 0186 60E0      		ldi r22,0
 424 0188 70E0      		ldi r23,0
 425 018a 80E8      		ldi r24,lo8(-128)
 426 018c 9FE3      		ldi r25,lo8(63)
 427 018e 0E94 0000 		call __subsf3
 428               	.LVL21:
 429 0192 0E94 0000 		call sqrt
 430               	.LVL22:
 431 0196 A301      		movw r20,r6
 432 0198 9201      		movw r18,r4
 433 019a 0E94 0000 		call __mulsf3
 434               	.LVL23:
 435 019e F801      		movw r30,r16
 436 01a0 6083      		st Z,r22
 437 01a2 7183      		std Z+1,r23
 438 01a4 8283      		std Z+2,r24
 439 01a6 9383      		std Z+3,r25
  31:main.cpp      ****     v = y * sqrt(1.0 - x*x/2.0);
 440               		.loc 1 31 0
 441 01a8 A301      		movw r20,r6
 442 01aa 9201      		movw r18,r4
 443 01ac C301      		movw r24,r6
 444 01ae B201      		movw r22,r4
 445 01b0 0E94 0000 		call __mulsf3
 446               	.LVL24:
 447 01b4 20E0      		ldi r18,0
 448 01b6 30E0      		ldi r19,0
 449 01b8 40E0      		ldi r20,0
 450 01ba 5FE3      		ldi r21,lo8(63)
 451 01bc 0E94 0000 		call __mulsf3
 452               	.LVL25:
 453 01c0 9B01      		movw r18,r22
 454 01c2 AC01      		movw r20,r24
 455 01c4 60E0      		ldi r22,0
 456 01c6 70E0      		ldi r23,0
 457 01c8 80E8      		ldi r24,lo8(-128)
 458 01ca 9FE3      		ldi r25,lo8(63)
 459 01cc 0E94 0000 		call __subsf3
 460               	.LVL26:
 461 01d0 0E94 0000 		call sqrt
 462               	.LVL27:
 463 01d4 9B01      		movw r18,r22
 464 01d6 AC01      		movw r20,r24
 465 01d8 C501      		movw r24,r10
 466 01da B401      		movw r22,r8
 467 01dc 0E94 0000 		call __mulsf3
 468               	.LVL28:
 469 01e0 F701      		movw r30,r14
 470 01e2 6083      		st Z,r22
 471 01e4 7183      		std Z+1,r23
 472 01e6 8283      		std Z+2,r24
 473 01e8 9383      		std Z+3,r25
 474               	/* epilogue start */
  32:main.cpp      **** }
 475               		.loc 1 32 0
 476 01ea 1F91      		pop r17
 477 01ec 0F91      		pop r16
 478               	.LVL29:
 479 01ee FF90      		pop r15
 480 01f0 EF90      		pop r14
 481               	.LVL30:
 482 01f2 BF90      		pop r11
 483 01f4 AF90      		pop r10
 484 01f6 9F90      		pop r9
 485 01f8 8F90      		pop r8
 486               	.LVL31:
 487 01fa 7F90      		pop r7
 488 01fc 6F90      		pop r6
 489 01fe 5F90      		pop r5
 490 0200 4F90      		pop r4
 491               	.LVL32:
 492 0202 0895      		ret
 493               		.cfi_endproc
 494               	.LFE6:
 496               	.global	_Z22ellipticalDiscToSquareddRdS_
 498               	_Z22ellipticalDiscToSquareddRdS_:
 499               	.LFB7:
  33:main.cpp      **** 
  34:main.cpp      **** void ellipticalDiscToSquare(double u, double v, double& x, double& y)
  35:main.cpp      **** {
 500               		.loc 1 35 0
 501               		.cfi_startproc
 502               	.LVL33:
 503 0204 4F92      		push r4
 504               	.LCFI43:
 505               		.cfi_def_cfa_offset 3
 506               		.cfi_offset 4, -2
 507 0206 5F92      		push r5
 508               	.LCFI44:
 509               		.cfi_def_cfa_offset 4
 510               		.cfi_offset 5, -3
 511 0208 6F92      		push r6
 512               	.LCFI45:
 513               		.cfi_def_cfa_offset 5
 514               		.cfi_offset 6, -4
 515 020a 7F92      		push r7
 516               	.LCFI46:
 517               		.cfi_def_cfa_offset 6
 518               		.cfi_offset 7, -5
 519 020c 8F92      		push r8
 520               	.LCFI47:
 521               		.cfi_def_cfa_offset 7
 522               		.cfi_offset 8, -6
 523 020e 9F92      		push r9
 524               	.LCFI48:
 525               		.cfi_def_cfa_offset 8
 526               		.cfi_offset 9, -7
 527 0210 AF92      		push r10
 528               	.LCFI49:
 529               		.cfi_def_cfa_offset 9
 530               		.cfi_offset 10, -8
 531 0212 BF92      		push r11
 532               	.LCFI50:
 533               		.cfi_def_cfa_offset 10
 534               		.cfi_offset 11, -9
 535 0214 CF92      		push r12
 536               	.LCFI51:
 537               		.cfi_def_cfa_offset 11
 538               		.cfi_offset 12, -10
 539 0216 DF92      		push r13
 540               	.LCFI52:
 541               		.cfi_def_cfa_offset 12
 542               		.cfi_offset 13, -11
 543 0218 EF92      		push r14
 544               	.LCFI53:
 545               		.cfi_def_cfa_offset 13
 546               		.cfi_offset 14, -12
 547 021a FF92      		push r15
 548               	.LCFI54:
 549               		.cfi_def_cfa_offset 14
 550               		.cfi_offset 15, -13
 551 021c 0F93      		push r16
 552               	.LCFI55:
 553               		.cfi_def_cfa_offset 15
 554               		.cfi_offset 16, -14
 555 021e 1F93      		push r17
 556               	.LCFI56:
 557               		.cfi_def_cfa_offset 16
 558               		.cfi_offset 17, -15
 559 0220 CF93      		push r28
 560               	.LCFI57:
 561               		.cfi_def_cfa_offset 17
 562               		.cfi_offset 28, -16
 563 0222 DF93      		push r29
 564               	.LCFI58:
 565               		.cfi_def_cfa_offset 18
 566               		.cfi_offset 29, -17
 567 0224 CDB7      		in r28,__SP_L__
 568 0226 DEB7      		in r29,__SP_H__
 569               	.LCFI59:
 570               		.cfi_def_cfa_register 28
 571 0228 2E97      		sbiw r28,14
 572               	.LCFI60:
 573               		.cfi_def_cfa_offset 32
 574 022a 0FB6      		in __tmp_reg__,__SREG__
 575 022c F894      		cli
 576 022e DEBF      		out __SP_H__,r29
 577 0230 0FBE      		out __SREG__,__tmp_reg__
 578 0232 CDBF      		out __SP_L__,r28
 579               	/* prologue: function */
 580               	/* frame size = 14 */
 581               	/* stack size = 30 */
 582               	.L__stack_usage = 30
 583 0234 4B01      		movw r8,r22
 584 0236 5C01      		movw r10,r24
 585 0238 2901      		movw r4,r18
 586 023a 3A01      		movw r6,r20
 587 023c FE86      		std Y+14,r15
 588 023e ED86      		std Y+13,r14
  36:main.cpp      ****     double u2 = u * u;
 589               		.loc 1 36 0
 590 0240 9B01      		movw r18,r22
 591 0242 AC01      		movw r20,r24
 592               	.LVL34:
 593 0244 0E94 0000 		call __mulsf3
 594               	.LVL35:
 595 0248 6B01      		movw r12,r22
 596 024a 7C01      		movw r14,r24
 597               	.LVL36:
  37:main.cpp      ****     double v2 = v * v;
 598               		.loc 1 37 0
 599 024c A301      		movw r20,r6
 600 024e 9201      		movw r18,r4
 601 0250 C301      		movw r24,r6
 602 0252 B201      		movw r22,r4
 603 0254 0E94 0000 		call __mulsf3
 604               	.LVL37:
 605 0258 6983      		std Y+1,r22
 606 025a 7A83      		std Y+2,r23
 607 025c 8B83      		std Y+3,r24
 608 025e 9C83      		std Y+4,r25
 609               	.LVL38:
  38:main.cpp      ****     double twosqrt2 = 2.0 * sqrt(2.0);
  39:main.cpp      ****     double subtermx = 2.0 + u2 - v2;
 610               		.loc 1 39 0
 611 0260 20E0      		ldi r18,0
 612 0262 30E0      		ldi r19,0
 613 0264 40E0      		ldi r20,0
 614 0266 50E4      		ldi r21,lo8(64)
 615 0268 C701      		movw r24,r14
 616 026a B601      		movw r22,r12
 617               	.LVL39:
 618 026c 0E94 0000 		call __addsf3
 619               	.LVL40:
 620 0270 2981      		ldd r18,Y+1
 621 0272 3A81      		ldd r19,Y+2
 622 0274 4B81      		ldd r20,Y+3
 623 0276 5C81      		ldd r21,Y+4
 624 0278 0E94 0000 		call __subsf3
 625               	.LVL41:
 626 027c 6D83      		std Y+5,r22
 627 027e 7E83      		std Y+6,r23
 628 0280 8F83      		std Y+7,r24
 629 0282 9887      		std Y+8,r25
 630               	.LVL42:
  40:main.cpp      ****     double subtermy = 2.0 - u2 + v2;
 631               		.loc 1 40 0
 632 0284 A701      		movw r20,r14
 633 0286 9601      		movw r18,r12
 634 0288 60E0      		ldi r22,0
 635 028a 70E0      		ldi r23,0
 636 028c 80E0      		ldi r24,0
 637 028e 90E4      		ldi r25,lo8(64)
 638               	.LVL43:
 639 0290 0E94 0000 		call __subsf3
 640               	.LVL44:
 641 0294 2981      		ldd r18,Y+1
 642 0296 3A81      		ldd r19,Y+2
 643 0298 4B81      		ldd r20,Y+3
 644 029a 5C81      		ldd r21,Y+4
 645 029c 0E94 0000 		call __addsf3
 646               	.LVL45:
 647 02a0 6B01      		movw r12,r22
 648 02a2 7C01      		movw r14,r24
 649               	.LVL46:
  41:main.cpp      ****     double termx1 = subtermx + u * twosqrt2;
 650               		.loc 1 41 0
 651 02a4 23EF      		ldi r18,lo8(-13)
 652 02a6 34E0      		ldi r19,lo8(4)
 653 02a8 45E3      		ldi r20,lo8(53)
 654 02aa 50E4      		ldi r21,lo8(64)
 655 02ac C501      		movw r24,r10
 656 02ae B401      		movw r22,r8
 657 02b0 0E94 0000 		call __mulsf3
 658               	.LVL47:
 659 02b4 4B01      		movw r8,r22
 660 02b6 5C01      		movw r10,r24
 661               	.LVL48:
  42:main.cpp      ****     double termx2 = subtermx - u * twosqrt2;
  43:main.cpp      ****     double termy1 = subtermy + v * twosqrt2;
 662               		.loc 1 43 0
 663 02b8 23EF      		ldi r18,lo8(-13)
 664 02ba 34E0      		ldi r19,lo8(4)
 665 02bc 45E3      		ldi r20,lo8(53)
 666 02be 50E4      		ldi r21,lo8(64)
 667 02c0 C301      		movw r24,r6
 668 02c2 B201      		movw r22,r4
 669 02c4 0E94 0000 		call __mulsf3
 670               	.LVL49:
 671 02c8 6983      		std Y+1,r22
 672 02ca 7A83      		std Y+2,r23
 673 02cc 8B83      		std Y+3,r24
 674 02ce 9C83      		std Y+4,r25
 675               	.LVL50:
  44:main.cpp      ****     double termy2 = subtermy - v * twosqrt2;
  45:main.cpp      ****     x = 0.5 * sqrt(termx1) - 0.5 * sqrt(termx2);
 676               		.loc 1 45 0
 677 02d0 A501      		movw r20,r10
 678 02d2 9401      		movw r18,r8
 679 02d4 6D81      		ldd r22,Y+5
 680 02d6 7E81      		ldd r23,Y+6
 681 02d8 8F81      		ldd r24,Y+7
 682 02da 9885      		ldd r25,Y+8
 683               	.LVL51:
 684 02dc 0E94 0000 		call __addsf3
 685               	.LVL52:
 686 02e0 0E94 0000 		call sqrt
 687               	.LVL53:
 688 02e4 6987      		std Y+9,r22
 689 02e6 7A87      		std Y+10,r23
 690 02e8 8B87      		std Y+11,r24
 691 02ea 9C87      		std Y+12,r25
 692 02ec A501      		movw r20,r10
 693 02ee 9401      		movw r18,r8
 694 02f0 6D81      		ldd r22,Y+5
 695 02f2 7E81      		ldd r23,Y+6
 696 02f4 8F81      		ldd r24,Y+7
 697 02f6 9885      		ldd r25,Y+8
 698 02f8 0E94 0000 		call __subsf3
 699               	.LVL54:
 700 02fc 0E94 0000 		call sqrt
 701               	.LVL55:
 702 0300 2B01      		movw r4,r22
 703 0302 3C01      		movw r6,r24
 704               	.LVL56:
 705 0304 20E0      		ldi r18,0
 706 0306 30E0      		ldi r19,0
 707 0308 40E0      		ldi r20,0
 708 030a 5FE3      		ldi r21,lo8(63)
 709 030c 6985      		ldd r22,Y+9
 710 030e 7A85      		ldd r23,Y+10
 711 0310 8B85      		ldd r24,Y+11
 712 0312 9C85      		ldd r25,Y+12
 713 0314 0E94 0000 		call __mulsf3
 714               	.LVL57:
 715 0318 4B01      		movw r8,r22
 716 031a 5C01      		movw r10,r24
 717               	.LVL58:
 718 031c 20E0      		ldi r18,0
 719 031e 30E0      		ldi r19,0
 720 0320 40E0      		ldi r20,0
 721 0322 5FE3      		ldi r21,lo8(63)
 722 0324 C301      		movw r24,r6
 723 0326 B201      		movw r22,r4
 724 0328 0E94 0000 		call __mulsf3
 725               	.LVL59:
 726 032c 9B01      		movw r18,r22
 727 032e AC01      		movw r20,r24
 728 0330 C501      		movw r24,r10
 729 0332 B401      		movw r22,r8
 730 0334 0E94 0000 		call __subsf3
 731               	.LVL60:
 732 0338 F801      		movw r30,r16
 733 033a 6083      		st Z,r22
 734 033c 7183      		std Z+1,r23
 735 033e 8283      		std Z+2,r24
 736 0340 9383      		std Z+3,r25
  46:main.cpp      ****     y = 0.5 * sqrt(termy1) - 0.5 * sqrt(termy2);
 737               		.loc 1 46 0
 738 0342 2981      		ldd r18,Y+1
 739 0344 3A81      		ldd r19,Y+2
 740 0346 4B81      		ldd r20,Y+3
 741 0348 5C81      		ldd r21,Y+4
 742 034a C701      		movw r24,r14
 743 034c B601      		movw r22,r12
 744 034e 0E94 0000 		call __addsf3
 745               	.LVL61:
 746 0352 0E94 0000 		call sqrt
 747               	.LVL62:
 748 0356 4B01      		movw r8,r22
 749 0358 5C01      		movw r10,r24
 750 035a 2981      		ldd r18,Y+1
 751 035c 3A81      		ldd r19,Y+2
 752 035e 4B81      		ldd r20,Y+3
 753 0360 5C81      		ldd r21,Y+4
 754 0362 C701      		movw r24,r14
 755 0364 B601      		movw r22,r12
 756 0366 0E94 0000 		call __subsf3
 757               	.LVL63:
 758 036a 0E94 0000 		call sqrt
 759               	.LVL64:
 760 036e 2B01      		movw r4,r22
 761 0370 3C01      		movw r6,r24
 762 0372 20E0      		ldi r18,0
 763 0374 30E0      		ldi r19,0
 764 0376 40E0      		ldi r20,0
 765 0378 5FE3      		ldi r21,lo8(63)
 766 037a C501      		movw r24,r10
 767 037c B401      		movw r22,r8
 768 037e 0E94 0000 		call __mulsf3
 769               	.LVL65:
 770 0382 6B01      		movw r12,r22
 771 0384 7C01      		movw r14,r24
 772               	.LVL66:
 773 0386 20E0      		ldi r18,0
 774 0388 30E0      		ldi r19,0
 775 038a 40E0      		ldi r20,0
 776 038c 5FE3      		ldi r21,lo8(63)
 777 038e C301      		movw r24,r6
 778 0390 B201      		movw r22,r4
 779 0392 0E94 0000 		call __mulsf3
 780               	.LVL67:
 781 0396 9B01      		movw r18,r22
 782 0398 AC01      		movw r20,r24
 783 039a C701      		movw r24,r14
 784 039c B601      		movw r22,r12
 785 039e 0E94 0000 		call __subsf3
 786               	.LVL68:
 787 03a2 ED85      		ldd r30,Y+13
 788 03a4 FE85      		ldd r31,Y+14
 789 03a6 6083      		st Z,r22
 790 03a8 7183      		std Z+1,r23
 791 03aa 8283      		std Z+2,r24
 792 03ac 9383      		std Z+3,r25
 793               	/* epilogue start */
  47:main.cpp      **** 
  48:main.cpp      **** }
 794               		.loc 1 48 0
 795 03ae 2E96      		adiw r28,14
 796 03b0 0FB6      		in __tmp_reg__,__SREG__
 797 03b2 F894      		cli
 798 03b4 DEBF      		out __SP_H__,r29
 799 03b6 0FBE      		out __SREG__,__tmp_reg__
 800 03b8 CDBF      		out __SP_L__,r28
 801 03ba DF91      		pop r29
 802 03bc CF91      		pop r28
 803 03be 1F91      		pop r17
 804 03c0 0F91      		pop r16
 805               	.LVL69:
 806 03c2 FF90      		pop r15
 807 03c4 EF90      		pop r14
 808               	.LVL70:
 809 03c6 DF90      		pop r13
 810 03c8 CF90      		pop r12
 811 03ca BF90      		pop r11
 812 03cc AF90      		pop r10
 813 03ce 9F90      		pop r9
 814 03d0 8F90      		pop r8
 815 03d2 7F90      		pop r7
 816 03d4 6F90      		pop r6
 817 03d6 5F90      		pop r5
 818 03d8 4F90      		pop r4
 819 03da 0895      		ret
 820               		.cfi_endproc
 821               	.LFE7:
 823               	.global	__floatunsisf
 824               	.global	__fixsfsi
 825               		.section	.text.startup,"ax",@progbits
 826               	.global	main
 828               	main:
 829               	.LFB8:
  49:main.cpp      **** int main (void)
  50:main.cpp      **** {
 830               		.loc 1 50 0
 831               		.cfi_startproc
 832 0000 CF93      		push r28
 833               	.LCFI61:
 834               		.cfi_def_cfa_offset 3
 835               		.cfi_offset 28, -2
 836 0002 DF93      		push r29
 837               	.LCFI62:
 838               		.cfi_def_cfa_offset 4
 839               		.cfi_offset 29, -3
 840 0004 CDB7      		in r28,__SP_L__
 841 0006 DEB7      		in r29,__SP_H__
 842               	.LCFI63:
 843               		.cfi_def_cfa_register 28
 844 0008 2A97      		sbiw r28,10
 845               	.LCFI64:
 846               		.cfi_def_cfa_offset 14
 847 000a 0FB6      		in __tmp_reg__,__SREG__
 848 000c F894      		cli
 849 000e DEBF      		out __SP_H__,r29
 850 0010 0FBE      		out __SREG__,__tmp_reg__
 851 0012 CDBF      		out __SP_L__,r28
 852               	/* prologue: function */
 853               	/* frame size = 10 */
 854               	/* stack size = 12 */
 855               	.L__stack_usage = 12
  51:main.cpp      **** 	TCCR0 |= 1<<WGM00 | 1<< WGM01  | 1<< COM01 |1 <<CS00;
 856               		.loc 1 51 0
 857 0014 83B7      		in r24,0x33
 858 0016 8966      		ori r24,lo8(105)
 859 0018 83BF      		out 0x33,r24
  52:main.cpp      **** DDRB |= 1<< PB3 | 1<<PINB0 | 1<<PINB1;
 860               		.loc 1 52 0
 861 001a 87B3      		in r24,0x17
 862 001c 8B60      		ori r24,lo8(11)
 863 001e 87BB      		out 0x17,r24
  53:main.cpp      **** TCCR2 |= 1<<WGM20 | 1<< WGM21 | 1<< COM21 |1 <<CS20;
 864               		.loc 1 53 0
 865 0020 85B5      		in r24,0x25
 866 0022 8966      		ori r24,lo8(105)
 867 0024 85BD      		out 0x25,r24
  54:main.cpp      **** DDRD |= 1<< PB7 | 1<< PB2;
 868               		.loc 1 54 0
 869 0026 81B3      		in r24,0x11
 870 0028 8468      		ori r24,lo8(-124)
 871 002a 81BB      		out 0x11,r24
  55:main.cpp      **** PORTB &= ~(1<< PINB0);
 872               		.loc 1 55 0
 873 002c C098      		cbi 0x18,0
  56:main.cpp      **** PORTD &= ~(1<< PIND2);
 874               		.loc 1 56 0
 875 002e 9298      		cbi 0x12,2
  57:main.cpp      ****  UCSRA = (1 << U2X);
 876               		.loc 1 57 0
 877 0030 82E0      		ldi r24,lo8(2)
 878 0032 8BB9      		out 0xb,r24
  58:main.cpp      **** 	UBRRH = (unsigned char) (ubbr_value >> 8);
 879               		.loc 1 58 0
 880 0034 10BC      		out 0x20,__zero_reg__
  59:main.cpp      **** 	UBRRL = (unsigned char) ubbr_value;
 881               		.loc 1 59 0
 882 0036 8FEF      		ldi r24,lo8(-1)
 883 0038 89B9      		out 0x9,r24
  60:main.cpp      **** 	UCSRB = (1 << RXEN);
 884               		.loc 1 60 0
 885 003a 80E1      		ldi r24,lo8(16)
 886 003c 8AB9      		out 0xa,r24
  61:main.cpp      **** 	UCSRC = (1 << URSEL) | (3 << UCSZ0);
 887               		.loc 1 61 0
 888 003e 86E8      		ldi r24,lo8(-122)
 889 0040 80BD      		out 0x20,r24
 890               	.L14:
 891               	.LBB11:
  62:main.cpp      **** 	while (1)
  63:main.cpp      ****     {
  64:main.cpp      **** 			if(Receive()!=0x11)
 892               		.loc 1 64 0
 893 0042 0E94 0000 		call _Z7Receivev
 894               	.LVL71:
 895 0046 4197      		sbiw r24,17
 896 0048 01F4      		brne .L14
  65:main.cpp      **** 			continue;
  66:main.cpp      **** 			int c1= Receive();
 897               		.loc 1 66 0
 898 004a 0E94 0000 		call _Z7Receivev
 899               	.LVL72:
 900 004e 3C01      		movw r6,r24
 901               	.LVL73:
  67:main.cpp      **** 	    uint16_t x2 = (Receive())<<8 | c1;
 902               		.loc 1 67 0
 903 0050 0E94 0000 		call _Z7Receivev
 904               	.LVL74:
 905 0054 582E      		mov r5,r24
 906               	.LVL75:
  68:main.cpp      **** 	    int c2=Receive();
 907               		.loc 1 68 0
 908 0056 0E94 0000 		call _Z7Receivev
 909               	.LVL76:
 910 005a 5C01      		movw r10,r24
 911               	.LVL77:
  69:main.cpp      **** 	    uint16_t y2=(Receive())<<8 | c2;
 912               		.loc 1 69 0
 913 005c 0E94 0000 		call _Z7Receivev
 914               	.LVL78:
  70:main.cpp      **** 		double x1 = x2 - 512;
  71:main.cpp      **** 		double y1 = 512 - y2;
  72:main.cpp      **** 		x1=map(x1,-512,512,-1,1);
  73:main.cpp      **** 		y1=map(y1,-512,512,-1,1);
  74:main.cpp      **** 		double xans,yans;
  75:main.cpp      **** 		ellipticalSquareToDisc(x1, y1, xans, yans);
 915               		.loc 1 75 0
 916 0060 382E      		mov r3,r24
 917 0062 212C      		mov r2,__zero_reg__
 918 0064 A228      		or r10,r2
 919 0066 B328      		or r11,r3
 920               	.LVL79:
 921 0068 60E0      		ldi r22,0
 922 006a 72E0      		ldi r23,lo8(2)
 923 006c 6A19      		sub r22,r10
 924 006e 7B09      		sbc r23,r11
 925 0070 80E0      		ldi r24,0
 926 0072 90E0      		ldi r25,0
 927 0074 0E94 0000 		call __floatunsisf
 928               	.LVL80:
 929 0078 20E0      		ldi r18,0
 930 007a 30E0      		ldi r19,0
 931 007c 40E0      		ldi r20,0
 932 007e 54E4      		ldi r21,lo8(68)
 933 0080 0E94 0000 		call __addsf3
 934               	.LVL81:
 935 0084 9B01      		movw r18,r22
 936 0086 AC01      		movw r20,r24
 937 0088 0E94 0000 		call __addsf3
 938               	.LVL82:
 939 008c 20E0      		ldi r18,0
 940 008e 30E0      		ldi r19,0
 941 0090 40E8      		ldi r20,lo8(-128)
 942 0092 5AE3      		ldi r21,lo8(58)
 943 0094 0E94 0000 		call __mulsf3
 944               	.LVL83:
 945 0098 20E0      		ldi r18,0
 946 009a 30E0      		ldi r19,0
 947 009c 40E8      		ldi r20,lo8(-128)
 948 009e 5FE3      		ldi r21,lo8(63)
 949 00a0 0E94 0000 		call __subsf3
 950               	.LVL84:
 951 00a4 4B01      		movw r8,r22
 952 00a6 5C01      		movw r10,r24
 953 00a8 5A86      		std Y+10,r5
 954 00aa 1986      		std Y+9,__zero_reg__
 955 00ac 6985      		ldd r22,Y+9
 956 00ae 7A85      		ldd r23,Y+10
 957 00b0 6629      		or r22,r6
 958 00b2 7729      		or r23,r7
 959 00b4 7250      		subi r23,2
 960 00b6 80E0      		ldi r24,0
 961 00b8 90E0      		ldi r25,0
 962 00ba 0E94 0000 		call __floatunsisf
 963               	.LVL85:
 964 00be 20E0      		ldi r18,0
 965 00c0 30E0      		ldi r19,0
 966 00c2 40E0      		ldi r20,0
 967 00c4 54E4      		ldi r21,lo8(68)
 968 00c6 0E94 0000 		call __addsf3
 969               	.LVL86:
 970 00ca 9B01      		movw r18,r22
 971 00cc AC01      		movw r20,r24
 972 00ce 0E94 0000 		call __addsf3
 973               	.LVL87:
 974 00d2 20E0      		ldi r18,0
 975 00d4 30E0      		ldi r19,0
 976 00d6 40E8      		ldi r20,lo8(-128)
 977 00d8 5AE3      		ldi r21,lo8(58)
 978 00da 0E94 0000 		call __mulsf3
 979               	.LVL88:
 980 00de 20E0      		ldi r18,0
 981 00e0 30E0      		ldi r19,0
 982 00e2 40E8      		ldi r20,lo8(-128)
 983 00e4 5FE3      		ldi r21,lo8(63)
 984 00e6 0E94 0000 		call __subsf3
 985               	.LVL89:
 986 00ea 9E01      		movw r18,r28
 987 00ec 2F5F      		subi r18,-1
 988 00ee 3F4F      		sbci r19,-1
 989 00f0 7901      		movw r14,r18
 990 00f2 8E01      		movw r16,r28
 991 00f4 0B5F      		subi r16,-5
 992 00f6 1F4F      		sbci r17,-1
 993 00f8 A501      		movw r20,r10
 994 00fa 9401      		movw r18,r8
 995 00fc 0E94 0000 		call _Z22ellipticalSquareToDiscddRdS_
 996               	.LVL90:
  76:main.cpp      **** 
  77:main.cpp      **** 
  78:main.cpp      **** 
  79:main.cpp      **** 		double x = (xans * 0.707) + (yans * 0.707);
 997               		.loc 1 79 0
 998 0100 CD80      		ldd r12,Y+5
 999 0102 DE80      		ldd r13,Y+6
 1000 0104 EF80      		ldd r14,Y+7
 1001 0106 F884      		ldd r15,Y+8
 1002 0108 24EF      		ldi r18,lo8(-12)
 1003 010a 3DEF      		ldi r19,lo8(-3)
 1004 010c 44E3      		ldi r20,lo8(52)
 1005 010e 5FE3      		ldi r21,lo8(63)
 1006 0110 6981      		ldd r22,Y+1
 1007 0112 7A81      		ldd r23,Y+2
 1008 0114 8B81      		ldd r24,Y+3
 1009 0116 9C81      		ldd r25,Y+4
 1010 0118 0E94 0000 		call __mulsf3
 1011               	.LVL91:
 1012 011c 4B01      		movw r8,r22
 1013 011e 5C01      		movw r10,r24
 1014               	.LVL92:
  80:main.cpp      **** 		double y = (-xans * 0.707) + (yans * 0.707);
  81:main.cpp      **** 		ellipticalDiscToSquare(x,y,xans,yans);
 1015               		.loc 1 81 0
 1016 0120 C701      		movw r24,r14
 1017 0122 B601      		movw r22,r12
 1018 0124 9058      		subi r25,0x80
 1019 0126 24EF      		ldi r18,lo8(-12)
 1020 0128 3DEF      		ldi r19,lo8(-3)
 1021 012a 44E3      		ldi r20,lo8(52)
 1022 012c 5FE3      		ldi r21,lo8(63)
 1023 012e 0E94 0000 		call __mulsf3
 1024               	.LVL93:
 1025 0132 A501      		movw r20,r10
 1026 0134 9401      		movw r18,r8
 1027 0136 0E94 0000 		call __addsf3
 1028               	.LVL94:
 1029 013a 2B01      		movw r4,r22
 1030 013c 3C01      		movw r6,r24
 1031 013e 24EF      		ldi r18,lo8(-12)
 1032 0140 3DEF      		ldi r19,lo8(-3)
 1033 0142 44E3      		ldi r20,lo8(52)
 1034 0144 5FE3      		ldi r21,lo8(63)
 1035 0146 C701      		movw r24,r14
 1036 0148 B601      		movw r22,r12
 1037 014a 0E94 0000 		call __mulsf3
 1038               	.LVL95:
 1039 014e A501      		movw r20,r10
 1040 0150 9401      		movw r18,r8
 1041 0152 0E94 0000 		call __addsf3
 1042               	.LVL96:
 1043 0156 9E01      		movw r18,r28
 1044 0158 2F5F      		subi r18,-1
 1045 015a 3F4F      		sbci r19,-1
 1046 015c 7901      		movw r14,r18
 1047 015e A301      		movw r20,r6
 1048 0160 9201      		movw r18,r4
 1049 0162 0E94 0000 		call _Z22ellipticalDiscToSquareddRdS_
 1050               	.LVL97:
  82:main.cpp      **** 		int x3=(int)map(xans,-0.991273,0.991273,-255,255);
 1051               		.loc 1 82 0
 1052 0166 21E1      		ldi r18,lo8(17)
 1053 0168 34EC      		ldi r19,lo8(-60)
 1054 016a 4DE7      		ldi r20,lo8(125)
 1055 016c 5FE3      		ldi r21,lo8(63)
 1056 016e 6D81      		ldd r22,Y+5
 1057 0170 7E81      		ldd r23,Y+6
 1058 0172 8F81      		ldd r24,Y+7
 1059 0174 9885      		ldd r25,Y+8
 1060 0176 0E94 0000 		call __addsf3
 1061               	.LVL98:
 1062 017a 20E0      		ldi r18,0
 1063 017c 30E0      		ldi r19,0
 1064 017e 4FEF      		ldi r20,lo8(-1)
 1065 0180 53E4      		ldi r21,lo8(67)
 1066 0182 0E94 0000 		call __mulsf3
 1067               	.LVL99:
 1068 0186 21E1      		ldi r18,lo8(17)
 1069 0188 34EC      		ldi r19,lo8(-60)
 1070 018a 4DEF      		ldi r20,lo8(-3)
 1071 018c 5FE3      		ldi r21,lo8(63)
 1072 018e 0E94 0000 		call __divsf3
 1073               	.LVL100:
 1074 0192 20E0      		ldi r18,0
 1075 0194 30E0      		ldi r19,0
 1076 0196 4FE7      		ldi r20,lo8(127)
 1077 0198 53E4      		ldi r21,lo8(67)
 1078 019a 0E94 0000 		call __subsf3
 1079               	.LVL101:
 1080 019e 0E94 0000 		call __fixsfsi
 1081               	.LVL102:
 1082 01a2 962E      		mov r9,r22
 1083 01a4 A62E      		mov r10,r22
 1084 01a6 B72E      		mov r11,r23
 1085               	.LVL103:
  83:main.cpp      **** 		int y3=(int)map(yans,-0.991273,0.991273,-255,255);
 1086               		.loc 1 83 0
 1087 01a8 21E1      		ldi r18,lo8(17)
 1088 01aa 34EC      		ldi r19,lo8(-60)
 1089 01ac 4DE7      		ldi r20,lo8(125)
 1090 01ae 5FE3      		ldi r21,lo8(63)
 1091 01b0 6981      		ldd r22,Y+1
 1092 01b2 7A81      		ldd r23,Y+2
 1093 01b4 8B81      		ldd r24,Y+3
 1094 01b6 9C81      		ldd r25,Y+4
 1095 01b8 0E94 0000 		call __addsf3
 1096               	.LVL104:
 1097 01bc 20E0      		ldi r18,0
 1098 01be 30E0      		ldi r19,0
 1099 01c0 4FEF      		ldi r20,lo8(-1)
 1100 01c2 53E4      		ldi r21,lo8(67)
 1101 01c4 0E94 0000 		call __mulsf3
 1102               	.LVL105:
 1103 01c8 21E1      		ldi r18,lo8(17)
 1104 01ca 34EC      		ldi r19,lo8(-60)
 1105 01cc 4DEF      		ldi r20,lo8(-3)
 1106 01ce 5FE3      		ldi r21,lo8(63)
 1107 01d0 0E94 0000 		call __divsf3
 1108               	.LVL106:
 1109 01d4 20E0      		ldi r18,0
 1110 01d6 30E0      		ldi r19,0
 1111 01d8 4FE7      		ldi r20,lo8(127)
 1112 01da 53E4      		ldi r21,lo8(67)
 1113 01dc 0E94 0000 		call __subsf3
 1114               	.LVL107:
 1115 01e0 0E94 0000 		call __fixsfsi
 1116               	.LVL108:
 1117 01e4 CB01      		movw r24,r22
 1118               	.LVL109:
  84:main.cpp      **** 		/*int x2=x-512;
  85:main.cpp      **** 		int y2=512-y;
  86:main.cpp      **** 		if(y2/x2>=12.8&&y2/x2<=-12.8)
  87:main.cpp      **** 			x2=0;
  88:main.cpp      **** 		if(y2/x2<=0.390625&&y2/x2>=-0.390625)
  89:main.cpp      **** 		y2=0;
  90:main.cpp      **** 		int x3 = x2;
  91:main.cpp      **** 		int y3 = y2;
  92:main.cpp      **** 		int x4= (x3*0.707)+(y3*0.707);
  93:main.cpp      **** 		int y4=-(x3*0.707)+(y3*0.707);
  94:main.cpp      **** 
  95:main.cpp      **** 		int x5=map(x4,-723,723,-255,255);
  96:main.cpp      **** 		int y5=map(y4,-723,723,-255,255);
  97:main.cpp      **** 
  98:main.cpp      **** 		if(x5<20&&x5>-20)
  99:main.cpp      **** 		x5=0;
 100:main.cpp      **** 
 101:main.cpp      **** 		if(y5<20&&y5>-20)
 102:main.cpp      **** 		y5=0;*/
 103:main.cpp      **** 
 104:main.cpp      **** 		if(x3>0)
 1119               		.loc 1 104 0
 1120 01e6 1A14      		cp __zero_reg__,r10
 1121 01e8 1B04      		cpc __zero_reg__,r11
 1122 01ea 04F4      		brge .L16
 105:main.cpp      **** 		{
 106:main.cpp      **** 			OCR0=x3;
 1123               		.loc 1 106 0
 1124 01ec 9CBE      		out 0x3c,r9
 107:main.cpp      **** 			PORTB|=1<<PB0;
 1125               		.loc 1 107 0
 1126 01ee C09A      		sbi 0x18,0
 1127 01f0 00C0      		rjmp .L17
 1128               	.L16:
 108:main.cpp      **** 		}
 109:main.cpp      **** 		else
 110:main.cpp      **** 		{
 111:main.cpp      **** 			OCR0=-x3;
 1129               		.loc 1 111 0
 1130 01f2 9194      		neg r9
 1131 01f4 9CBE      		out 0x3c,r9
 112:main.cpp      **** 			PORTB&=~(1<<PB0);
 1132               		.loc 1 112 0
 1133 01f6 C098      		cbi 0x18,0
 1134               	.L17:
 113:main.cpp      **** 		}
 114:main.cpp      **** 		if(y3>0)
 1135               		.loc 1 114 0
 1136 01f8 1816      		cp __zero_reg__,r24
 1137 01fa 1906      		cpc __zero_reg__,r25
 1138 01fc 04F4      		brge .L18
 115:main.cpp      **** 		{
 116:main.cpp      **** 		OCR2=y3;
 1139               		.loc 1 116 0
 1140 01fe 63BD      		out 0x23,r22
 117:main.cpp      **** 		PORTD|=1<<PD2;
 1141               		.loc 1 117 0
 1142 0200 929A      		sbi 0x12,2
 1143 0202 00C0      		rjmp .L14
 1144               	.L18:
 118:main.cpp      **** 		}
 119:main.cpp      **** 		else
 120:main.cpp      **** 		{
 121:main.cpp      **** 			OCR2=-y3;
 1145               		.loc 1 121 0
 1146 0204 6195      		neg r22
 1147 0206 63BD      		out 0x23,r22
 122:main.cpp      **** 			PORTD&=~1<<PD2;
 1148               		.loc 1 122 0
 1149 0208 82B3      		in r24,0x12
 1150 020a 887F      		andi r24,lo8(-8)
 1151 020c 82BB      		out 0x12,r24
 1152 020e 00C0      		rjmp .L14
 1153               	.LBE11:
 1154               		.cfi_endproc
 1155               	.LFE8:
 1157               		.text
 1158               	.Letext0:
 1159               		.file 2 "/usr/lib/avr/include/stdint.h"
 1160               		.file 3 "/usr/lib/avr/include/math.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.cpp
     /tmp/ccBlD5rJ.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccBlD5rJ.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccBlD5rJ.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccBlD5rJ.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccBlD5rJ.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccBlD5rJ.s:12     .text:0000000000000000 _Z7Receivev
     /tmp/ccBlD5rJ.s:35     .text:000000000000000a _Z8Transmith
     /tmp/ccBlD5rJ.s:56     .text:0000000000000012 _Z3maplllll
     /tmp/ccBlD5rJ.s:189    .text:0000000000000094 _Z3mapddddd
     /tmp/ccBlD5rJ.s:348    .text:000000000000014e _Z22ellipticalSquareToDiscddRdS_
     /tmp/ccBlD5rJ.s:498    .text:0000000000000204 _Z22ellipticalDiscToSquareddRdS_
     /tmp/ccBlD5rJ.s:828    .text.startup:0000000000000000 main

UNDEFINED SYMBOLS
__mulsi3
__divmodsi4
__subsf3
__mulsf3
__divsf3
__addsf3
sqrt
__floatunsisf
__fixsfsi
