
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d1a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000d1a  00000d8e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000011  00000000  00000000  00000d8e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000da0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a09  00000000  00000000  00000e04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006b5  00000000  00000000  0000180d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ab  00000000  00000000  00001ec2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000194  00000000  00000000  00002170  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000044f  00000000  00000000  00002304  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000940  00000000  00000000  00002753  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00003093  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <main>
  64:	0c 94 8b 06 	jmp	0xd16	; 0xd16 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <_Z7Receivev>:
#define FOSC 1000000// Clock Speed
#define BAUD 9600
#define ubbr_value FOSC/16/BAUD-1
int Receive()
{
	while (! (UCSRA & (1 << RXC)) );
  6c:	5f 9b       	sbis	0x0b, 7	; 11
  6e:	fe cf       	rjmp	.-4      	; 0x6c <_Z7Receivev>
	return UDR;
  70:	8c b1       	in	r24, 0x0c	; 12
}
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	08 95       	ret

00000076 <_Z8Transmith>:

void Transmit(unsigned char data)
{
	while (! (UCSRA & (1 << UDRE)) );
  76:	5d 9b       	sbis	0x0b, 5	; 11
  78:	fe cf       	rjmp	.-4      	; 0x76 <_Z8Transmith>
	UDR = data;
  7a:	8c b9       	out	0x0c, r24	; 12
  7c:	08 95       	ret

0000007e <_Z3mapeeeee>:

}

long double map(long double x, long double in_min, long double in_max, long double out_min, long double out_max)
{
  7e:	4f 92       	push	r4
  80:	5f 92       	push	r5
  82:	6f 92       	push	r6
  84:	7f 92       	push	r7
  86:	af 92       	push	r10
  88:	bf 92       	push	r11
  8a:	cf 92       	push	r12
  8c:	df 92       	push	r13
  8e:	ef 92       	push	r14
  90:	ff 92       	push	r15
  92:	0f 93       	push	r16
  94:	1f 93       	push	r17
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	28 97       	sbiw	r28, 0x08	; 8
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	f8 94       	cli
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	cd bf       	out	0x3d, r28	; 61
  aa:	29 01       	movw	r4, r18
  ac:	3a 01       	movw	r6, r20
  ae:	ed 82       	std	Y+5, r14	; 0x05
  b0:	fe 82       	std	Y+6, r15	; 0x06
  b2:	0f 83       	std	Y+7, r16	; 0x07
  b4:	18 87       	std	Y+8, r17	; 0x08
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  b6:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <__subsf3>
  ba:	69 83       	std	Y+1, r22	; 0x01
  bc:	7a 83       	std	Y+2, r23	; 0x02
  be:	8b 83       	std	Y+3, r24	; 0x03
  c0:	9c 83       	std	Y+4, r25	; 0x04
  c2:	a6 01       	movw	r20, r12
  c4:	95 01       	movw	r18, r10
  c6:	69 8d       	ldd	r22, Y+25	; 0x19
  c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
  ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
  cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
  ce:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <__subsf3>
  d2:	9b 01       	movw	r18, r22
  d4:	ac 01       	movw	r20, r24
  d6:	69 81       	ldd	r22, Y+1	; 0x01
  d8:	7a 81       	ldd	r23, Y+2	; 0x02
  da:	8b 81       	ldd	r24, Y+3	; 0x03
  dc:	9c 81       	ldd	r25, Y+4	; 0x04
  de:	0e 94 c3 05 	call	0xb86	; 0xb86 <__mulsf3>
  e2:	69 83       	std	Y+1, r22	; 0x01
  e4:	7a 83       	std	Y+2, r23	; 0x02
  e6:	8b 83       	std	Y+3, r24	; 0x03
  e8:	9c 83       	std	Y+4, r25	; 0x04
  ea:	a3 01       	movw	r20, r6
  ec:	92 01       	movw	r18, r4
  ee:	c8 01       	movw	r24, r16
  f0:	b7 01       	movw	r22, r14
  f2:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <__subsf3>
  f6:	9b 01       	movw	r18, r22
  f8:	ac 01       	movw	r20, r24
  fa:	69 81       	ldd	r22, Y+1	; 0x01
  fc:	7a 81       	ldd	r23, Y+2	; 0x02
  fe:	8b 81       	ldd	r24, Y+3	; 0x03
 100:	9c 81       	ldd	r25, Y+4	; 0x04
 102:	0e 94 64 04 	call	0x8c8	; 0x8c8 <__divsf3>
 106:	a6 01       	movw	r20, r12
 108:	95 01       	movw	r18, r10
 10a:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__addsf3>
}
 10e:	28 96       	adiw	r28, 0x08	; 8
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	f8 94       	cli
 114:	de bf       	out	0x3e, r29	; 62
 116:	0f be       	out	0x3f, r0	; 63
 118:	cd bf       	out	0x3d, r28	; 61
 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	1f 91       	pop	r17
 120:	0f 91       	pop	r16
 122:	ff 90       	pop	r15
 124:	ef 90       	pop	r14
 126:	df 90       	pop	r13
 128:	cf 90       	pop	r12
 12a:	bf 90       	pop	r11
 12c:	af 90       	pop	r10
 12e:	7f 90       	pop	r7
 130:	6f 90       	pop	r6
 132:	5f 90       	pop	r5
 134:	4f 90       	pop	r4
 136:	08 95       	ret

00000138 <_Z22ellipticalSquareToDisceeReS_>:
void ellipticalSquareToDisc(long double x, long double y, long double& u, long double& v)
{
 138:	4f 92       	push	r4
 13a:	5f 92       	push	r5
 13c:	6f 92       	push	r6
 13e:	7f 92       	push	r7
 140:	8f 92       	push	r8
 142:	9f 92       	push	r9
 144:	af 92       	push	r10
 146:	bf 92       	push	r11
 148:	ef 92       	push	r14
 14a:	ff 92       	push	r15
 14c:	0f 93       	push	r16
 14e:	1f 93       	push	r17
 150:	2b 01       	movw	r4, r22
 152:	3c 01       	movw	r6, r24
 154:	49 01       	movw	r8, r18
 156:	5a 01       	movw	r10, r20
	u = x * sqrt(1.0 - y*y/2.0);
 158:	ca 01       	movw	r24, r20
 15a:	b9 01       	movw	r22, r18
 15c:	0e 94 c3 05 	call	0xb86	; 0xb86 <__mulsf3>
 160:	20 e0       	ldi	r18, 0x00	; 0
 162:	30 e0       	ldi	r19, 0x00	; 0
 164:	40 e0       	ldi	r20, 0x00	; 0
 166:	5f e3       	ldi	r21, 0x3F	; 63
 168:	0e 94 c3 05 	call	0xb86	; 0xb86 <__mulsf3>
 16c:	9b 01       	movw	r18, r22
 16e:	ac 01       	movw	r20, r24
 170:	60 e0       	ldi	r22, 0x00	; 0
 172:	70 e0       	ldi	r23, 0x00	; 0
 174:	80 e8       	ldi	r24, 0x80	; 128
 176:	9f e3       	ldi	r25, 0x3F	; 63
 178:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <__subsf3>
 17c:	0e 94 36 06 	call	0xc6c	; 0xc6c <sqrt>
 180:	a3 01       	movw	r20, r6
 182:	92 01       	movw	r18, r4
 184:	0e 94 c3 05 	call	0xb86	; 0xb86 <__mulsf3>
 188:	f8 01       	movw	r30, r16
 18a:	60 83       	st	Z, r22
 18c:	71 83       	std	Z+1, r23	; 0x01
 18e:	82 83       	std	Z+2, r24	; 0x02
 190:	93 83       	std	Z+3, r25	; 0x03
	v = y * sqrt(1.0 - x*x/2.0);
 192:	a3 01       	movw	r20, r6
 194:	92 01       	movw	r18, r4
 196:	c3 01       	movw	r24, r6
 198:	b2 01       	movw	r22, r4
 19a:	0e 94 c3 05 	call	0xb86	; 0xb86 <__mulsf3>
 19e:	20 e0       	ldi	r18, 0x00	; 0
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	40 e0       	ldi	r20, 0x00	; 0
 1a4:	5f e3       	ldi	r21, 0x3F	; 63
 1a6:	0e 94 c3 05 	call	0xb86	; 0xb86 <__mulsf3>
 1aa:	9b 01       	movw	r18, r22
 1ac:	ac 01       	movw	r20, r24
 1ae:	60 e0       	ldi	r22, 0x00	; 0
 1b0:	70 e0       	ldi	r23, 0x00	; 0
 1b2:	80 e8       	ldi	r24, 0x80	; 128
 1b4:	9f e3       	ldi	r25, 0x3F	; 63
 1b6:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <__subsf3>
 1ba:	0e 94 36 06 	call	0xc6c	; 0xc6c <sqrt>
 1be:	9b 01       	movw	r18, r22
 1c0:	ac 01       	movw	r20, r24
 1c2:	c5 01       	movw	r24, r10
 1c4:	b4 01       	movw	r22, r8
 1c6:	0e 94 c3 05 	call	0xb86	; 0xb86 <__mulsf3>
 1ca:	f7 01       	movw	r30, r14
 1cc:	60 83       	st	Z, r22
 1ce:	71 83       	std	Z+1, r23	; 0x01
 1d0:	82 83       	std	Z+2, r24	; 0x02
 1d2:	93 83       	std	Z+3, r25	; 0x03
}
 1d4:	1f 91       	pop	r17
 1d6:	0f 91       	pop	r16
 1d8:	ff 90       	pop	r15
 1da:	ef 90       	pop	r14
 1dc:	bf 90       	pop	r11
 1de:	af 90       	pop	r10
 1e0:	9f 90       	pop	r9
 1e2:	8f 90       	pop	r8
 1e4:	7f 90       	pop	r7
 1e6:	6f 90       	pop	r6
 1e8:	5f 90       	pop	r5
 1ea:	4f 90       	pop	r4
 1ec:	08 95       	ret

000001ee <_Z22ellipticalDiscToSquareeeReS_>:

void ellipticalDiscToSquare(long double u, long double v, long double& x, long double& y)
{
 1ee:	4f 92       	push	r4
 1f0:	5f 92       	push	r5
 1f2:	6f 92       	push	r6
 1f4:	7f 92       	push	r7
 1f6:	8f 92       	push	r8
 1f8:	9f 92       	push	r9
 1fa:	af 92       	push	r10
 1fc:	bf 92       	push	r11
 1fe:	cf 92       	push	r12
 200:	df 92       	push	r13
 202:	ef 92       	push	r14
 204:	ff 92       	push	r15
 206:	0f 93       	push	r16
 208:	1f 93       	push	r17
 20a:	cf 93       	push	r28
 20c:	df 93       	push	r29
 20e:	cd b7       	in	r28, 0x3d	; 61
 210:	de b7       	in	r29, 0x3e	; 62
 212:	2e 97       	sbiw	r28, 0x0e	; 14
 214:	0f b6       	in	r0, 0x3f	; 63
 216:	f8 94       	cli
 218:	de bf       	out	0x3e, r29	; 62
 21a:	0f be       	out	0x3f, r0	; 63
 21c:	cd bf       	out	0x3d, r28	; 61
 21e:	4b 01       	movw	r8, r22
 220:	5c 01       	movw	r10, r24
 222:	29 01       	movw	r4, r18
 224:	3a 01       	movw	r6, r20
 226:	fe 86       	std	Y+14, r15	; 0x0e
 228:	ed 86       	std	Y+13, r14	; 0x0d
	long double u2 = u * u;
 22a:	9b 01       	movw	r18, r22
 22c:	ac 01       	movw	r20, r24
 22e:	0e 94 c3 05 	call	0xb86	; 0xb86 <__mulsf3>
 232:	6b 01       	movw	r12, r22
 234:	7c 01       	movw	r14, r24
	long double v2 = v * v;
 236:	a3 01       	movw	r20, r6
 238:	92 01       	movw	r18, r4
 23a:	c3 01       	movw	r24, r6
 23c:	b2 01       	movw	r22, r4
 23e:	0e 94 c3 05 	call	0xb86	; 0xb86 <__mulsf3>
 242:	69 83       	std	Y+1, r22	; 0x01
 244:	7a 83       	std	Y+2, r23	; 0x02
 246:	8b 83       	std	Y+3, r24	; 0x03
 248:	9c 83       	std	Y+4, r25	; 0x04
	long double twosqrt2 = 2.0 * sqrt(2.0);
	long double subtermx = 2.0 + u2 - v2;
 24a:	20 e0       	ldi	r18, 0x00	; 0
 24c:	30 e0       	ldi	r19, 0x00	; 0
 24e:	40 e0       	ldi	r20, 0x00	; 0
 250:	50 e4       	ldi	r21, 0x40	; 64
 252:	c7 01       	movw	r24, r14
 254:	b6 01       	movw	r22, r12
 256:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__addsf3>
 25a:	29 81       	ldd	r18, Y+1	; 0x01
 25c:	3a 81       	ldd	r19, Y+2	; 0x02
 25e:	4b 81       	ldd	r20, Y+3	; 0x03
 260:	5c 81       	ldd	r21, Y+4	; 0x04
 262:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <__subsf3>
 266:	6d 83       	std	Y+5, r22	; 0x05
 268:	7e 83       	std	Y+6, r23	; 0x06
 26a:	8f 83       	std	Y+7, r24	; 0x07
 26c:	98 87       	std	Y+8, r25	; 0x08
	long double subtermy = 2.0 - u2 + v2;
 26e:	a7 01       	movw	r20, r14
 270:	96 01       	movw	r18, r12
 272:	60 e0       	ldi	r22, 0x00	; 0
 274:	70 e0       	ldi	r23, 0x00	; 0
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	90 e4       	ldi	r25, 0x40	; 64
 27a:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <__subsf3>
 27e:	29 81       	ldd	r18, Y+1	; 0x01
 280:	3a 81       	ldd	r19, Y+2	; 0x02
 282:	4b 81       	ldd	r20, Y+3	; 0x03
 284:	5c 81       	ldd	r21, Y+4	; 0x04
 286:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__addsf3>
 28a:	6b 01       	movw	r12, r22
 28c:	7c 01       	movw	r14, r24
	long double termx1 = subtermx + u * twosqrt2;
 28e:	23 ef       	ldi	r18, 0xF3	; 243
 290:	34 e0       	ldi	r19, 0x04	; 4
 292:	45 e3       	ldi	r20, 0x35	; 53
 294:	50 e4       	ldi	r21, 0x40	; 64
 296:	c5 01       	movw	r24, r10
 298:	b4 01       	movw	r22, r8
 29a:	0e 94 c3 05 	call	0xb86	; 0xb86 <__mulsf3>
 29e:	4b 01       	movw	r8, r22
 2a0:	5c 01       	movw	r10, r24
	long double termx2 = subtermx - u * twosqrt2;
	long double termy1 = subtermy + v * twosqrt2;
 2a2:	23 ef       	ldi	r18, 0xF3	; 243
 2a4:	34 e0       	ldi	r19, 0x04	; 4
 2a6:	45 e3       	ldi	r20, 0x35	; 53
 2a8:	50 e4       	ldi	r21, 0x40	; 64
 2aa:	c3 01       	movw	r24, r6
 2ac:	b2 01       	movw	r22, r4
 2ae:	0e 94 c3 05 	call	0xb86	; 0xb86 <__mulsf3>
 2b2:	69 83       	std	Y+1, r22	; 0x01
 2b4:	7a 83       	std	Y+2, r23	; 0x02
 2b6:	8b 83       	std	Y+3, r24	; 0x03
 2b8:	9c 83       	std	Y+4, r25	; 0x04
	long double termy2 = subtermy - v * twosqrt2;
	x = 0.5 * sqrt(termx1) - 0.5 * sqrt(termx2);
 2ba:	a5 01       	movw	r20, r10
 2bc:	94 01       	movw	r18, r8
 2be:	6d 81       	ldd	r22, Y+5	; 0x05
 2c0:	7e 81       	ldd	r23, Y+6	; 0x06
 2c2:	8f 81       	ldd	r24, Y+7	; 0x07
 2c4:	98 85       	ldd	r25, Y+8	; 0x08
 2c6:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__addsf3>
 2ca:	0e 94 36 06 	call	0xc6c	; 0xc6c <sqrt>
 2ce:	69 87       	std	Y+9, r22	; 0x09
 2d0:	7a 87       	std	Y+10, r23	; 0x0a
 2d2:	8b 87       	std	Y+11, r24	; 0x0b
 2d4:	9c 87       	std	Y+12, r25	; 0x0c
 2d6:	a5 01       	movw	r20, r10
 2d8:	94 01       	movw	r18, r8
 2da:	6d 81       	ldd	r22, Y+5	; 0x05
 2dc:	7e 81       	ldd	r23, Y+6	; 0x06
 2de:	8f 81       	ldd	r24, Y+7	; 0x07
 2e0:	98 85       	ldd	r25, Y+8	; 0x08
 2e2:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <__subsf3>
 2e6:	0e 94 36 06 	call	0xc6c	; 0xc6c <sqrt>
 2ea:	2b 01       	movw	r4, r22
 2ec:	3c 01       	movw	r6, r24
 2ee:	20 e0       	ldi	r18, 0x00	; 0
 2f0:	30 e0       	ldi	r19, 0x00	; 0
 2f2:	40 e0       	ldi	r20, 0x00	; 0
 2f4:	5f e3       	ldi	r21, 0x3F	; 63
 2f6:	69 85       	ldd	r22, Y+9	; 0x09
 2f8:	7a 85       	ldd	r23, Y+10	; 0x0a
 2fa:	8b 85       	ldd	r24, Y+11	; 0x0b
 2fc:	9c 85       	ldd	r25, Y+12	; 0x0c
 2fe:	0e 94 c3 05 	call	0xb86	; 0xb86 <__mulsf3>
 302:	4b 01       	movw	r8, r22
 304:	5c 01       	movw	r10, r24
 306:	20 e0       	ldi	r18, 0x00	; 0
 308:	30 e0       	ldi	r19, 0x00	; 0
 30a:	40 e0       	ldi	r20, 0x00	; 0
 30c:	5f e3       	ldi	r21, 0x3F	; 63
 30e:	c3 01       	movw	r24, r6
 310:	b2 01       	movw	r22, r4
 312:	0e 94 c3 05 	call	0xb86	; 0xb86 <__mulsf3>
 316:	9b 01       	movw	r18, r22
 318:	ac 01       	movw	r20, r24
 31a:	c5 01       	movw	r24, r10
 31c:	b4 01       	movw	r22, r8
 31e:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <__subsf3>
 322:	f8 01       	movw	r30, r16
 324:	60 83       	st	Z, r22
 326:	71 83       	std	Z+1, r23	; 0x01
 328:	82 83       	std	Z+2, r24	; 0x02
 32a:	93 83       	std	Z+3, r25	; 0x03
	y = 0.5 * sqrt(termy1) - 0.5 * sqrt(termy2);
 32c:	29 81       	ldd	r18, Y+1	; 0x01
 32e:	3a 81       	ldd	r19, Y+2	; 0x02
 330:	4b 81       	ldd	r20, Y+3	; 0x03
 332:	5c 81       	ldd	r21, Y+4	; 0x04
 334:	c7 01       	movw	r24, r14
 336:	b6 01       	movw	r22, r12
 338:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__addsf3>
 33c:	0e 94 36 06 	call	0xc6c	; 0xc6c <sqrt>
 340:	4b 01       	movw	r8, r22
 342:	5c 01       	movw	r10, r24
 344:	29 81       	ldd	r18, Y+1	; 0x01
 346:	3a 81       	ldd	r19, Y+2	; 0x02
 348:	4b 81       	ldd	r20, Y+3	; 0x03
 34a:	5c 81       	ldd	r21, Y+4	; 0x04
 34c:	c7 01       	movw	r24, r14
 34e:	b6 01       	movw	r22, r12
 350:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <__subsf3>
 354:	0e 94 36 06 	call	0xc6c	; 0xc6c <sqrt>
 358:	2b 01       	movw	r4, r22
 35a:	3c 01       	movw	r6, r24
 35c:	20 e0       	ldi	r18, 0x00	; 0
 35e:	30 e0       	ldi	r19, 0x00	; 0
 360:	40 e0       	ldi	r20, 0x00	; 0
 362:	5f e3       	ldi	r21, 0x3F	; 63
 364:	c5 01       	movw	r24, r10
 366:	b4 01       	movw	r22, r8
 368:	0e 94 c3 05 	call	0xb86	; 0xb86 <__mulsf3>
 36c:	6b 01       	movw	r12, r22
 36e:	7c 01       	movw	r14, r24
 370:	20 e0       	ldi	r18, 0x00	; 0
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	40 e0       	ldi	r20, 0x00	; 0
 376:	5f e3       	ldi	r21, 0x3F	; 63
 378:	c3 01       	movw	r24, r6
 37a:	b2 01       	movw	r22, r4
 37c:	0e 94 c3 05 	call	0xb86	; 0xb86 <__mulsf3>
 380:	9b 01       	movw	r18, r22
 382:	ac 01       	movw	r20, r24
 384:	c7 01       	movw	r24, r14
 386:	b6 01       	movw	r22, r12
 388:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <__subsf3>
 38c:	ed 85       	ldd	r30, Y+13	; 0x0d
 38e:	fe 85       	ldd	r31, Y+14	; 0x0e
 390:	60 83       	st	Z, r22
 392:	71 83       	std	Z+1, r23	; 0x01
 394:	82 83       	std	Z+2, r24	; 0x02
 396:	93 83       	std	Z+3, r25	; 0x03

}
 398:	2e 96       	adiw	r28, 0x0e	; 14
 39a:	0f b6       	in	r0, 0x3f	; 63
 39c:	f8 94       	cli
 39e:	de bf       	out	0x3e, r29	; 62
 3a0:	0f be       	out	0x3f, r0	; 63
 3a2:	cd bf       	out	0x3d, r28	; 61
 3a4:	df 91       	pop	r29
 3a6:	cf 91       	pop	r28
 3a8:	1f 91       	pop	r17
 3aa:	0f 91       	pop	r16
 3ac:	ff 90       	pop	r15
 3ae:	ef 90       	pop	r14
 3b0:	df 90       	pop	r13
 3b2:	cf 90       	pop	r12
 3b4:	bf 90       	pop	r11
 3b6:	af 90       	pop	r10
 3b8:	9f 90       	pop	r9
 3ba:	8f 90       	pop	r8
 3bc:	7f 90       	pop	r7
 3be:	6f 90       	pop	r6
 3c0:	5f 90       	pop	r5
 3c2:	4f 90       	pop	r4
 3c4:	08 95       	ret

000003c6 <main>:
int main (void)
{
 3c6:	cf 93       	push	r28
 3c8:	df 93       	push	r29
 3ca:	cd b7       	in	r28, 0x3d	; 61
 3cc:	de b7       	in	r29, 0x3e	; 62
 3ce:	2a 97       	sbiw	r28, 0x0a	; 10
 3d0:	0f b6       	in	r0, 0x3f	; 63
 3d2:	f8 94       	cli
 3d4:	de bf       	out	0x3e, r29	; 62
 3d6:	0f be       	out	0x3f, r0	; 63
 3d8:	cd bf       	out	0x3d, r28	; 61
	TCCR0 |= 1<<WGM00 | 1<< WGM01  | 1<< COM01 |1 <<CS00;
 3da:	83 b7       	in	r24, 0x33	; 51
 3dc:	89 66       	ori	r24, 0x69	; 105
 3de:	83 bf       	out	0x33, r24	; 51
	DDRB |= 1<< PB3 | 1<<PINB0 | 1<<PINB1;
 3e0:	87 b3       	in	r24, 0x17	; 23
 3e2:	8b 60       	ori	r24, 0x0B	; 11
 3e4:	87 bb       	out	0x17, r24	; 23
	TCCR2 |= 1<<WGM20 | 1<< WGM21 | 1<< COM21 |1 <<CS20;
 3e6:	85 b5       	in	r24, 0x25	; 37
 3e8:	89 66       	ori	r24, 0x69	; 105
 3ea:	85 bd       	out	0x25, r24	; 37
	DDRD |= 1<< PB7 | 1<< PB2;
 3ec:	81 b3       	in	r24, 0x11	; 17
 3ee:	84 68       	ori	r24, 0x84	; 132
 3f0:	81 bb       	out	0x11, r24	; 17
	PORTB &= ~(1<< PINB0);
 3f2:	c0 98       	cbi	0x18, 0	; 24
	PORTD &= ~(1<< PIND6);
 3f4:	96 98       	cbi	0x12, 6	; 18
	UCSRA = (1 << U2X);
 3f6:	82 e0       	ldi	r24, 0x02	; 2
 3f8:	8b b9       	out	0x0b, r24	; 11
	UBRRH = (unsigned char) (ubbr_value >> 8);
 3fa:	10 bc       	out	0x20, r1	; 32
	UBRRL = (unsigned char) ubbr_value;
 3fc:	8f ef       	ldi	r24, 0xFF	; 255
 3fe:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1 << RXEN);
 400:	80 e1       	ldi	r24, 0x10	; 16
 402:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL) | (3 << UCSZ0);
 404:	86 e8       	ldi	r24, 0x86	; 134
 406:	80 bd       	out	0x20, r24	; 32
	while (1)
	{

		double x2,y2;
		if(Receive()==0x11)
 408:	0e 94 36 00 	call	0x6c	; 0x6c <_Z7Receivev>
 40c:	41 97       	sbiw	r24, 0x11	; 17
 40e:	09 f0       	breq	.+2      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 410:	48 c0       	rjmp	.+144    	; 0x4a2 <__stack+0x43>
		{
			int x1= Receive();
 412:	0e 94 36 00 	call	0x6c	; 0x6c <_Z7Receivev>
 416:	7c 01       	movw	r14, r24
			x2 = (Receive())<<8 | x1;
 418:	0e 94 36 00 	call	0x6c	; 0x6c <_Z7Receivev>
 41c:	d8 2e       	mov	r13, r24
			OCR2=0;
			PORTD&=~1<<PD6;
			PORTB&=~(1<<PB0);
			continue;
		}
		if(Receive()==0x21)
 41e:	0e 94 36 00 	call	0x6c	; 0x6c <_Z7Receivev>
 422:	81 97       	sbiw	r24, 0x21	; 33
 424:	f1 f5       	brne	.+124    	; 0x4a2 <__stack+0x43>
		{
			int y1=Receive();
 426:	0e 94 36 00 	call	0x6c	; 0x6c <_Z7Receivev>
 42a:	3c 01       	movw	r6, r24
			y2=(Receive())<<8 | y1;
 42c:	0e 94 36 00 	call	0x6c	; 0x6c <_Z7Receivev>
 430:	58 2e       	mov	r5, r24
			OCR2=0;
			PORTD&=~1<<PD6;
			PORTB&=~(1<<PB0);
			continue;
		}
		long double x1 = x2 - 512;
 432:	3d 2c       	mov	r3, r13
 434:	21 2c       	mov	r2, r1
 436:	b1 01       	movw	r22, r2
 438:	6e 29       	or	r22, r14
 43a:	7f 29       	or	r23, r15
 43c:	07 2e       	mov	r0, r23
 43e:	00 0c       	add	r0, r0
 440:	88 0b       	sbc	r24, r24
 442:	99 0b       	sbc	r25, r25
 444:	0e 94 0e 05 	call	0xa1c	; 0xa1c <__floatsisf>
 448:	20 e0       	ldi	r18, 0x00	; 0
 44a:	30 e0       	ldi	r19, 0x00	; 0
 44c:	40 e0       	ldi	r20, 0x00	; 0
 44e:	54 e4       	ldi	r21, 0x44	; 68
 450:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <__subsf3>
 454:	6b 01       	movw	r12, r22
 456:	7c 01       	movw	r14, r24
		long double y1 = 512 - y2;
 458:	5a 86       	std	Y+10, r5	; 0x0a
 45a:	19 86       	std	Y+9, r1	; 0x09
 45c:	69 85       	ldd	r22, Y+9	; 0x09
 45e:	7a 85       	ldd	r23, Y+10	; 0x0a
 460:	66 29       	or	r22, r6
 462:	77 29       	or	r23, r7
 464:	07 2e       	mov	r0, r23
 466:	00 0c       	add	r0, r0
 468:	88 0b       	sbc	r24, r24
 46a:	99 0b       	sbc	r25, r25
 46c:	0e 94 0e 05 	call	0xa1c	; 0xa1c <__floatsisf>
 470:	9b 01       	movw	r18, r22
 472:	ac 01       	movw	r20, r24
 474:	60 e0       	ldi	r22, 0x00	; 0
 476:	70 e0       	ldi	r23, 0x00	; 0
 478:	80 e0       	ldi	r24, 0x00	; 0
 47a:	94 e4       	ldi	r25, 0x44	; 68
 47c:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <__subsf3>
 480:	2b 01       	movw	r4, r22
 482:	3c 01       	movw	r6, r24
		if(y1/x1>=12.8&&y1/x1<=-12.8)
 484:	a7 01       	movw	r20, r14
 486:	96 01       	movw	r18, r12
 488:	0e 94 64 04 	call	0x8c8	; 0x8c8 <__divsf3>
 48c:	4b 01       	movw	r8, r22
 48e:	5c 01       	movw	r10, r24
 490:	2d ec       	ldi	r18, 0xCD	; 205
 492:	3c ec       	ldi	r19, 0xCC	; 204
 494:	4c e4       	ldi	r20, 0x4C	; 76
 496:	51 e4       	ldi	r21, 0x41	; 65
 498:	0e 94 be 05 	call	0xb7c	; 0xb7c <__gesf2>
 49c:	87 ff       	sbrs	r24, 7
 49e:	08 c0       	rjmp	.+16     	; 0x4b0 <__stack+0x51>
 4a0:	14 c0       	rjmp	.+40     	; 0x4ca <__stack+0x6b>
			int y1=Receive();
			y2=(Receive())<<8 | y1;
		}
		else
		{
			OCR0=0;
 4a2:	1c be       	out	0x3c, r1	; 60
			OCR2=0;
 4a4:	13 bc       	out	0x23, r1	; 35
			PORTD&=~1<<PD6;
 4a6:	82 b3       	in	r24, 0x12	; 18
 4a8:	80 78       	andi	r24, 0x80	; 128
 4aa:	82 bb       	out	0x12, r24	; 18
			PORTB&=~(1<<PB0);
 4ac:	c0 98       	cbi	0x18, 0	; 24
			continue;
 4ae:	ac cf       	rjmp	.-168    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
		}
		long double x1 = x2 - 512;
		long double y1 = 512 - y2;
		if(y1/x1>=12.8&&y1/x1<=-12.8)
 4b0:	2d ec       	ldi	r18, 0xCD	; 205
 4b2:	3c ec       	ldi	r19, 0xCC	; 204
 4b4:	4c e4       	ldi	r20, 0x4C	; 76
 4b6:	51 ec       	ldi	r21, 0xC1	; 193
 4b8:	c5 01       	movw	r24, r10
 4ba:	b4 01       	movw	r22, r8
 4bc:	0e 94 5f 04 	call	0x8be	; 0x8be <__cmpsf2>
 4c0:	18 16       	cp	r1, r24
 4c2:	1c f0       	brlt	.+6      	; 0x4ca <__stack+0x6b>
		x1=0;
 4c4:	c1 2c       	mov	r12, r1
 4c6:	d1 2c       	mov	r13, r1
 4c8:	76 01       	movw	r14, r12
		if(y1/x1<=0.390625&&y1/x1>=-0.390625)
 4ca:	a7 01       	movw	r20, r14
 4cc:	96 01       	movw	r18, r12
 4ce:	c3 01       	movw	r24, r6
 4d0:	b2 01       	movw	r22, r4
 4d2:	0e 94 64 04 	call	0x8c8	; 0x8c8 <__divsf3>
 4d6:	4b 01       	movw	r8, r22
 4d8:	5c 01       	movw	r10, r24
 4da:	20 e0       	ldi	r18, 0x00	; 0
 4dc:	30 e0       	ldi	r19, 0x00	; 0
 4de:	48 ec       	ldi	r20, 0xC8	; 200
 4e0:	5e e3       	ldi	r21, 0x3E	; 62
 4e2:	0e 94 5f 04 	call	0x8be	; 0x8be <__cmpsf2>
 4e6:	18 16       	cp	r1, r24
 4e8:	6c f0       	brlt	.+26     	; 0x504 <__stack+0xa5>
 4ea:	20 e0       	ldi	r18, 0x00	; 0
 4ec:	30 e0       	ldi	r19, 0x00	; 0
 4ee:	48 ec       	ldi	r20, 0xC8	; 200
 4f0:	5e eb       	ldi	r21, 0xBE	; 190
 4f2:	c5 01       	movw	r24, r10
 4f4:	b4 01       	movw	r22, r8
 4f6:	0e 94 be 05 	call	0xb7c	; 0xb7c <__gesf2>
 4fa:	87 fd       	sbrc	r24, 7
 4fc:	03 c0       	rjmp	.+6      	; 0x504 <__stack+0xa5>
		y1=0;
 4fe:	41 2c       	mov	r4, r1
 500:	51 2c       	mov	r5, r1
 502:	32 01       	movw	r6, r4
		x1=map(x1,-512,512,-1,1);
		y1=map(y1,-512,512,-1,1);
		long double xans,yans;
		ellipticalSquareToDisc(x1, y1, xans, yans);
 504:	20 e0       	ldi	r18, 0x00	; 0
 506:	30 e0       	ldi	r19, 0x00	; 0
 508:	40 e0       	ldi	r20, 0x00	; 0
 50a:	54 e4       	ldi	r21, 0x44	; 68
 50c:	c3 01       	movw	r24, r6
 50e:	b2 01       	movw	r22, r4
 510:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__addsf3>
 514:	9b 01       	movw	r18, r22
 516:	ac 01       	movw	r20, r24
 518:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__addsf3>
 51c:	20 e0       	ldi	r18, 0x00	; 0
 51e:	30 e0       	ldi	r19, 0x00	; 0
 520:	40 e8       	ldi	r20, 0x80	; 128
 522:	5a e3       	ldi	r21, 0x3A	; 58
 524:	0e 94 c3 05 	call	0xb86	; 0xb86 <__mulsf3>
 528:	20 e0       	ldi	r18, 0x00	; 0
 52a:	30 e0       	ldi	r19, 0x00	; 0
 52c:	40 e8       	ldi	r20, 0x80	; 128
 52e:	5f e3       	ldi	r21, 0x3F	; 63
 530:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <__subsf3>
 534:	2b 01       	movw	r4, r22
 536:	3c 01       	movw	r6, r24
 538:	20 e0       	ldi	r18, 0x00	; 0
 53a:	30 e0       	ldi	r19, 0x00	; 0
 53c:	40 e0       	ldi	r20, 0x00	; 0
 53e:	54 e4       	ldi	r21, 0x44	; 68
 540:	c7 01       	movw	r24, r14
 542:	b6 01       	movw	r22, r12
 544:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__addsf3>
 548:	9b 01       	movw	r18, r22
 54a:	ac 01       	movw	r20, r24
 54c:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__addsf3>
 550:	20 e0       	ldi	r18, 0x00	; 0
 552:	30 e0       	ldi	r19, 0x00	; 0
 554:	40 e8       	ldi	r20, 0x80	; 128
 556:	5a e3       	ldi	r21, 0x3A	; 58
 558:	0e 94 c3 05 	call	0xb86	; 0xb86 <__mulsf3>
 55c:	20 e0       	ldi	r18, 0x00	; 0
 55e:	30 e0       	ldi	r19, 0x00	; 0
 560:	40 e8       	ldi	r20, 0x80	; 128
 562:	5f e3       	ldi	r21, 0x3F	; 63
 564:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <__subsf3>
 568:	9e 01       	movw	r18, r28
 56a:	2f 5f       	subi	r18, 0xFF	; 255
 56c:	3f 4f       	sbci	r19, 0xFF	; 255
 56e:	79 01       	movw	r14, r18
 570:	8e 01       	movw	r16, r28
 572:	0b 5f       	subi	r16, 0xFB	; 251
 574:	1f 4f       	sbci	r17, 0xFF	; 255
 576:	a3 01       	movw	r20, r6
 578:	92 01       	movw	r18, r4
 57a:	0e 94 9c 00 	call	0x138	; 0x138 <_Z22ellipticalSquareToDisceeReS_>
		long double x = (xans * 0.707) + (yans * 0.707);
 57e:	8d 80       	ldd	r8, Y+5	; 0x05
 580:	9e 80       	ldd	r9, Y+6	; 0x06
 582:	af 80       	ldd	r10, Y+7	; 0x07
 584:	b8 84       	ldd	r11, Y+8	; 0x08
 586:	24 ef       	ldi	r18, 0xF4	; 244
 588:	3d ef       	ldi	r19, 0xFD	; 253
 58a:	44 e3       	ldi	r20, 0x34	; 52
 58c:	5f e3       	ldi	r21, 0x3F	; 63
 58e:	69 81       	ldd	r22, Y+1	; 0x01
 590:	7a 81       	ldd	r23, Y+2	; 0x02
 592:	8b 81       	ldd	r24, Y+3	; 0x03
 594:	9c 81       	ldd	r25, Y+4	; 0x04
 596:	0e 94 c3 05 	call	0xb86	; 0xb86 <__mulsf3>
 59a:	6b 01       	movw	r12, r22
 59c:	7c 01       	movw	r14, r24
		long double y = (-xans * 0.707) + (yans * 0.707);
		ellipticalDiscToSquare(x,y,xans,yans);
 59e:	c5 01       	movw	r24, r10
 5a0:	b4 01       	movw	r22, r8
 5a2:	90 58       	subi	r25, 0x80	; 128
 5a4:	24 ef       	ldi	r18, 0xF4	; 244
 5a6:	3d ef       	ldi	r19, 0xFD	; 253
 5a8:	44 e3       	ldi	r20, 0x34	; 52
 5aa:	5f e3       	ldi	r21, 0x3F	; 63
 5ac:	0e 94 c3 05 	call	0xb86	; 0xb86 <__mulsf3>
 5b0:	a7 01       	movw	r20, r14
 5b2:	96 01       	movw	r18, r12
 5b4:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__addsf3>
 5b8:	2b 01       	movw	r4, r22
 5ba:	3c 01       	movw	r6, r24
 5bc:	24 ef       	ldi	r18, 0xF4	; 244
 5be:	3d ef       	ldi	r19, 0xFD	; 253
 5c0:	44 e3       	ldi	r20, 0x34	; 52
 5c2:	5f e3       	ldi	r21, 0x3F	; 63
 5c4:	c5 01       	movw	r24, r10
 5c6:	b4 01       	movw	r22, r8
 5c8:	0e 94 c3 05 	call	0xb86	; 0xb86 <__mulsf3>
 5cc:	a7 01       	movw	r20, r14
 5ce:	96 01       	movw	r18, r12
 5d0:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__addsf3>
 5d4:	9e 01       	movw	r18, r28
 5d6:	2f 5f       	subi	r18, 0xFF	; 255
 5d8:	3f 4f       	sbci	r19, 0xFF	; 255
 5da:	79 01       	movw	r14, r18
 5dc:	a3 01       	movw	r20, r6
 5de:	92 01       	movw	r18, r4
 5e0:	0e 94 f7 00 	call	0x1ee	; 0x1ee <_Z22ellipticalDiscToSquareeeReS_>

}

long double map(long double x, long double in_min, long double in_max, long double out_min, long double out_max)
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 5e4:	21 e1       	ldi	r18, 0x11	; 17
 5e6:	34 ec       	ldi	r19, 0xC4	; 196
 5e8:	4d e7       	ldi	r20, 0x7D	; 125
 5ea:	5f e3       	ldi	r21, 0x3F	; 63
 5ec:	6d 81       	ldd	r22, Y+5	; 0x05
 5ee:	7e 81       	ldd	r23, Y+6	; 0x06
 5f0:	8f 81       	ldd	r24, Y+7	; 0x07
 5f2:	98 85       	ldd	r25, Y+8	; 0x08
 5f4:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__addsf3>
 5f8:	20 e0       	ldi	r18, 0x00	; 0
 5fa:	30 e0       	ldi	r19, 0x00	; 0
 5fc:	4f ef       	ldi	r20, 0xFF	; 255
 5fe:	53 e4       	ldi	r21, 0x43	; 67
 600:	0e 94 c3 05 	call	0xb86	; 0xb86 <__mulsf3>
 604:	21 e1       	ldi	r18, 0x11	; 17
 606:	34 ec       	ldi	r19, 0xC4	; 196
 608:	4d ef       	ldi	r20, 0xFD	; 253
 60a:	5f e3       	ldi	r21, 0x3F	; 63
 60c:	0e 94 64 04 	call	0x8c8	; 0x8c8 <__divsf3>
 610:	20 e0       	ldi	r18, 0x00	; 0
 612:	30 e0       	ldi	r19, 0x00	; 0
 614:	4f e7       	ldi	r20, 0x7F	; 127
 616:	53 e4       	ldi	r21, 0x43	; 67
 618:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <__subsf3>
 61c:	2b 01       	movw	r4, r22
 61e:	3c 01       	movw	r6, r24
 620:	21 e1       	ldi	r18, 0x11	; 17
 622:	34 ec       	ldi	r19, 0xC4	; 196
 624:	4d e7       	ldi	r20, 0x7D	; 125
 626:	5f e3       	ldi	r21, 0x3F	; 63
 628:	69 81       	ldd	r22, Y+1	; 0x01
 62a:	7a 81       	ldd	r23, Y+2	; 0x02
 62c:	8b 81       	ldd	r24, Y+3	; 0x03
 62e:	9c 81       	ldd	r25, Y+4	; 0x04
 630:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__addsf3>
 634:	20 e0       	ldi	r18, 0x00	; 0
 636:	30 e0       	ldi	r19, 0x00	; 0
 638:	4f ef       	ldi	r20, 0xFF	; 255
 63a:	53 e4       	ldi	r21, 0x43	; 67
 63c:	0e 94 c3 05 	call	0xb86	; 0xb86 <__mulsf3>
 640:	21 e1       	ldi	r18, 0x11	; 17
 642:	34 ec       	ldi	r19, 0xC4	; 196
 644:	4d ef       	ldi	r20, 0xFD	; 253
 646:	5f e3       	ldi	r21, 0x3F	; 63
 648:	0e 94 64 04 	call	0x8c8	; 0x8c8 <__divsf3>
 64c:	20 e0       	ldi	r18, 0x00	; 0
 64e:	30 e0       	ldi	r19, 0x00	; 0
 650:	4f e7       	ldi	r20, 0x7F	; 127
 652:	53 e4       	ldi	r21, 0x43	; 67
 654:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <__subsf3>
 658:	6b 01       	movw	r12, r22
 65a:	7c 01       	movw	r14, r24
		long double x = (xans * 0.707) + (yans * 0.707);
		long double y = (-xans * 0.707) + (yans * 0.707);
		ellipticalDiscToSquare(x,y,xans,yans);
		long double x3=map(xans,-0.991273,0.991273,-255,255);
		long double y3=map(yans,-0.991273,0.991273,-255,255);
		if(x3>255)
 65c:	20 e0       	ldi	r18, 0x00	; 0
 65e:	30 e0       	ldi	r19, 0x00	; 0
 660:	4f e7       	ldi	r20, 0x7F	; 127
 662:	53 e4       	ldi	r21, 0x43	; 67
 664:	c3 01       	movw	r24, r6
 666:	b2 01       	movw	r22, r4
 668:	0e 94 be 05 	call	0xb7c	; 0xb7c <__gesf2>
		x3=255;
		if(y3>255)
 66c:	20 e0       	ldi	r18, 0x00	; 0
 66e:	30 e0       	ldi	r19, 0x00	; 0
 670:	4f e7       	ldi	r20, 0x7F	; 127
 672:	53 e4       	ldi	r21, 0x43	; 67
		long double x = (xans * 0.707) + (yans * 0.707);
		long double y = (-xans * 0.707) + (yans * 0.707);
		ellipticalDiscToSquare(x,y,xans,yans);
		long double x3=map(xans,-0.991273,0.991273,-255,255);
		long double y3=map(yans,-0.991273,0.991273,-255,255);
		if(x3>255)
 674:	18 16       	cp	r1, r24
 676:	9c f1       	brlt	.+102    	; 0x6de <__stack+0x27f>
		x3=255;
		if(y3>255)
 678:	c7 01       	movw	r24, r14
 67a:	b6 01       	movw	r22, r12
 67c:	0e 94 be 05 	call	0xb7c	; 0xb7c <__gesf2>
 680:	18 16       	cp	r1, r24
 682:	0c f4       	brge	.+2      	; 0x686 <__stack+0x227>
 684:	85 c0       	rjmp	.+266    	; 0x790 <__stack+0x331>
		y3=255;
		if(x3<20&&x3>-20)
 686:	20 e0       	ldi	r18, 0x00	; 0
 688:	30 e0       	ldi	r19, 0x00	; 0
 68a:	40 ea       	ldi	r20, 0xA0	; 160
 68c:	51 e4       	ldi	r21, 0x41	; 65
 68e:	c3 01       	movw	r24, r6
 690:	b2 01       	movw	r22, r4
 692:	0e 94 5f 04 	call	0x8be	; 0x8be <__cmpsf2>
 696:	87 ff       	sbrs	r24, 7
 698:	0a c0       	rjmp	.+20     	; 0x6ae <__stack+0x24f>
 69a:	20 e0       	ldi	r18, 0x00	; 0
 69c:	30 e0       	ldi	r19, 0x00	; 0
 69e:	40 ea       	ldi	r20, 0xA0	; 160
 6a0:	51 ec       	ldi	r21, 0xC1	; 193
 6a2:	c3 01       	movw	r24, r6
 6a4:	b2 01       	movw	r22, r4
 6a6:	0e 94 be 05 	call	0xb7c	; 0xb7c <__gesf2>
 6aa:	18 16       	cp	r1, r24
 6ac:	b4 f1       	brlt	.+108    	; 0x71a <__stack+0x2bb>
		x3=0;

		if(y3<20&&y3>-20)
 6ae:	20 e0       	ldi	r18, 0x00	; 0
 6b0:	30 e0       	ldi	r19, 0x00	; 0
 6b2:	40 ea       	ldi	r20, 0xA0	; 160
 6b4:	51 e4       	ldi	r21, 0x41	; 65
 6b6:	c7 01       	movw	r24, r14
 6b8:	b6 01       	movw	r22, r12
 6ba:	0e 94 5f 04 	call	0x8be	; 0x8be <__cmpsf2>
 6be:	87 ff       	sbrs	r24, 7
 6c0:	1c c0       	rjmp	.+56     	; 0x6fa <__stack+0x29b>
 6c2:	20 e0       	ldi	r18, 0x00	; 0
 6c4:	30 e0       	ldi	r19, 0x00	; 0
 6c6:	40 ea       	ldi	r20, 0xA0	; 160
 6c8:	51 ec       	ldi	r21, 0xC1	; 193
 6ca:	c7 01       	movw	r24, r14
 6cc:	b6 01       	movw	r22, r12
 6ce:	0e 94 be 05 	call	0xb7c	; 0xb7c <__gesf2>
 6d2:	18 16       	cp	r1, r24
 6d4:	94 f4       	brge	.+36     	; 0x6fa <__stack+0x29b>
		y3=0;
 6d6:	c1 2c       	mov	r12, r1
 6d8:	d1 2c       	mov	r13, r1
 6da:	76 01       	movw	r14, r12
 6dc:	0e c0       	rjmp	.+28     	; 0x6fa <__stack+0x29b>
		ellipticalDiscToSquare(x,y,xans,yans);
		long double x3=map(xans,-0.991273,0.991273,-255,255);
		long double y3=map(yans,-0.991273,0.991273,-255,255);
		if(x3>255)
		x3=255;
		if(y3>255)
 6de:	c7 01       	movw	r24, r14
 6e0:	b6 01       	movw	r22, r12
 6e2:	0e 94 be 05 	call	0xb7c	; 0xb7c <__gesf2>
		long double y = (-xans * 0.707) + (yans * 0.707);
		ellipticalDiscToSquare(x,y,xans,yans);
		long double x3=map(xans,-0.991273,0.991273,-255,255);
		long double y3=map(yans,-0.991273,0.991273,-255,255);
		if(x3>255)
		x3=255;
 6e6:	41 2c       	mov	r4, r1
 6e8:	51 2c       	mov	r5, r1
 6ea:	2f e7       	ldi	r18, 0x7F	; 127
 6ec:	62 2e       	mov	r6, r18
 6ee:	23 e4       	ldi	r18, 0x43	; 67
 6f0:	72 2e       	mov	r7, r18
		if(y3>255)
 6f2:	18 16       	cp	r1, r24
 6f4:	44 f6       	brge	.-112    	; 0x686 <__stack+0x227>
		y3=255;
 6f6:	73 01       	movw	r14, r6
 6f8:	62 01       	movw	r12, r4
		if(x3<20&&x3>-20)
		x3=0;

		if(y3<20&&y3>-20)
		y3=0;
		if(x3>0)
 6fa:	20 e0       	ldi	r18, 0x00	; 0
 6fc:	30 e0       	ldi	r19, 0x00	; 0
 6fe:	a9 01       	movw	r20, r18
 700:	c3 01       	movw	r24, r6
 702:	b2 01       	movw	r22, r4
 704:	0e 94 be 05 	call	0xb7c	; 0xb7c <__gesf2>
 708:	18 16       	cp	r1, r24
 70a:	0c f5       	brge	.+66     	; 0x74e <__stack+0x2ef>
		{
			OCR0=(int)x3;
 70c:	c3 01       	movw	r24, r6
 70e:	b2 01       	movw	r22, r4
 710:	0e 94 d6 04 	call	0x9ac	; 0x9ac <__fixsfsi>
 714:	6c bf       	out	0x3c, r22	; 60
			PORTB|=1<<PB0;
 716:	c0 9a       	sbi	0x18, 0	; 24
 718:	21 c0       	rjmp	.+66     	; 0x75c <__stack+0x2fd>
		if(y3>255)
		y3=255;
		if(x3<20&&x3>-20)
		x3=0;

		if(y3<20&&y3>-20)
 71a:	20 e0       	ldi	r18, 0x00	; 0
 71c:	30 e0       	ldi	r19, 0x00	; 0
 71e:	40 ea       	ldi	r20, 0xA0	; 160
 720:	51 e4       	ldi	r21, 0x41	; 65
 722:	c7 01       	movw	r24, r14
 724:	b6 01       	movw	r22, r12
 726:	0e 94 5f 04 	call	0x8be	; 0x8be <__cmpsf2>
 72a:	87 ff       	sbrs	r24, 7
 72c:	53 c0       	rjmp	.+166    	; 0x7d4 <__stack+0x375>
 72e:	20 e0       	ldi	r18, 0x00	; 0
 730:	30 e0       	ldi	r19, 0x00	; 0
 732:	40 ea       	ldi	r20, 0xA0	; 160
 734:	51 ec       	ldi	r21, 0xC1	; 193
 736:	c7 01       	movw	r24, r14
 738:	b6 01       	movw	r22, r12
 73a:	0e 94 be 05 	call	0xb7c	; 0xb7c <__gesf2>
 73e:	18 16       	cp	r1, r24
 740:	0c f0       	brlt	.+2      	; 0x744 <__stack+0x2e5>
 742:	4c c0       	rjmp	.+152    	; 0x7dc <__stack+0x37d>
		y3=0;
 744:	c1 2c       	mov	r12, r1
 746:	d1 2c       	mov	r13, r1
 748:	76 01       	movw	r14, r12
		if(x3>255)
		x3=255;
		if(y3>255)
		y3=255;
		if(x3<20&&x3>-20)
		x3=0;
 74a:	26 01       	movw	r4, r12
 74c:	37 01       	movw	r6, r14
			OCR0=(int)x3;
			PORTB|=1<<PB0;
		}
		else
		{
			OCR0=-(int)x3;
 74e:	c3 01       	movw	r24, r6
 750:	b2 01       	movw	r22, r4
 752:	0e 94 d6 04 	call	0x9ac	; 0x9ac <__fixsfsi>
 756:	61 95       	neg	r22
 758:	6c bf       	out	0x3c, r22	; 60
			PORTB&=~(1<<PB0);
 75a:	c0 98       	cbi	0x18, 0	; 24
		}
		if(y3>0)
 75c:	20 e0       	ldi	r18, 0x00	; 0
 75e:	30 e0       	ldi	r19, 0x00	; 0
 760:	a9 01       	movw	r20, r18
 762:	c7 01       	movw	r24, r14
 764:	b6 01       	movw	r22, r12
 766:	0e 94 be 05 	call	0xb7c	; 0xb7c <__gesf2>
 76a:	18 16       	cp	r1, r24
 76c:	3c f4       	brge	.+14     	; 0x77c <__stack+0x31d>
		{
			OCR2=(int)y3;
 76e:	c7 01       	movw	r24, r14
 770:	b6 01       	movw	r22, r12
 772:	0e 94 d6 04 	call	0x9ac	; 0x9ac <__fixsfsi>
 776:	63 bd       	out	0x23, r22	; 35
			PORTD|=1<<PD6;
 778:	96 9a       	sbi	0x12, 6	; 18
 77a:	46 ce       	rjmp	.-884    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
		}
		else
		{
			OCR2=-(int)y3;
 77c:	c7 01       	movw	r24, r14
 77e:	b6 01       	movw	r22, r12
 780:	0e 94 d6 04 	call	0x9ac	; 0x9ac <__fixsfsi>
 784:	61 95       	neg	r22
 786:	63 bd       	out	0x23, r22	; 35
			PORTD&=~1<<PD6;
 788:	82 b3       	in	r24, 0x12	; 18
 78a:	80 78       	andi	r24, 0x80	; 128
 78c:	82 bb       	out	0x12, r24	; 18
 78e:	3c ce       	rjmp	.-904    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
		long double y3=map(yans,-0.991273,0.991273,-255,255);
		if(x3>255)
		x3=255;
		if(y3>255)
		y3=255;
		if(x3<20&&x3>-20)
 790:	20 e0       	ldi	r18, 0x00	; 0
 792:	30 e0       	ldi	r19, 0x00	; 0
 794:	40 ea       	ldi	r20, 0xA0	; 160
 796:	51 e4       	ldi	r21, 0x41	; 65
 798:	c3 01       	movw	r24, r6
 79a:	b2 01       	movw	r22, r4
 79c:	0e 94 5f 04 	call	0x8be	; 0x8be <__cmpsf2>
 7a0:	87 fd       	sbrc	r24, 7
 7a2:	07 c0       	rjmp	.+14     	; 0x7b2 <__stack+0x353>
		long double x3=map(xans,-0.991273,0.991273,-255,255);
		long double y3=map(yans,-0.991273,0.991273,-255,255);
		if(x3>255)
		x3=255;
		if(y3>255)
		y3=255;
 7a4:	c1 2c       	mov	r12, r1
 7a6:	d1 2c       	mov	r13, r1
 7a8:	3f e7       	ldi	r19, 0x7F	; 127
 7aa:	e3 2e       	mov	r14, r19
 7ac:	33 e4       	ldi	r19, 0x43	; 67
 7ae:	f3 2e       	mov	r15, r19
 7b0:	a4 cf       	rjmp	.-184    	; 0x6fa <__stack+0x29b>
		if(x3<20&&x3>-20)
 7b2:	20 e0       	ldi	r18, 0x00	; 0
 7b4:	30 e0       	ldi	r19, 0x00	; 0
 7b6:	40 ea       	ldi	r20, 0xA0	; 160
 7b8:	51 ec       	ldi	r21, 0xC1	; 193
 7ba:	c3 01       	movw	r24, r6
 7bc:	b2 01       	movw	r22, r4
 7be:	0e 94 be 05 	call	0xb7c	; 0xb7c <__gesf2>
		long double x3=map(xans,-0.991273,0.991273,-255,255);
		long double y3=map(yans,-0.991273,0.991273,-255,255);
		if(x3>255)
		x3=255;
		if(y3>255)
		y3=255;
 7c2:	c1 2c       	mov	r12, r1
 7c4:	d1 2c       	mov	r13, r1
 7c6:	9f e7       	ldi	r25, 0x7F	; 127
 7c8:	e9 2e       	mov	r14, r25
 7ca:	93 e4       	ldi	r25, 0x43	; 67
 7cc:	f9 2e       	mov	r15, r25
		if(x3<20&&x3>-20)
 7ce:	18 16       	cp	r1, r24
 7d0:	0c f0       	brlt	.+2      	; 0x7d4 <__stack+0x375>
 7d2:	6d cf       	rjmp	.-294    	; 0x6ae <__stack+0x24f>
		x3=0;
 7d4:	41 2c       	mov	r4, r1
 7d6:	51 2c       	mov	r5, r1
 7d8:	32 01       	movw	r6, r4
 7da:	b9 cf       	rjmp	.-142    	; 0x74e <__stack+0x2ef>
 7dc:	41 2c       	mov	r4, r1
 7de:	51 2c       	mov	r5, r1
 7e0:	32 01       	movw	r6, r4
 7e2:	8b cf       	rjmp	.-234    	; 0x6fa <__stack+0x29b>

000007e4 <__subsf3>:
 7e4:	50 58       	subi	r21, 0x80	; 128

000007e6 <__addsf3>:
 7e6:	bb 27       	eor	r27, r27
 7e8:	aa 27       	eor	r26, r26
 7ea:	0e 94 0a 04 	call	0x814	; 0x814 <__addsf3x>
 7ee:	0c 94 84 05 	jmp	0xb08	; 0xb08 <__fp_round>
 7f2:	0e 94 76 05 	call	0xaec	; 0xaec <__fp_pscA>
 7f6:	38 f0       	brcs	.+14     	; 0x806 <__addsf3+0x20>
 7f8:	0e 94 7d 05 	call	0xafa	; 0xafa <__fp_pscB>
 7fc:	20 f0       	brcs	.+8      	; 0x806 <__addsf3+0x20>
 7fe:	39 f4       	brne	.+14     	; 0x80e <__addsf3+0x28>
 800:	9f 3f       	cpi	r25, 0xFF	; 255
 802:	19 f4       	brne	.+6      	; 0x80a <__addsf3+0x24>
 804:	26 f4       	brtc	.+8      	; 0x80e <__addsf3+0x28>
 806:	0c 94 73 05 	jmp	0xae6	; 0xae6 <__fp_nan>
 80a:	0e f4       	brtc	.+2      	; 0x80e <__addsf3+0x28>
 80c:	e0 95       	com	r30
 80e:	e7 fb       	bst	r30, 7
 810:	0c 94 6d 05 	jmp	0xada	; 0xada <__fp_inf>

00000814 <__addsf3x>:
 814:	e9 2f       	mov	r30, r25
 816:	0e 94 95 05 	call	0xb2a	; 0xb2a <__fp_split3>
 81a:	58 f3       	brcs	.-42     	; 0x7f2 <__addsf3+0xc>
 81c:	ba 17       	cp	r27, r26
 81e:	62 07       	cpc	r22, r18
 820:	73 07       	cpc	r23, r19
 822:	84 07       	cpc	r24, r20
 824:	95 07       	cpc	r25, r21
 826:	20 f0       	brcs	.+8      	; 0x830 <__addsf3x+0x1c>
 828:	79 f4       	brne	.+30     	; 0x848 <__addsf3x+0x34>
 82a:	a6 f5       	brtc	.+104    	; 0x894 <__addsf3x+0x80>
 82c:	0c 94 b7 05 	jmp	0xb6e	; 0xb6e <__fp_zero>
 830:	0e f4       	brtc	.+2      	; 0x834 <__addsf3x+0x20>
 832:	e0 95       	com	r30
 834:	0b 2e       	mov	r0, r27
 836:	ba 2f       	mov	r27, r26
 838:	a0 2d       	mov	r26, r0
 83a:	0b 01       	movw	r0, r22
 83c:	b9 01       	movw	r22, r18
 83e:	90 01       	movw	r18, r0
 840:	0c 01       	movw	r0, r24
 842:	ca 01       	movw	r24, r20
 844:	a0 01       	movw	r20, r0
 846:	11 24       	eor	r1, r1
 848:	ff 27       	eor	r31, r31
 84a:	59 1b       	sub	r21, r25
 84c:	99 f0       	breq	.+38     	; 0x874 <__addsf3x+0x60>
 84e:	59 3f       	cpi	r21, 0xF9	; 249
 850:	50 f4       	brcc	.+20     	; 0x866 <__addsf3x+0x52>
 852:	50 3e       	cpi	r21, 0xE0	; 224
 854:	68 f1       	brcs	.+90     	; 0x8b0 <__addsf3x+0x9c>
 856:	1a 16       	cp	r1, r26
 858:	f0 40       	sbci	r31, 0x00	; 0
 85a:	a2 2f       	mov	r26, r18
 85c:	23 2f       	mov	r18, r19
 85e:	34 2f       	mov	r19, r20
 860:	44 27       	eor	r20, r20
 862:	58 5f       	subi	r21, 0xF8	; 248
 864:	f3 cf       	rjmp	.-26     	; 0x84c <__addsf3x+0x38>
 866:	46 95       	lsr	r20
 868:	37 95       	ror	r19
 86a:	27 95       	ror	r18
 86c:	a7 95       	ror	r26
 86e:	f0 40       	sbci	r31, 0x00	; 0
 870:	53 95       	inc	r21
 872:	c9 f7       	brne	.-14     	; 0x866 <__addsf3x+0x52>
 874:	7e f4       	brtc	.+30     	; 0x894 <__addsf3x+0x80>
 876:	1f 16       	cp	r1, r31
 878:	ba 0b       	sbc	r27, r26
 87a:	62 0b       	sbc	r22, r18
 87c:	73 0b       	sbc	r23, r19
 87e:	84 0b       	sbc	r24, r20
 880:	ba f0       	brmi	.+46     	; 0x8b0 <__addsf3x+0x9c>
 882:	91 50       	subi	r25, 0x01	; 1
 884:	a1 f0       	breq	.+40     	; 0x8ae <__addsf3x+0x9a>
 886:	ff 0f       	add	r31, r31
 888:	bb 1f       	adc	r27, r27
 88a:	66 1f       	adc	r22, r22
 88c:	77 1f       	adc	r23, r23
 88e:	88 1f       	adc	r24, r24
 890:	c2 f7       	brpl	.-16     	; 0x882 <__addsf3x+0x6e>
 892:	0e c0       	rjmp	.+28     	; 0x8b0 <__addsf3x+0x9c>
 894:	ba 0f       	add	r27, r26
 896:	62 1f       	adc	r22, r18
 898:	73 1f       	adc	r23, r19
 89a:	84 1f       	adc	r24, r20
 89c:	48 f4       	brcc	.+18     	; 0x8b0 <__addsf3x+0x9c>
 89e:	87 95       	ror	r24
 8a0:	77 95       	ror	r23
 8a2:	67 95       	ror	r22
 8a4:	b7 95       	ror	r27
 8a6:	f7 95       	ror	r31
 8a8:	9e 3f       	cpi	r25, 0xFE	; 254
 8aa:	08 f0       	brcs	.+2      	; 0x8ae <__addsf3x+0x9a>
 8ac:	b0 cf       	rjmp	.-160    	; 0x80e <__addsf3+0x28>
 8ae:	93 95       	inc	r25
 8b0:	88 0f       	add	r24, r24
 8b2:	08 f0       	brcs	.+2      	; 0x8b6 <__addsf3x+0xa2>
 8b4:	99 27       	eor	r25, r25
 8b6:	ee 0f       	add	r30, r30
 8b8:	97 95       	ror	r25
 8ba:	87 95       	ror	r24
 8bc:	08 95       	ret

000008be <__cmpsf2>:
 8be:	0e 94 49 05 	call	0xa92	; 0xa92 <__fp_cmp>
 8c2:	08 f4       	brcc	.+2      	; 0x8c6 <__cmpsf2+0x8>
 8c4:	81 e0       	ldi	r24, 0x01	; 1
 8c6:	08 95       	ret

000008c8 <__divsf3>:
 8c8:	0e 94 78 04 	call	0x8f0	; 0x8f0 <__divsf3x>
 8cc:	0c 94 84 05 	jmp	0xb08	; 0xb08 <__fp_round>
 8d0:	0e 94 7d 05 	call	0xafa	; 0xafa <__fp_pscB>
 8d4:	58 f0       	brcs	.+22     	; 0x8ec <__divsf3+0x24>
 8d6:	0e 94 76 05 	call	0xaec	; 0xaec <__fp_pscA>
 8da:	40 f0       	brcs	.+16     	; 0x8ec <__divsf3+0x24>
 8dc:	29 f4       	brne	.+10     	; 0x8e8 <__divsf3+0x20>
 8de:	5f 3f       	cpi	r21, 0xFF	; 255
 8e0:	29 f0       	breq	.+10     	; 0x8ec <__divsf3+0x24>
 8e2:	0c 94 6d 05 	jmp	0xada	; 0xada <__fp_inf>
 8e6:	51 11       	cpse	r21, r1
 8e8:	0c 94 b8 05 	jmp	0xb70	; 0xb70 <__fp_szero>
 8ec:	0c 94 73 05 	jmp	0xae6	; 0xae6 <__fp_nan>

000008f0 <__divsf3x>:
 8f0:	0e 94 95 05 	call	0xb2a	; 0xb2a <__fp_split3>
 8f4:	68 f3       	brcs	.-38     	; 0x8d0 <__divsf3+0x8>

000008f6 <__divsf3_pse>:
 8f6:	99 23       	and	r25, r25
 8f8:	b1 f3       	breq	.-20     	; 0x8e6 <__divsf3+0x1e>
 8fa:	55 23       	and	r21, r21
 8fc:	91 f3       	breq	.-28     	; 0x8e2 <__divsf3+0x1a>
 8fe:	95 1b       	sub	r25, r21
 900:	55 0b       	sbc	r21, r21
 902:	bb 27       	eor	r27, r27
 904:	aa 27       	eor	r26, r26
 906:	62 17       	cp	r22, r18
 908:	73 07       	cpc	r23, r19
 90a:	84 07       	cpc	r24, r20
 90c:	38 f0       	brcs	.+14     	; 0x91c <__divsf3_pse+0x26>
 90e:	9f 5f       	subi	r25, 0xFF	; 255
 910:	5f 4f       	sbci	r21, 0xFF	; 255
 912:	22 0f       	add	r18, r18
 914:	33 1f       	adc	r19, r19
 916:	44 1f       	adc	r20, r20
 918:	aa 1f       	adc	r26, r26
 91a:	a9 f3       	breq	.-22     	; 0x906 <__divsf3_pse+0x10>
 91c:	35 d0       	rcall	.+106    	; 0x988 <__divsf3_pse+0x92>
 91e:	0e 2e       	mov	r0, r30
 920:	3a f0       	brmi	.+14     	; 0x930 <__divsf3_pse+0x3a>
 922:	e0 e8       	ldi	r30, 0x80	; 128
 924:	32 d0       	rcall	.+100    	; 0x98a <__divsf3_pse+0x94>
 926:	91 50       	subi	r25, 0x01	; 1
 928:	50 40       	sbci	r21, 0x00	; 0
 92a:	e6 95       	lsr	r30
 92c:	00 1c       	adc	r0, r0
 92e:	ca f7       	brpl	.-14     	; 0x922 <__divsf3_pse+0x2c>
 930:	2b d0       	rcall	.+86     	; 0x988 <__divsf3_pse+0x92>
 932:	fe 2f       	mov	r31, r30
 934:	29 d0       	rcall	.+82     	; 0x988 <__divsf3_pse+0x92>
 936:	66 0f       	add	r22, r22
 938:	77 1f       	adc	r23, r23
 93a:	88 1f       	adc	r24, r24
 93c:	bb 1f       	adc	r27, r27
 93e:	26 17       	cp	r18, r22
 940:	37 07       	cpc	r19, r23
 942:	48 07       	cpc	r20, r24
 944:	ab 07       	cpc	r26, r27
 946:	b0 e8       	ldi	r27, 0x80	; 128
 948:	09 f0       	breq	.+2      	; 0x94c <__divsf3_pse+0x56>
 94a:	bb 0b       	sbc	r27, r27
 94c:	80 2d       	mov	r24, r0
 94e:	bf 01       	movw	r22, r30
 950:	ff 27       	eor	r31, r31
 952:	93 58       	subi	r25, 0x83	; 131
 954:	5f 4f       	sbci	r21, 0xFF	; 255
 956:	3a f0       	brmi	.+14     	; 0x966 <__divsf3_pse+0x70>
 958:	9e 3f       	cpi	r25, 0xFE	; 254
 95a:	51 05       	cpc	r21, r1
 95c:	78 f0       	brcs	.+30     	; 0x97c <__divsf3_pse+0x86>
 95e:	0c 94 6d 05 	jmp	0xada	; 0xada <__fp_inf>
 962:	0c 94 b8 05 	jmp	0xb70	; 0xb70 <__fp_szero>
 966:	5f 3f       	cpi	r21, 0xFF	; 255
 968:	e4 f3       	brlt	.-8      	; 0x962 <__divsf3_pse+0x6c>
 96a:	98 3e       	cpi	r25, 0xE8	; 232
 96c:	d4 f3       	brlt	.-12     	; 0x962 <__divsf3_pse+0x6c>
 96e:	86 95       	lsr	r24
 970:	77 95       	ror	r23
 972:	67 95       	ror	r22
 974:	b7 95       	ror	r27
 976:	f7 95       	ror	r31
 978:	9f 5f       	subi	r25, 0xFF	; 255
 97a:	c9 f7       	brne	.-14     	; 0x96e <__divsf3_pse+0x78>
 97c:	88 0f       	add	r24, r24
 97e:	91 1d       	adc	r25, r1
 980:	96 95       	lsr	r25
 982:	87 95       	ror	r24
 984:	97 f9       	bld	r25, 7
 986:	08 95       	ret
 988:	e1 e0       	ldi	r30, 0x01	; 1
 98a:	66 0f       	add	r22, r22
 98c:	77 1f       	adc	r23, r23
 98e:	88 1f       	adc	r24, r24
 990:	bb 1f       	adc	r27, r27
 992:	62 17       	cp	r22, r18
 994:	73 07       	cpc	r23, r19
 996:	84 07       	cpc	r24, r20
 998:	ba 07       	cpc	r27, r26
 99a:	20 f0       	brcs	.+8      	; 0x9a4 <__divsf3_pse+0xae>
 99c:	62 1b       	sub	r22, r18
 99e:	73 0b       	sbc	r23, r19
 9a0:	84 0b       	sbc	r24, r20
 9a2:	ba 0b       	sbc	r27, r26
 9a4:	ee 1f       	adc	r30, r30
 9a6:	88 f7       	brcc	.-30     	; 0x98a <__divsf3_pse+0x94>
 9a8:	e0 95       	com	r30
 9aa:	08 95       	ret

000009ac <__fixsfsi>:
 9ac:	0e 94 dd 04 	call	0x9ba	; 0x9ba <__fixunssfsi>
 9b0:	68 94       	set
 9b2:	b1 11       	cpse	r27, r1
 9b4:	0c 94 b8 05 	jmp	0xb70	; 0xb70 <__fp_szero>
 9b8:	08 95       	ret

000009ba <__fixunssfsi>:
 9ba:	0e 94 9d 05 	call	0xb3a	; 0xb3a <__fp_splitA>
 9be:	88 f0       	brcs	.+34     	; 0x9e2 <__fixunssfsi+0x28>
 9c0:	9f 57       	subi	r25, 0x7F	; 127
 9c2:	98 f0       	brcs	.+38     	; 0x9ea <__fixunssfsi+0x30>
 9c4:	b9 2f       	mov	r27, r25
 9c6:	99 27       	eor	r25, r25
 9c8:	b7 51       	subi	r27, 0x17	; 23
 9ca:	b0 f0       	brcs	.+44     	; 0x9f8 <__fixunssfsi+0x3e>
 9cc:	e1 f0       	breq	.+56     	; 0xa06 <__fixunssfsi+0x4c>
 9ce:	66 0f       	add	r22, r22
 9d0:	77 1f       	adc	r23, r23
 9d2:	88 1f       	adc	r24, r24
 9d4:	99 1f       	adc	r25, r25
 9d6:	1a f0       	brmi	.+6      	; 0x9de <__fixunssfsi+0x24>
 9d8:	ba 95       	dec	r27
 9da:	c9 f7       	brne	.-14     	; 0x9ce <__fixunssfsi+0x14>
 9dc:	14 c0       	rjmp	.+40     	; 0xa06 <__fixunssfsi+0x4c>
 9de:	b1 30       	cpi	r27, 0x01	; 1
 9e0:	91 f0       	breq	.+36     	; 0xa06 <__fixunssfsi+0x4c>
 9e2:	0e 94 b7 05 	call	0xb6e	; 0xb6e <__fp_zero>
 9e6:	b1 e0       	ldi	r27, 0x01	; 1
 9e8:	08 95       	ret
 9ea:	0c 94 b7 05 	jmp	0xb6e	; 0xb6e <__fp_zero>
 9ee:	67 2f       	mov	r22, r23
 9f0:	78 2f       	mov	r23, r24
 9f2:	88 27       	eor	r24, r24
 9f4:	b8 5f       	subi	r27, 0xF8	; 248
 9f6:	39 f0       	breq	.+14     	; 0xa06 <__fixunssfsi+0x4c>
 9f8:	b9 3f       	cpi	r27, 0xF9	; 249
 9fa:	cc f3       	brlt	.-14     	; 0x9ee <__fixunssfsi+0x34>
 9fc:	86 95       	lsr	r24
 9fe:	77 95       	ror	r23
 a00:	67 95       	ror	r22
 a02:	b3 95       	inc	r27
 a04:	d9 f7       	brne	.-10     	; 0x9fc <__fixunssfsi+0x42>
 a06:	3e f4       	brtc	.+14     	; 0xa16 <__fixunssfsi+0x5c>
 a08:	90 95       	com	r25
 a0a:	80 95       	com	r24
 a0c:	70 95       	com	r23
 a0e:	61 95       	neg	r22
 a10:	7f 4f       	sbci	r23, 0xFF	; 255
 a12:	8f 4f       	sbci	r24, 0xFF	; 255
 a14:	9f 4f       	sbci	r25, 0xFF	; 255
 a16:	08 95       	ret

00000a18 <__floatunsisf>:
 a18:	e8 94       	clt
 a1a:	09 c0       	rjmp	.+18     	; 0xa2e <__floatsisf+0x12>

00000a1c <__floatsisf>:
 a1c:	97 fb       	bst	r25, 7
 a1e:	3e f4       	brtc	.+14     	; 0xa2e <__floatsisf+0x12>
 a20:	90 95       	com	r25
 a22:	80 95       	com	r24
 a24:	70 95       	com	r23
 a26:	61 95       	neg	r22
 a28:	7f 4f       	sbci	r23, 0xFF	; 255
 a2a:	8f 4f       	sbci	r24, 0xFF	; 255
 a2c:	9f 4f       	sbci	r25, 0xFF	; 255
 a2e:	99 23       	and	r25, r25
 a30:	a9 f0       	breq	.+42     	; 0xa5c <__floatsisf+0x40>
 a32:	f9 2f       	mov	r31, r25
 a34:	96 e9       	ldi	r25, 0x96	; 150
 a36:	bb 27       	eor	r27, r27
 a38:	93 95       	inc	r25
 a3a:	f6 95       	lsr	r31
 a3c:	87 95       	ror	r24
 a3e:	77 95       	ror	r23
 a40:	67 95       	ror	r22
 a42:	b7 95       	ror	r27
 a44:	f1 11       	cpse	r31, r1
 a46:	f8 cf       	rjmp	.-16     	; 0xa38 <__floatsisf+0x1c>
 a48:	fa f4       	brpl	.+62     	; 0xa88 <__floatsisf+0x6c>
 a4a:	bb 0f       	add	r27, r27
 a4c:	11 f4       	brne	.+4      	; 0xa52 <__floatsisf+0x36>
 a4e:	60 ff       	sbrs	r22, 0
 a50:	1b c0       	rjmp	.+54     	; 0xa88 <__floatsisf+0x6c>
 a52:	6f 5f       	subi	r22, 0xFF	; 255
 a54:	7f 4f       	sbci	r23, 0xFF	; 255
 a56:	8f 4f       	sbci	r24, 0xFF	; 255
 a58:	9f 4f       	sbci	r25, 0xFF	; 255
 a5a:	16 c0       	rjmp	.+44     	; 0xa88 <__floatsisf+0x6c>
 a5c:	88 23       	and	r24, r24
 a5e:	11 f0       	breq	.+4      	; 0xa64 <__floatsisf+0x48>
 a60:	96 e9       	ldi	r25, 0x96	; 150
 a62:	11 c0       	rjmp	.+34     	; 0xa86 <__floatsisf+0x6a>
 a64:	77 23       	and	r23, r23
 a66:	21 f0       	breq	.+8      	; 0xa70 <__floatsisf+0x54>
 a68:	9e e8       	ldi	r25, 0x8E	; 142
 a6a:	87 2f       	mov	r24, r23
 a6c:	76 2f       	mov	r23, r22
 a6e:	05 c0       	rjmp	.+10     	; 0xa7a <__floatsisf+0x5e>
 a70:	66 23       	and	r22, r22
 a72:	71 f0       	breq	.+28     	; 0xa90 <__floatsisf+0x74>
 a74:	96 e8       	ldi	r25, 0x86	; 134
 a76:	86 2f       	mov	r24, r22
 a78:	70 e0       	ldi	r23, 0x00	; 0
 a7a:	60 e0       	ldi	r22, 0x00	; 0
 a7c:	2a f0       	brmi	.+10     	; 0xa88 <__floatsisf+0x6c>
 a7e:	9a 95       	dec	r25
 a80:	66 0f       	add	r22, r22
 a82:	77 1f       	adc	r23, r23
 a84:	88 1f       	adc	r24, r24
 a86:	da f7       	brpl	.-10     	; 0xa7e <__floatsisf+0x62>
 a88:	88 0f       	add	r24, r24
 a8a:	96 95       	lsr	r25
 a8c:	87 95       	ror	r24
 a8e:	97 f9       	bld	r25, 7
 a90:	08 95       	ret

00000a92 <__fp_cmp>:
 a92:	99 0f       	add	r25, r25
 a94:	00 08       	sbc	r0, r0
 a96:	55 0f       	add	r21, r21
 a98:	aa 0b       	sbc	r26, r26
 a9a:	e0 e8       	ldi	r30, 0x80	; 128
 a9c:	fe ef       	ldi	r31, 0xFE	; 254
 a9e:	16 16       	cp	r1, r22
 aa0:	17 06       	cpc	r1, r23
 aa2:	e8 07       	cpc	r30, r24
 aa4:	f9 07       	cpc	r31, r25
 aa6:	c0 f0       	brcs	.+48     	; 0xad8 <__fp_cmp+0x46>
 aa8:	12 16       	cp	r1, r18
 aaa:	13 06       	cpc	r1, r19
 aac:	e4 07       	cpc	r30, r20
 aae:	f5 07       	cpc	r31, r21
 ab0:	98 f0       	brcs	.+38     	; 0xad8 <__fp_cmp+0x46>
 ab2:	62 1b       	sub	r22, r18
 ab4:	73 0b       	sbc	r23, r19
 ab6:	84 0b       	sbc	r24, r20
 ab8:	95 0b       	sbc	r25, r21
 aba:	39 f4       	brne	.+14     	; 0xaca <__fp_cmp+0x38>
 abc:	0a 26       	eor	r0, r26
 abe:	61 f0       	breq	.+24     	; 0xad8 <__fp_cmp+0x46>
 ac0:	23 2b       	or	r18, r19
 ac2:	24 2b       	or	r18, r20
 ac4:	25 2b       	or	r18, r21
 ac6:	21 f4       	brne	.+8      	; 0xad0 <__fp_cmp+0x3e>
 ac8:	08 95       	ret
 aca:	0a 26       	eor	r0, r26
 acc:	09 f4       	brne	.+2      	; 0xad0 <__fp_cmp+0x3e>
 ace:	a1 40       	sbci	r26, 0x01	; 1
 ad0:	a6 95       	lsr	r26
 ad2:	8f ef       	ldi	r24, 0xFF	; 255
 ad4:	81 1d       	adc	r24, r1
 ad6:	81 1d       	adc	r24, r1
 ad8:	08 95       	ret

00000ada <__fp_inf>:
 ada:	97 f9       	bld	r25, 7
 adc:	9f 67       	ori	r25, 0x7F	; 127
 ade:	80 e8       	ldi	r24, 0x80	; 128
 ae0:	70 e0       	ldi	r23, 0x00	; 0
 ae2:	60 e0       	ldi	r22, 0x00	; 0
 ae4:	08 95       	ret

00000ae6 <__fp_nan>:
 ae6:	9f ef       	ldi	r25, 0xFF	; 255
 ae8:	80 ec       	ldi	r24, 0xC0	; 192
 aea:	08 95       	ret

00000aec <__fp_pscA>:
 aec:	00 24       	eor	r0, r0
 aee:	0a 94       	dec	r0
 af0:	16 16       	cp	r1, r22
 af2:	17 06       	cpc	r1, r23
 af4:	18 06       	cpc	r1, r24
 af6:	09 06       	cpc	r0, r25
 af8:	08 95       	ret

00000afa <__fp_pscB>:
 afa:	00 24       	eor	r0, r0
 afc:	0a 94       	dec	r0
 afe:	12 16       	cp	r1, r18
 b00:	13 06       	cpc	r1, r19
 b02:	14 06       	cpc	r1, r20
 b04:	05 06       	cpc	r0, r21
 b06:	08 95       	ret

00000b08 <__fp_round>:
 b08:	09 2e       	mov	r0, r25
 b0a:	03 94       	inc	r0
 b0c:	00 0c       	add	r0, r0
 b0e:	11 f4       	brne	.+4      	; 0xb14 <__fp_round+0xc>
 b10:	88 23       	and	r24, r24
 b12:	52 f0       	brmi	.+20     	; 0xb28 <__fp_round+0x20>
 b14:	bb 0f       	add	r27, r27
 b16:	40 f4       	brcc	.+16     	; 0xb28 <__fp_round+0x20>
 b18:	bf 2b       	or	r27, r31
 b1a:	11 f4       	brne	.+4      	; 0xb20 <__fp_round+0x18>
 b1c:	60 ff       	sbrs	r22, 0
 b1e:	04 c0       	rjmp	.+8      	; 0xb28 <__fp_round+0x20>
 b20:	6f 5f       	subi	r22, 0xFF	; 255
 b22:	7f 4f       	sbci	r23, 0xFF	; 255
 b24:	8f 4f       	sbci	r24, 0xFF	; 255
 b26:	9f 4f       	sbci	r25, 0xFF	; 255
 b28:	08 95       	ret

00000b2a <__fp_split3>:
 b2a:	57 fd       	sbrc	r21, 7
 b2c:	90 58       	subi	r25, 0x80	; 128
 b2e:	44 0f       	add	r20, r20
 b30:	55 1f       	adc	r21, r21
 b32:	59 f0       	breq	.+22     	; 0xb4a <__fp_splitA+0x10>
 b34:	5f 3f       	cpi	r21, 0xFF	; 255
 b36:	71 f0       	breq	.+28     	; 0xb54 <__fp_splitA+0x1a>
 b38:	47 95       	ror	r20

00000b3a <__fp_splitA>:
 b3a:	88 0f       	add	r24, r24
 b3c:	97 fb       	bst	r25, 7
 b3e:	99 1f       	adc	r25, r25
 b40:	61 f0       	breq	.+24     	; 0xb5a <__fp_splitA+0x20>
 b42:	9f 3f       	cpi	r25, 0xFF	; 255
 b44:	79 f0       	breq	.+30     	; 0xb64 <__fp_splitA+0x2a>
 b46:	87 95       	ror	r24
 b48:	08 95       	ret
 b4a:	12 16       	cp	r1, r18
 b4c:	13 06       	cpc	r1, r19
 b4e:	14 06       	cpc	r1, r20
 b50:	55 1f       	adc	r21, r21
 b52:	f2 cf       	rjmp	.-28     	; 0xb38 <__fp_split3+0xe>
 b54:	46 95       	lsr	r20
 b56:	f1 df       	rcall	.-30     	; 0xb3a <__fp_splitA>
 b58:	08 c0       	rjmp	.+16     	; 0xb6a <__fp_splitA+0x30>
 b5a:	16 16       	cp	r1, r22
 b5c:	17 06       	cpc	r1, r23
 b5e:	18 06       	cpc	r1, r24
 b60:	99 1f       	adc	r25, r25
 b62:	f1 cf       	rjmp	.-30     	; 0xb46 <__fp_splitA+0xc>
 b64:	86 95       	lsr	r24
 b66:	71 05       	cpc	r23, r1
 b68:	61 05       	cpc	r22, r1
 b6a:	08 94       	sec
 b6c:	08 95       	ret

00000b6e <__fp_zero>:
 b6e:	e8 94       	clt

00000b70 <__fp_szero>:
 b70:	bb 27       	eor	r27, r27
 b72:	66 27       	eor	r22, r22
 b74:	77 27       	eor	r23, r23
 b76:	cb 01       	movw	r24, r22
 b78:	97 f9       	bld	r25, 7
 b7a:	08 95       	ret

00000b7c <__gesf2>:
 b7c:	0e 94 49 05 	call	0xa92	; 0xa92 <__fp_cmp>
 b80:	08 f4       	brcc	.+2      	; 0xb84 <__gesf2+0x8>
 b82:	8f ef       	ldi	r24, 0xFF	; 255
 b84:	08 95       	ret

00000b86 <__mulsf3>:
 b86:	0e 94 d6 05 	call	0xbac	; 0xbac <__mulsf3x>
 b8a:	0c 94 84 05 	jmp	0xb08	; 0xb08 <__fp_round>
 b8e:	0e 94 76 05 	call	0xaec	; 0xaec <__fp_pscA>
 b92:	38 f0       	brcs	.+14     	; 0xba2 <__mulsf3+0x1c>
 b94:	0e 94 7d 05 	call	0xafa	; 0xafa <__fp_pscB>
 b98:	20 f0       	brcs	.+8      	; 0xba2 <__mulsf3+0x1c>
 b9a:	95 23       	and	r25, r21
 b9c:	11 f0       	breq	.+4      	; 0xba2 <__mulsf3+0x1c>
 b9e:	0c 94 6d 05 	jmp	0xada	; 0xada <__fp_inf>
 ba2:	0c 94 73 05 	jmp	0xae6	; 0xae6 <__fp_nan>
 ba6:	11 24       	eor	r1, r1
 ba8:	0c 94 b8 05 	jmp	0xb70	; 0xb70 <__fp_szero>

00000bac <__mulsf3x>:
 bac:	0e 94 95 05 	call	0xb2a	; 0xb2a <__fp_split3>
 bb0:	70 f3       	brcs	.-36     	; 0xb8e <__mulsf3+0x8>

00000bb2 <__mulsf3_pse>:
 bb2:	95 9f       	mul	r25, r21
 bb4:	c1 f3       	breq	.-16     	; 0xba6 <__mulsf3+0x20>
 bb6:	95 0f       	add	r25, r21
 bb8:	50 e0       	ldi	r21, 0x00	; 0
 bba:	55 1f       	adc	r21, r21
 bbc:	62 9f       	mul	r22, r18
 bbe:	f0 01       	movw	r30, r0
 bc0:	72 9f       	mul	r23, r18
 bc2:	bb 27       	eor	r27, r27
 bc4:	f0 0d       	add	r31, r0
 bc6:	b1 1d       	adc	r27, r1
 bc8:	63 9f       	mul	r22, r19
 bca:	aa 27       	eor	r26, r26
 bcc:	f0 0d       	add	r31, r0
 bce:	b1 1d       	adc	r27, r1
 bd0:	aa 1f       	adc	r26, r26
 bd2:	64 9f       	mul	r22, r20
 bd4:	66 27       	eor	r22, r22
 bd6:	b0 0d       	add	r27, r0
 bd8:	a1 1d       	adc	r26, r1
 bda:	66 1f       	adc	r22, r22
 bdc:	82 9f       	mul	r24, r18
 bde:	22 27       	eor	r18, r18
 be0:	b0 0d       	add	r27, r0
 be2:	a1 1d       	adc	r26, r1
 be4:	62 1f       	adc	r22, r18
 be6:	73 9f       	mul	r23, r19
 be8:	b0 0d       	add	r27, r0
 bea:	a1 1d       	adc	r26, r1
 bec:	62 1f       	adc	r22, r18
 bee:	83 9f       	mul	r24, r19
 bf0:	a0 0d       	add	r26, r0
 bf2:	61 1d       	adc	r22, r1
 bf4:	22 1f       	adc	r18, r18
 bf6:	74 9f       	mul	r23, r20
 bf8:	33 27       	eor	r19, r19
 bfa:	a0 0d       	add	r26, r0
 bfc:	61 1d       	adc	r22, r1
 bfe:	23 1f       	adc	r18, r19
 c00:	84 9f       	mul	r24, r20
 c02:	60 0d       	add	r22, r0
 c04:	21 1d       	adc	r18, r1
 c06:	82 2f       	mov	r24, r18
 c08:	76 2f       	mov	r23, r22
 c0a:	6a 2f       	mov	r22, r26
 c0c:	11 24       	eor	r1, r1
 c0e:	9f 57       	subi	r25, 0x7F	; 127
 c10:	50 40       	sbci	r21, 0x00	; 0
 c12:	9a f0       	brmi	.+38     	; 0xc3a <__mulsf3_pse+0x88>
 c14:	f1 f0       	breq	.+60     	; 0xc52 <__mulsf3_pse+0xa0>
 c16:	88 23       	and	r24, r24
 c18:	4a f0       	brmi	.+18     	; 0xc2c <__mulsf3_pse+0x7a>
 c1a:	ee 0f       	add	r30, r30
 c1c:	ff 1f       	adc	r31, r31
 c1e:	bb 1f       	adc	r27, r27
 c20:	66 1f       	adc	r22, r22
 c22:	77 1f       	adc	r23, r23
 c24:	88 1f       	adc	r24, r24
 c26:	91 50       	subi	r25, 0x01	; 1
 c28:	50 40       	sbci	r21, 0x00	; 0
 c2a:	a9 f7       	brne	.-22     	; 0xc16 <__mulsf3_pse+0x64>
 c2c:	9e 3f       	cpi	r25, 0xFE	; 254
 c2e:	51 05       	cpc	r21, r1
 c30:	80 f0       	brcs	.+32     	; 0xc52 <__mulsf3_pse+0xa0>
 c32:	0c 94 6d 05 	jmp	0xada	; 0xada <__fp_inf>
 c36:	0c 94 b8 05 	jmp	0xb70	; 0xb70 <__fp_szero>
 c3a:	5f 3f       	cpi	r21, 0xFF	; 255
 c3c:	e4 f3       	brlt	.-8      	; 0xc36 <__mulsf3_pse+0x84>
 c3e:	98 3e       	cpi	r25, 0xE8	; 232
 c40:	d4 f3       	brlt	.-12     	; 0xc36 <__mulsf3_pse+0x84>
 c42:	86 95       	lsr	r24
 c44:	77 95       	ror	r23
 c46:	67 95       	ror	r22
 c48:	b7 95       	ror	r27
 c4a:	f7 95       	ror	r31
 c4c:	e7 95       	ror	r30
 c4e:	9f 5f       	subi	r25, 0xFF	; 255
 c50:	c1 f7       	brne	.-16     	; 0xc42 <__mulsf3_pse+0x90>
 c52:	fe 2b       	or	r31, r30
 c54:	88 0f       	add	r24, r24
 c56:	91 1d       	adc	r25, r1
 c58:	96 95       	lsr	r25
 c5a:	87 95       	ror	r24
 c5c:	97 f9       	bld	r25, 7
 c5e:	08 95       	ret
 c60:	19 f4       	brne	.+6      	; 0xc68 <__mulsf3_pse+0xb6>
 c62:	16 f4       	brtc	.+4      	; 0xc68 <__mulsf3_pse+0xb6>
 c64:	0c 94 73 05 	jmp	0xae6	; 0xae6 <__fp_nan>
 c68:	0c 94 76 06 	jmp	0xcec	; 0xcec <__fp_mpack>

00000c6c <sqrt>:
 c6c:	0e 94 9d 05 	call	0xb3a	; 0xb3a <__fp_splitA>
 c70:	b8 f3       	brcs	.-18     	; 0xc60 <__mulsf3_pse+0xae>
 c72:	99 23       	and	r25, r25
 c74:	c9 f3       	breq	.-14     	; 0xc68 <__mulsf3_pse+0xb6>
 c76:	b6 f3       	brts	.-20     	; 0xc64 <__mulsf3_pse+0xb2>
 c78:	9f 57       	subi	r25, 0x7F	; 127
 c7a:	55 0b       	sbc	r21, r21
 c7c:	87 ff       	sbrs	r24, 7
 c7e:	0e 94 84 06 	call	0xd08	; 0xd08 <__fp_norm2>
 c82:	00 24       	eor	r0, r0
 c84:	a0 e6       	ldi	r26, 0x60	; 96
 c86:	40 ea       	ldi	r20, 0xA0	; 160
 c88:	90 01       	movw	r18, r0
 c8a:	80 58       	subi	r24, 0x80	; 128
 c8c:	56 95       	lsr	r21
 c8e:	97 95       	ror	r25
 c90:	28 f4       	brcc	.+10     	; 0xc9c <sqrt+0x30>
 c92:	80 5c       	subi	r24, 0xC0	; 192
 c94:	66 0f       	add	r22, r22
 c96:	77 1f       	adc	r23, r23
 c98:	88 1f       	adc	r24, r24
 c9a:	20 f0       	brcs	.+8      	; 0xca4 <sqrt+0x38>
 c9c:	26 17       	cp	r18, r22
 c9e:	37 07       	cpc	r19, r23
 ca0:	48 07       	cpc	r20, r24
 ca2:	30 f4       	brcc	.+12     	; 0xcb0 <sqrt+0x44>
 ca4:	62 1b       	sub	r22, r18
 ca6:	73 0b       	sbc	r23, r19
 ca8:	84 0b       	sbc	r24, r20
 caa:	20 29       	or	r18, r0
 cac:	31 29       	or	r19, r1
 cae:	4a 2b       	or	r20, r26
 cb0:	a6 95       	lsr	r26
 cb2:	17 94       	ror	r1
 cb4:	07 94       	ror	r0
 cb6:	20 25       	eor	r18, r0
 cb8:	31 25       	eor	r19, r1
 cba:	4a 27       	eor	r20, r26
 cbc:	58 f7       	brcc	.-42     	; 0xc94 <sqrt+0x28>
 cbe:	66 0f       	add	r22, r22
 cc0:	77 1f       	adc	r23, r23
 cc2:	88 1f       	adc	r24, r24
 cc4:	20 f0       	brcs	.+8      	; 0xcce <sqrt+0x62>
 cc6:	26 17       	cp	r18, r22
 cc8:	37 07       	cpc	r19, r23
 cca:	48 07       	cpc	r20, r24
 ccc:	30 f4       	brcc	.+12     	; 0xcda <sqrt+0x6e>
 cce:	62 0b       	sbc	r22, r18
 cd0:	73 0b       	sbc	r23, r19
 cd2:	84 0b       	sbc	r24, r20
 cd4:	20 0d       	add	r18, r0
 cd6:	31 1d       	adc	r19, r1
 cd8:	41 1d       	adc	r20, r1
 cda:	a0 95       	com	r26
 cdc:	81 f7       	brne	.-32     	; 0xcbe <sqrt+0x52>
 cde:	b9 01       	movw	r22, r18
 ce0:	84 2f       	mov	r24, r20
 ce2:	91 58       	subi	r25, 0x81	; 129
 ce4:	88 0f       	add	r24, r24
 ce6:	96 95       	lsr	r25
 ce8:	87 95       	ror	r24
 cea:	08 95       	ret

00000cec <__fp_mpack>:
 cec:	9f 3f       	cpi	r25, 0xFF	; 255
 cee:	31 f0       	breq	.+12     	; 0xcfc <__fp_mpack_finite+0xc>

00000cf0 <__fp_mpack_finite>:
 cf0:	91 50       	subi	r25, 0x01	; 1
 cf2:	20 f4       	brcc	.+8      	; 0xcfc <__fp_mpack_finite+0xc>
 cf4:	87 95       	ror	r24
 cf6:	77 95       	ror	r23
 cf8:	67 95       	ror	r22
 cfa:	b7 95       	ror	r27
 cfc:	88 0f       	add	r24, r24
 cfe:	91 1d       	adc	r25, r1
 d00:	96 95       	lsr	r25
 d02:	87 95       	ror	r24
 d04:	97 f9       	bld	r25, 7
 d06:	08 95       	ret

00000d08 <__fp_norm2>:
 d08:	91 50       	subi	r25, 0x01	; 1
 d0a:	50 40       	sbci	r21, 0x00	; 0
 d0c:	66 0f       	add	r22, r22
 d0e:	77 1f       	adc	r23, r23
 d10:	88 1f       	adc	r24, r24
 d12:	d2 f7       	brpl	.-12     	; 0xd08 <__fp_norm2>
 d14:	08 95       	ret

00000d16 <_exit>:
 d16:	f8 94       	cli

00000d18 <__stop_program>:
 d18:	ff cf       	rjmp	.-2      	; 0xd18 <__stop_program>
