
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000029c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000029c  00000310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000011  00000000  00000000  00000312  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000324  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006dd  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000618  00000000  00000000  00000a65  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000145  00000000  00000000  0000107d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000118  00000000  00000000  000011c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000353  00000000  00000000  000012dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000288  00000000  00000000  0000162f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000018b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__vector_14>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e9       	ldi	r30, 0x9C	; 156
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <main>
  7a:	0c 94 4c 01 	jmp	0x298	; 0x298 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <Receive>:
#define BAUD 9600
#define ubbr_value FOSC/16/BAUD-1
int ch=1;
unsigned char Receive(void)
{
	while (! (UCSRA & (1 << RXC)) );
  82:	5f 9b       	sbis	0x0b, 7	; 11
  84:	fe cf       	rjmp	.-4      	; 0x82 <Receive>
	return UDR;
  86:	8c b1       	in	r24, 0x0c	; 12
}
  88:	08 95       	ret

0000008a <Transmit>:

void Transmit(unsigned char data)
{
	while (! (UCSRA & (1 << UDRE)) );
  8a:	5d 9b       	sbis	0x0b, 5	; 11
  8c:	fe cf       	rjmp	.-4      	; 0x8a <Transmit>
	UDR = data;
  8e:	8c b9       	out	0x0c, r24	; 12
  90:	08 95       	ret

00000092 <map>:

}
long map(long x, long in_min, long in_max, long out_min, long out_max)
{
  92:	4f 92       	push	r4
  94:	5f 92       	push	r5
  96:	6f 92       	push	r6
  98:	7f 92       	push	r7
  9a:	af 92       	push	r10
  9c:	bf 92       	push	r11
  9e:	cf 92       	push	r12
  a0:	df 92       	push	r13
  a2:	ef 92       	push	r14
  a4:	ff 92       	push	r15
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	cd b7       	in	r28, 0x3d	; 61
  b0:	de b7       	in	r29, 0x3e	; 62
  b2:	29 01       	movw	r4, r18
  b4:	3a 01       	movw	r6, r20
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  b6:	9b 01       	movw	r18, r22
  b8:	ac 01       	movw	r20, r24
  ba:	24 19       	sub	r18, r4
  bc:	35 09       	sbc	r19, r5
  be:	46 09       	sbc	r20, r6
  c0:	57 09       	sbc	r21, r7
  c2:	89 89       	ldd	r24, Y+17	; 0x11
  c4:	9a 89       	ldd	r25, Y+18	; 0x12
  c6:	ab 89       	ldd	r26, Y+19	; 0x13
  c8:	bc 89       	ldd	r27, Y+20	; 0x14
  ca:	bc 01       	movw	r22, r24
  cc:	cd 01       	movw	r24, r26
  ce:	6a 19       	sub	r22, r10
  d0:	7b 09       	sbc	r23, r11
  d2:	8c 09       	sbc	r24, r12
  d4:	9d 09       	sbc	r25, r13
  d6:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <__mulsi3>
  da:	a8 01       	movw	r20, r16
  dc:	97 01       	movw	r18, r14
  de:	24 19       	sub	r18, r4
  e0:	35 09       	sbc	r19, r5
  e2:	46 09       	sbc	r20, r6
  e4:	57 09       	sbc	r21, r7
  e6:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <__divmodsi4>
  ea:	ca 01       	movw	r24, r20
  ec:	b9 01       	movw	r22, r18
  ee:	6a 0d       	add	r22, r10
  f0:	7b 1d       	adc	r23, r11
  f2:	8c 1d       	adc	r24, r12
  f4:	9d 1d       	adc	r25, r13
}
  f6:	df 91       	pop	r29
  f8:	cf 91       	pop	r28
  fa:	1f 91       	pop	r17
  fc:	0f 91       	pop	r16
  fe:	ff 90       	pop	r15
 100:	ef 90       	pop	r14
 102:	df 90       	pop	r13
 104:	cf 90       	pop	r12
 106:	bf 90       	pop	r11
 108:	af 90       	pop	r10
 10a:	7f 90       	pop	r7
 10c:	6f 90       	pop	r6
 10e:	5f 90       	pop	r5
 110:	4f 90       	pop	r4
 112:	08 95       	ret

00000114 <__vector_14>:
	ADCSRA|=(1<<ADSC);
	while (1);

}
ISR(ADC_vect)
{
 114:	1f 92       	push	r1
 116:	0f 92       	push	r0
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	0f 92       	push	r0
 11c:	11 24       	eor	r1, r1
 11e:	2f 93       	push	r18
 120:	3f 93       	push	r19
 122:	4f 93       	push	r20
 124:	5f 93       	push	r21
 126:	6f 93       	push	r22
 128:	7f 93       	push	r23
 12a:	8f 93       	push	r24
 12c:	9f 93       	push	r25
 12e:	af 93       	push	r26
 130:	bf 93       	push	r27
 132:	cf 93       	push	r28
 134:	ef 93       	push	r30
 136:	ff 93       	push	r31
		uint8_t t1 = ADCL;
 138:	c4 b1       	in	r28, 0x04	; 4
		if(ch==1)
 13a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 13e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	41 f4       	brne	.+16     	; 0x156 <__vector_14+0x42>
		{
			Transmit(0x11);
 146:	81 e1       	ldi	r24, 0x11	; 17
 148:	0e 94 45 00 	call	0x8a	; 0x8a <Transmit>
			ch=0;
 14c:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__data_start+0x1>
 150:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
 154:	09 c0       	rjmp	.+18     	; 0x168 <__vector_14+0x54>
		}
		else
		{
			Transmit(0x21);
 156:	81 e2       	ldi	r24, 0x21	; 33
 158:	0e 94 45 00 	call	0x8a	; 0x8a <Transmit>
			ch=1;
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
 164:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
		}
			ADMUX ^=(1<<MUX0);
 168:	97 b1       	in	r25, 0x07	; 7
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	89 27       	eor	r24, r25
 16e:	87 b9       	out	0x07, r24	; 7
			Transmit(t1);
 170:	8c 2f       	mov	r24, r28
 172:	0e 94 45 00 	call	0x8a	; 0x8a <Transmit>
			Transmit(ADCH);
 176:	85 b1       	in	r24, 0x05	; 5
 178:	0e 94 45 00 	call	0x8a	; 0x8a <Transmit>


ADCSRA |= (1<<ADSC);
 17c:	36 9a       	sbi	0x06, 6	; 6

	}
 17e:	ff 91       	pop	r31
 180:	ef 91       	pop	r30
 182:	cf 91       	pop	r28
 184:	bf 91       	pop	r27
 186:	af 91       	pop	r26
 188:	9f 91       	pop	r25
 18a:	8f 91       	pop	r24
 18c:	7f 91       	pop	r23
 18e:	6f 91       	pop	r22
 190:	5f 91       	pop	r21
 192:	4f 91       	pop	r20
 194:	3f 91       	pop	r19
 196:	2f 91       	pop	r18
 198:	0f 90       	pop	r0
 19a:	0f be       	out	0x3f, r0	; 63
 19c:	0f 90       	pop	r0
 19e:	1f 90       	pop	r1
 1a0:	18 95       	reti

000001a2 <main>:
}
int main(void)
{


  UCSRA = (1 << U2X);
 1a2:	82 e0       	ldi	r24, 0x02	; 2
 1a4:	8b b9       	out	0x0b, r24	; 11
   UBRRH = (unsigned char) (ubbr_value >> 8);
 1a6:	10 bc       	out	0x20, r1	; 32
   UBRRL = (unsigned char) ubbr_value;
 1a8:	8f ef       	ldi	r24, 0xFF	; 255
 1aa:	89 b9       	out	0x09, r24	; 9
   UCSRB = (1 << TXEN);
 1ac:	88 e0       	ldi	r24, 0x08	; 8
 1ae:	8a b9       	out	0x0a, r24	; 10
   UCSRC = (1 << URSEL)| (3 << UCSZ0);
 1b0:	86 e8       	ldi	r24, 0x86	; 134
 1b2:	80 bd       	out	0x20, r24	; 32

  ADMUX |= 1<< REFS0;													// ADC setup
 1b4:	3e 9a       	sbi	0x07, 6	; 7
	ADCSRA |= 1<< ADPS2;
 1b6:	32 9a       	sbi	0x06, 2	; 6
	ADCSRA|=1<<ADIE;
 1b8:	33 9a       	sbi	0x06, 3	; 6
	sei();
 1ba:	78 94       	sei

	ADCSRA |= 1<< ADEN;
 1bc:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA|=(1<<ADSC);
 1be:	36 9a       	sbi	0x06, 6	; 6
 1c0:	ff cf       	rjmp	.-2      	; 0x1c0 <main+0x1e>

000001c2 <__mulsi3>:
 1c2:	db 01       	movw	r26, r22
 1c4:	8f 93       	push	r24
 1c6:	9f 93       	push	r25
 1c8:	0e 94 10 01 	call	0x220	; 0x220 <__muluhisi3>
 1cc:	bf 91       	pop	r27
 1ce:	af 91       	pop	r26
 1d0:	a2 9f       	mul	r26, r18
 1d2:	80 0d       	add	r24, r0
 1d4:	91 1d       	adc	r25, r1
 1d6:	a3 9f       	mul	r26, r19
 1d8:	90 0d       	add	r25, r0
 1da:	b2 9f       	mul	r27, r18
 1dc:	90 0d       	add	r25, r0
 1de:	11 24       	eor	r1, r1
 1e0:	08 95       	ret

000001e2 <__divmodsi4>:
 1e2:	05 2e       	mov	r0, r21
 1e4:	97 fb       	bst	r25, 7
 1e6:	1e f4       	brtc	.+6      	; 0x1ee <__divmodsi4+0xc>
 1e8:	00 94       	com	r0
 1ea:	0e 94 08 01 	call	0x210	; 0x210 <__negsi2>
 1ee:	57 fd       	sbrc	r21, 7
 1f0:	07 d0       	rcall	.+14     	; 0x200 <__divmodsi4_neg2>
 1f2:	0e 94 1b 01 	call	0x236	; 0x236 <__udivmodsi4>
 1f6:	07 fc       	sbrc	r0, 7
 1f8:	03 d0       	rcall	.+6      	; 0x200 <__divmodsi4_neg2>
 1fa:	4e f4       	brtc	.+18     	; 0x20e <__divmodsi4_exit>
 1fc:	0c 94 08 01 	jmp	0x210	; 0x210 <__negsi2>

00000200 <__divmodsi4_neg2>:
 200:	50 95       	com	r21
 202:	40 95       	com	r20
 204:	30 95       	com	r19
 206:	21 95       	neg	r18
 208:	3f 4f       	sbci	r19, 0xFF	; 255
 20a:	4f 4f       	sbci	r20, 0xFF	; 255
 20c:	5f 4f       	sbci	r21, 0xFF	; 255

0000020e <__divmodsi4_exit>:
 20e:	08 95       	ret

00000210 <__negsi2>:
 210:	90 95       	com	r25
 212:	80 95       	com	r24
 214:	70 95       	com	r23
 216:	61 95       	neg	r22
 218:	7f 4f       	sbci	r23, 0xFF	; 255
 21a:	8f 4f       	sbci	r24, 0xFF	; 255
 21c:	9f 4f       	sbci	r25, 0xFF	; 255
 21e:	08 95       	ret

00000220 <__muluhisi3>:
 220:	0e 94 3d 01 	call	0x27a	; 0x27a <__umulhisi3>
 224:	a5 9f       	mul	r26, r21
 226:	90 0d       	add	r25, r0
 228:	b4 9f       	mul	r27, r20
 22a:	90 0d       	add	r25, r0
 22c:	a4 9f       	mul	r26, r20
 22e:	80 0d       	add	r24, r0
 230:	91 1d       	adc	r25, r1
 232:	11 24       	eor	r1, r1
 234:	08 95       	ret

00000236 <__udivmodsi4>:
 236:	a1 e2       	ldi	r26, 0x21	; 33
 238:	1a 2e       	mov	r1, r26
 23a:	aa 1b       	sub	r26, r26
 23c:	bb 1b       	sub	r27, r27
 23e:	fd 01       	movw	r30, r26
 240:	0d c0       	rjmp	.+26     	; 0x25c <__udivmodsi4_ep>

00000242 <__udivmodsi4_loop>:
 242:	aa 1f       	adc	r26, r26
 244:	bb 1f       	adc	r27, r27
 246:	ee 1f       	adc	r30, r30
 248:	ff 1f       	adc	r31, r31
 24a:	a2 17       	cp	r26, r18
 24c:	b3 07       	cpc	r27, r19
 24e:	e4 07       	cpc	r30, r20
 250:	f5 07       	cpc	r31, r21
 252:	20 f0       	brcs	.+8      	; 0x25c <__udivmodsi4_ep>
 254:	a2 1b       	sub	r26, r18
 256:	b3 0b       	sbc	r27, r19
 258:	e4 0b       	sbc	r30, r20
 25a:	f5 0b       	sbc	r31, r21

0000025c <__udivmodsi4_ep>:
 25c:	66 1f       	adc	r22, r22
 25e:	77 1f       	adc	r23, r23
 260:	88 1f       	adc	r24, r24
 262:	99 1f       	adc	r25, r25
 264:	1a 94       	dec	r1
 266:	69 f7       	brne	.-38     	; 0x242 <__udivmodsi4_loop>
 268:	60 95       	com	r22
 26a:	70 95       	com	r23
 26c:	80 95       	com	r24
 26e:	90 95       	com	r25
 270:	9b 01       	movw	r18, r22
 272:	ac 01       	movw	r20, r24
 274:	bd 01       	movw	r22, r26
 276:	cf 01       	movw	r24, r30
 278:	08 95       	ret

0000027a <__umulhisi3>:
 27a:	a2 9f       	mul	r26, r18
 27c:	b0 01       	movw	r22, r0
 27e:	b3 9f       	mul	r27, r19
 280:	c0 01       	movw	r24, r0
 282:	a3 9f       	mul	r26, r19
 284:	70 0d       	add	r23, r0
 286:	81 1d       	adc	r24, r1
 288:	11 24       	eor	r1, r1
 28a:	91 1d       	adc	r25, r1
 28c:	b2 9f       	mul	r27, r18
 28e:	70 0d       	add	r23, r0
 290:	81 1d       	adc	r24, r1
 292:	11 24       	eor	r1, r1
 294:	91 1d       	adc	r25, r1
 296:	08 95       	ret

00000298 <_exit>:
 298:	f8 94       	cli

0000029a <__stop_program>:
 29a:	ff cf       	rjmp	.-2      	; 0x29a <__stop_program>
