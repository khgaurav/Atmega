
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000002ae  00000342  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000342  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000342  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000354  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006f1  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000618  00000000  00000000  00000aa9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000169  00000000  00000000  000010c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000118  00000000  00000000  0000122c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000034e  00000000  00000000  00001344  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000288  00000000  00000000  00001692  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000191a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__vector_14>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 da 00 	call	0x1b4	; 0x1b4 <main>
  74:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Receive>:
#define BAUD 9600
#define ubbr_value FOSC/16/BAUD-1
int ch=0;
unsigned char Receive(void)
{
	while (! (UCSRA & (1 << RXC)) );
  7c:	5f 9b       	sbis	0x0b, 7	; 11
  7e:	fe cf       	rjmp	.-4      	; 0x7c <Receive>
	return UDR;
  80:	8c b1       	in	r24, 0x0c	; 12
}
  82:	08 95       	ret

00000084 <Transmit>:

void Transmit(unsigned char data)
{
	while (! (UCSRA & (1 << UDRE)) );
  84:	5d 9b       	sbis	0x0b, 5	; 11
  86:	fe cf       	rjmp	.-4      	; 0x84 <Transmit>
	UDR = data;
  88:	8c b9       	out	0x0c, r24	; 12
  8a:	08 95       	ret

0000008c <map>:
}
long map(long x, long in_min, long in_max, long out_min, long out_max)
{
  8c:	4f 92       	push	r4
  8e:	5f 92       	push	r5
  90:	6f 92       	push	r6
  92:	7f 92       	push	r7
  94:	af 92       	push	r10
  96:	bf 92       	push	r11
  98:	cf 92       	push	r12
  9a:	df 92       	push	r13
  9c:	ef 92       	push	r14
  9e:	ff 92       	push	r15
  a0:	0f 93       	push	r16
  a2:	1f 93       	push	r17
  a4:	cf 93       	push	r28
  a6:	df 93       	push	r29
  a8:	cd b7       	in	r28, 0x3d	; 61
  aa:	de b7       	in	r29, 0x3e	; 62
  ac:	29 01       	movw	r4, r18
  ae:	3a 01       	movw	r6, r20
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  b0:	9b 01       	movw	r18, r22
  b2:	ac 01       	movw	r20, r24
  b4:	24 19       	sub	r18, r4
  b6:	35 09       	sbc	r19, r5
  b8:	46 09       	sbc	r20, r6
  ba:	57 09       	sbc	r21, r7
  bc:	89 89       	ldd	r24, Y+17	; 0x11
  be:	9a 89       	ldd	r25, Y+18	; 0x12
  c0:	ab 89       	ldd	r26, Y+19	; 0x13
  c2:	bc 89       	ldd	r27, Y+20	; 0x14
  c4:	bc 01       	movw	r22, r24
  c6:	cd 01       	movw	r24, r26
  c8:	6a 19       	sub	r22, r10
  ca:	7b 09       	sbc	r23, r11
  cc:	8c 09       	sbc	r24, r12
  ce:	9d 09       	sbc	r25, r13
  d0:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <__mulsi3>
  d4:	a8 01       	movw	r20, r16
  d6:	97 01       	movw	r18, r14
  d8:	24 19       	sub	r18, r4
  da:	35 09       	sbc	r19, r5
  dc:	46 09       	sbc	r20, r6
  de:	57 09       	sbc	r21, r7
  e0:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <__divmodsi4>
  e4:	ca 01       	movw	r24, r20
  e6:	b9 01       	movw	r22, r18
  e8:	6a 0d       	add	r22, r10
  ea:	7b 1d       	adc	r23, r11
  ec:	8c 1d       	adc	r24, r12
  ee:	9d 1d       	adc	r25, r13
}
  f0:	df 91       	pop	r29
  f2:	cf 91       	pop	r28
  f4:	1f 91       	pop	r17
  f6:	0f 91       	pop	r16
  f8:	ff 90       	pop	r15
  fa:	ef 90       	pop	r14
  fc:	df 90       	pop	r13
  fe:	cf 90       	pop	r12
 100:	bf 90       	pop	r11
 102:	af 90       	pop	r10
 104:	7f 90       	pop	r7
 106:	6f 90       	pop	r6
 108:	5f 90       	pop	r5
 10a:	4f 90       	pop	r4
 10c:	08 95       	ret

0000010e <__vector_14>:
	ADCSRA|=(1<<ADSC);
	while (1);

}
ISR(ADC_vect)
{
 10e:	1f 92       	push	r1
 110:	0f 92       	push	r0
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	0f 92       	push	r0
 116:	11 24       	eor	r1, r1
 118:	2f 93       	push	r18
 11a:	3f 93       	push	r19
 11c:	4f 93       	push	r20
 11e:	5f 93       	push	r21
 120:	6f 93       	push	r22
 122:	7f 93       	push	r23
 124:	8f 93       	push	r24
 126:	9f 93       	push	r25
 128:	af 93       	push	r26
 12a:	bf 93       	push	r27
 12c:	cf 93       	push	r28
 12e:	ef 93       	push	r30
 130:	ff 93       	push	r31
	uint8_t t1 = ADCL;
 132:	c4 b1       	in	r28, 0x04	; 4
	if(ch==0)
 134:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 138:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 13c:	00 97       	sbiw	r24, 0x00	; 0
 13e:	59 f4       	brne	.+22     	; 0x156 <__vector_14+0x48>
	{
		Transmit(0x11);
 140:	81 e1       	ldi	r24, 0x11	; 17
 142:	0e 94 42 00 	call	0x84	; 0x84 <Transmit>
		ch=1;
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
 14e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
		ADMUX |=(1<<MUX0);
 152:	38 9a       	sbi	0x07, 0	; 7
 154:	16 c0       	rjmp	.+44     	; 0x182 <__vector_14+0x74>
	}
	else if(ch==1)
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	59 f4       	brne	.+22     	; 0x170 <__vector_14+0x62>
	{
		Transmit(0x21);
 15a:	81 e2       	ldi	r24, 0x21	; 33
 15c:	0e 94 42 00 	call	0x84	; 0x84 <Transmit>
		ch=2;
 160:	82 e0       	ldi	r24, 0x02	; 2
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
 168:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
		ADMUX |=(1<<MUX1);
 16c:	39 9a       	sbi	0x07, 1	; 7
 16e:	08 c0       	rjmp	.+16     	; 0x180 <__vector_14+0x72>
		ADMUX &=~(1<<MUX0);
	}
	else
	{
		Transmit(0x31);
 170:	81 e3       	ldi	r24, 0x31	; 49
 172:	0e 94 42 00 	call	0x84	; 0x84 <Transmit>
		ch=0;
 176:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
 17a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
		ADMUX &=~(1<<MUX1);
 17e:	39 98       	cbi	0x07, 1	; 7
		ADMUX &=~(1<<MUX0);
 180:	38 98       	cbi	0x07, 0	; 7
	}
	Transmit(t1);
 182:	8c 2f       	mov	r24, r28
 184:	0e 94 42 00 	call	0x84	; 0x84 <Transmit>
	Transmit(ADCH);
 188:	85 b1       	in	r24, 0x05	; 5
 18a:	0e 94 42 00 	call	0x84	; 0x84 <Transmit>
	ADCSRA |= (1<<ADSC);
 18e:	36 9a       	sbi	0x06, 6	; 6
}
 190:	ff 91       	pop	r31
 192:	ef 91       	pop	r30
 194:	cf 91       	pop	r28
 196:	bf 91       	pop	r27
 198:	af 91       	pop	r26
 19a:	9f 91       	pop	r25
 19c:	8f 91       	pop	r24
 19e:	7f 91       	pop	r23
 1a0:	6f 91       	pop	r22
 1a2:	5f 91       	pop	r21
 1a4:	4f 91       	pop	r20
 1a6:	3f 91       	pop	r19
 1a8:	2f 91       	pop	r18
 1aa:	0f 90       	pop	r0
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	0f 90       	pop	r0
 1b0:	1f 90       	pop	r1
 1b2:	18 95       	reti

000001b4 <main>:
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}
int main(void)
{
	UCSRA = (1 << U2X);
 1b4:	82 e0       	ldi	r24, 0x02	; 2
 1b6:	8b b9       	out	0x0b, r24	; 11
	UBRRH = (unsigned char) (ubbr_value >> 8);
 1b8:	10 bc       	out	0x20, r1	; 32
	UBRRL = (unsigned char) ubbr_value;
 1ba:	8f ef       	ldi	r24, 0xFF	; 255
 1bc:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1 << TXEN);
 1be:	88 e0       	ldi	r24, 0x08	; 8
 1c0:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL)| (3 << UCSZ0);
 1c2:	86 e8       	ldi	r24, 0x86	; 134
 1c4:	80 bd       	out	0x20, r24	; 32
	ADMUX |= 1<< REFS0;													// ADC setup
 1c6:	3e 9a       	sbi	0x07, 6	; 7
	ADCSRA |= 1<< ADPS2;
 1c8:	32 9a       	sbi	0x06, 2	; 6
	ADCSRA|=1<<ADIE;
 1ca:	33 9a       	sbi	0x06, 3	; 6
	sei();
 1cc:	78 94       	sei
	ADCSRA |= 1<< ADEN;
 1ce:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA|=(1<<ADSC);
 1d0:	36 9a       	sbi	0x06, 6	; 6
 1d2:	ff cf       	rjmp	.-2      	; 0x1d2 <main+0x1e>

000001d4 <__mulsi3>:
 1d4:	db 01       	movw	r26, r22
 1d6:	8f 93       	push	r24
 1d8:	9f 93       	push	r25
 1da:	0e 94 19 01 	call	0x232	; 0x232 <__muluhisi3>
 1de:	bf 91       	pop	r27
 1e0:	af 91       	pop	r26
 1e2:	a2 9f       	mul	r26, r18
 1e4:	80 0d       	add	r24, r0
 1e6:	91 1d       	adc	r25, r1
 1e8:	a3 9f       	mul	r26, r19
 1ea:	90 0d       	add	r25, r0
 1ec:	b2 9f       	mul	r27, r18
 1ee:	90 0d       	add	r25, r0
 1f0:	11 24       	eor	r1, r1
 1f2:	08 95       	ret

000001f4 <__divmodsi4>:
 1f4:	05 2e       	mov	r0, r21
 1f6:	97 fb       	bst	r25, 7
 1f8:	1e f4       	brtc	.+6      	; 0x200 <__divmodsi4+0xc>
 1fa:	00 94       	com	r0
 1fc:	0e 94 11 01 	call	0x222	; 0x222 <__negsi2>
 200:	57 fd       	sbrc	r21, 7
 202:	07 d0       	rcall	.+14     	; 0x212 <__divmodsi4_neg2>
 204:	0e 94 24 01 	call	0x248	; 0x248 <__udivmodsi4>
 208:	07 fc       	sbrc	r0, 7
 20a:	03 d0       	rcall	.+6      	; 0x212 <__divmodsi4_neg2>
 20c:	4e f4       	brtc	.+18     	; 0x220 <__divmodsi4_exit>
 20e:	0c 94 11 01 	jmp	0x222	; 0x222 <__negsi2>

00000212 <__divmodsi4_neg2>:
 212:	50 95       	com	r21
 214:	40 95       	com	r20
 216:	30 95       	com	r19
 218:	21 95       	neg	r18
 21a:	3f 4f       	sbci	r19, 0xFF	; 255
 21c:	4f 4f       	sbci	r20, 0xFF	; 255
 21e:	5f 4f       	sbci	r21, 0xFF	; 255

00000220 <__divmodsi4_exit>:
 220:	08 95       	ret

00000222 <__negsi2>:
 222:	90 95       	com	r25
 224:	80 95       	com	r24
 226:	70 95       	com	r23
 228:	61 95       	neg	r22
 22a:	7f 4f       	sbci	r23, 0xFF	; 255
 22c:	8f 4f       	sbci	r24, 0xFF	; 255
 22e:	9f 4f       	sbci	r25, 0xFF	; 255
 230:	08 95       	ret

00000232 <__muluhisi3>:
 232:	0e 94 46 01 	call	0x28c	; 0x28c <__umulhisi3>
 236:	a5 9f       	mul	r26, r21
 238:	90 0d       	add	r25, r0
 23a:	b4 9f       	mul	r27, r20
 23c:	90 0d       	add	r25, r0
 23e:	a4 9f       	mul	r26, r20
 240:	80 0d       	add	r24, r0
 242:	91 1d       	adc	r25, r1
 244:	11 24       	eor	r1, r1
 246:	08 95       	ret

00000248 <__udivmodsi4>:
 248:	a1 e2       	ldi	r26, 0x21	; 33
 24a:	1a 2e       	mov	r1, r26
 24c:	aa 1b       	sub	r26, r26
 24e:	bb 1b       	sub	r27, r27
 250:	fd 01       	movw	r30, r26
 252:	0d c0       	rjmp	.+26     	; 0x26e <__udivmodsi4_ep>

00000254 <__udivmodsi4_loop>:
 254:	aa 1f       	adc	r26, r26
 256:	bb 1f       	adc	r27, r27
 258:	ee 1f       	adc	r30, r30
 25a:	ff 1f       	adc	r31, r31
 25c:	a2 17       	cp	r26, r18
 25e:	b3 07       	cpc	r27, r19
 260:	e4 07       	cpc	r30, r20
 262:	f5 07       	cpc	r31, r21
 264:	20 f0       	brcs	.+8      	; 0x26e <__udivmodsi4_ep>
 266:	a2 1b       	sub	r26, r18
 268:	b3 0b       	sbc	r27, r19
 26a:	e4 0b       	sbc	r30, r20
 26c:	f5 0b       	sbc	r31, r21

0000026e <__udivmodsi4_ep>:
 26e:	66 1f       	adc	r22, r22
 270:	77 1f       	adc	r23, r23
 272:	88 1f       	adc	r24, r24
 274:	99 1f       	adc	r25, r25
 276:	1a 94       	dec	r1
 278:	69 f7       	brne	.-38     	; 0x254 <__udivmodsi4_loop>
 27a:	60 95       	com	r22
 27c:	70 95       	com	r23
 27e:	80 95       	com	r24
 280:	90 95       	com	r25
 282:	9b 01       	movw	r18, r22
 284:	ac 01       	movw	r20, r24
 286:	bd 01       	movw	r22, r26
 288:	cf 01       	movw	r24, r30
 28a:	08 95       	ret

0000028c <__umulhisi3>:
 28c:	a2 9f       	mul	r26, r18
 28e:	b0 01       	movw	r22, r0
 290:	b3 9f       	mul	r27, r19
 292:	c0 01       	movw	r24, r0
 294:	a3 9f       	mul	r26, r19
 296:	70 0d       	add	r23, r0
 298:	81 1d       	adc	r24, r1
 29a:	11 24       	eor	r1, r1
 29c:	91 1d       	adc	r25, r1
 29e:	b2 9f       	mul	r27, r18
 2a0:	70 0d       	add	r23, r0
 2a2:	81 1d       	adc	r24, r1
 2a4:	11 24       	eor	r1, r1
 2a6:	91 1d       	adc	r25, r1
 2a8:	08 95       	ret

000002aa <_exit>:
 2aa:	f8 94       	cli

000002ac <__stop_program>:
 2ac:	ff cf       	rjmp	.-2      	; 0x2ac <__stop_program>
