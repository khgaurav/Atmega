
motorcode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000724  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000778  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000778  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000007e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000092e  00000000  00000000  00000814  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000062e  00000000  00000000  00001142  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003ff  00000000  00000000  00001770  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a0  00000000  00000000  00001b70  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000359  00000000  00000000  00001c10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000730  00000000  00000000  00001f69  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00002699  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 45 00 	call	0x8a	; 0x8a <main>
  64:	0c 94 90 03 	jmp	0x720	; 0x720 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <_Z6motionii>:
 }


void motion (int a, int b)
{
	if( a<210 || b<210)
  6c:	82 3d       	cpi	r24, 0xD2	; 210
  6e:	91 05       	cpc	r25, r1
  70:	1c f0       	brlt	.+6      	; 0x78 <_Z6motionii+0xc>
  72:	62 3d       	cpi	r22, 0xD2	; 210
  74:	71 05       	cpc	r23, r1
  76:	1c f4       	brge	.+6      	; 0x7e <_Z6motionii+0x12>
	{
		OCR0 = a;
  78:	8c bf       	out	0x3c, r24	; 60
		OCR2 = b;
  7a:	63 bd       	out	0x23, r22	; 35
  7c:	08 95       	ret
	}
	else
	{
		OCR0 = 255;
  7e:	8f ef       	ldi	r24, 0xFF	; 255
  80:	8c bf       	out	0x3c, r24	; 60
		OCR2 = 255;
  82:	83 bd       	out	0x23, r24	; 35
	    PORTB &= ~(1<< PINB0);
  84:	c0 98       	cbi	0x18, 0	; 24
		PORTD &= ~(1<< PIND2) ;
  86:	92 98       	cbi	0x12, 2	; 18
  88:	08 95       	ret

0000008a <main>:
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}
void motion (int a, int b );// movement function
int main (void)
{
  8a:	cf 93       	push	r28
  8c:	df 93       	push	r29
  8e:	00 d0       	rcall	.+0      	; 0x90 <main+0x6>
  90:	00 d0       	rcall	.+0      	; 0x92 <main+0x8>
  92:	cd b7       	in	r28, 0x3d	; 61
  94:	de b7       	in	r29, 0x3e	; 62
    TCCR0 |= 1<<WGM00 | 1<< WGM01 | 1<< COM00 | 1<< COM01 |1 <<CS00;
  96:	83 b7       	in	r24, 0x33	; 51
  98:	89 67       	ori	r24, 0x79	; 121
  9a:	83 bf       	out	0x33, r24	; 51
	DDRB |= 1<< PB3 | 1<<PINB0 | 1<<PINB1;													// intialization of pin3 pwm
  9c:	87 b3       	in	r24, 0x17	; 23
  9e:	8b 60       	ori	r24, 0x0B	; 11
  a0:	87 bb       	out	0x17, r24	; 23
	TCCR2 |= 1<<WGM20 | 1<< WGM21 | 1<< COM20 | 1<< COM21 |1 <<CS20;
  a2:	85 b5       	in	r24, 0x25	; 37
  a4:	89 67       	ori	r24, 0x79	; 121
  a6:	85 bd       	out	0x25, r24	; 37
	DDRD |= 1<< PB7 | 1<< PB2;		
  a8:	81 b3       	in	r24, 0x11	; 17
  aa:	84 68       	ori	r24, 0x84	; 132
  ac:	81 bb       	out	0x11, r24	; 17
	PORTB &= ~(1<< PINB0);
  ae:	c0 98       	cbi	0x18, 0	; 24
	PORTD &= ~(1<< PIND2) ;											// intialization of d7 pwm
  b0:	92 98       	cbi	0x12, 2	; 18
	
	
	
	ADMUX |= 1<< REFS0;													// ADC setup
  b2:	3e 9a       	sbi	0x07, 6	; 7
	ADCSRA |= 1<< ADPS2 ;
  b4:	32 9a       	sbi	0x06, 2	; 6
	ADCSRA |= 1<< ADEN;
  b6:	37 9a       	sbi	0x06, 7	; 6
    {
		ADCSRA |= 1<< ADSC;												// ADC input
		while (ADCSRA & (1<< ADSC));
		uint8_t x1 = ADCL;
		uint16_t x = ADCH<<8 | x1;
		ADMUX ^= (1<<MUX0);
  b8:	11 e0       	ldi	r17, 0x01	; 1
				
			}
			else
			{
				int i=map(y,512,1023,255,0);
				int j=map(x,1023-y,512,255,i);
  ba:	0f 2e       	mov	r0, r31
  bc:	22 24       	eor	r2, r2
  be:	2a 94       	dec	r2
  c0:	f3 e0       	ldi	r31, 0x03	; 3
  c2:	3f 2e       	mov	r3, r31
  c4:	f0 2d       	mov	r31, r0
	ADMUX |= 1<< REFS0;													// ADC setup
	ADCSRA |= 1<< ADPS2 ;
	ADCSRA |= 1<< ADEN;
	while (1) 
    {
		ADCSRA |= 1<< ADSC;												// ADC input
  c6:	36 9a       	sbi	0x06, 6	; 6
		while (ADCSRA & (1<< ADSC));
  c8:	36 99       	sbic	0x06, 6	; 6
  ca:	fe cf       	rjmp	.-4      	; 0xc8 <main+0x3e>
		uint8_t x1 = ADCL;
  cc:	24 b1       	in	r18, 0x04	; 4
  ce:	29 83       	std	Y+1, r18	; 0x01
		uint16_t x = ADCH<<8 | x1;
  d0:	85 b1       	in	r24, 0x05	; 5
  d2:	42 2f       	mov	r20, r18
  d4:	50 e0       	ldi	r21, 0x00	; 0
  d6:	58 2b       	or	r21, r24
		ADMUX ^= (1<<MUX0);
  d8:	87 b1       	in	r24, 0x07	; 7
  da:	81 27       	eor	r24, r17
  dc:	87 b9       	out	0x07, r24	; 7
		ADCSRA |= 1<< ADSC;
  de:	36 9a       	sbi	0x06, 6	; 6
  e0:	5a 83       	std	Y+2, r21	; 0x02
  e2:	49 83       	std	Y+1, r20	; 0x01
		while (ADCSRA & (1<< ADSC));
  e4:	36 99       	sbic	0x06, 6	; 6
  e6:	fe cf       	rjmp	.-4      	; 0xe4 <main+0x5a>
		uint8_t y1 = ADCL;
  e8:	e4 b0       	in	r14, 0x04	; 4
		uint16_t y=ADCH<<8 | y1;
  ea:	85 b1       	in	r24, 0x05	; 5
  ec:	f1 2c       	mov	r15, r1
  ee:	f8 2a       	or	r15, r24
		ADMUX ^= (1<<MUX0);
  f0:	87 b1       	in	r24, 0x07	; 7
  f2:	81 27       	eor	r24, r17
  f4:	87 b9       	out	0x07, r24	; 7
		
		// when the reading is from second quardrant
		if(x>=0&&x<=512&&y<=512&&y>=0)
  f6:	29 81       	ldd	r18, Y+1	; 0x01
  f8:	3a 81       	ldd	r19, Y+2	; 0x02
  fa:	21 30       	cpi	r18, 0x01	; 1
  fc:	42 e0       	ldi	r20, 0x02	; 2
  fe:	34 07       	cpc	r19, r20
 100:	08 f0       	brcs	.+2      	; 0x104 <main+0x7a>
 102:	8a c2       	rjmp	.+1300   	; 0x618 <__stack+0x1b9>
 104:	51 e0       	ldi	r21, 0x01	; 1
 106:	e5 16       	cp	r14, r21
 108:	52 e0       	ldi	r21, 0x02	; 2
 10a:	f5 06       	cpc	r15, r21
 10c:	08 f0       	brcs	.+2      	; 0x110 <main+0x86>
 10e:	38 c1       	rjmp	.+624    	; 0x380 <main+0x2f6>
		{
			
			if(x<y)
 110:	2e 15       	cp	r18, r14
 112:	3f 05       	cpc	r19, r15
 114:	08 f0       	brcs	.+2      	; 0x118 <main+0x8e>
 116:	48 c0       	rjmp	.+144    	; 0x1a8 <main+0x11e>
			{
				int i =map(x,0,512,0,255);
 118:	29 01       	movw	r4, r18
 11a:	61 2c       	mov	r6, r1
 11c:	71 2c       	mov	r7, r1
 11e:	af ef       	ldi	r26, 0xFF	; 255
 120:	b0 e0       	ldi	r27, 0x00	; 0
 122:	a3 01       	movw	r20, r6
 124:	92 01       	movw	r18, r4
 126:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__muluhisi3>
 12a:	4b 01       	movw	r8, r22
 12c:	5c 01       	movw	r10, r24
 12e:	99 23       	and	r25, r25
 130:	34 f4       	brge	.+12     	; 0x13e <main+0xb4>
 132:	2f ef       	ldi	r18, 0xFF	; 255
 134:	82 0e       	add	r8, r18
 136:	21 e0       	ldi	r18, 0x01	; 1
 138:	92 1e       	adc	r9, r18
 13a:	a1 1c       	adc	r10, r1
 13c:	b1 1c       	adc	r11, r1
 13e:	07 2e       	mov	r0, r23
 140:	79 e0       	ldi	r23, 0x09	; 9
 142:	b5 94       	asr	r11
 144:	a7 94       	ror	r10
 146:	97 94       	ror	r9
 148:	87 94       	ror	r8
 14a:	7a 95       	dec	r23
 14c:	d1 f7       	brne	.-12     	; 0x142 <main+0xb8>
 14e:	70 2d       	mov	r23, r0
				int j =map(y,x,512,255,i);
				PORTB &= ~(1<< PINB0);
 150:	c0 98       	cbi	0x18, 0	; 24
				PORTD |= (1<< PIND2);
 152:	92 9a       	sbi	0x12, 2	; 18
				motion(j,i);
 154:	c7 01       	movw	r24, r14
 156:	a0 e0       	ldi	r26, 0x00	; 0
 158:	b0 e0       	ldi	r27, 0x00	; 0
 15a:	9c 01       	movw	r18, r24
 15c:	ad 01       	movw	r20, r26
 15e:	24 19       	sub	r18, r4
 160:	35 09       	sbc	r19, r5
 162:	46 09       	sbc	r20, r6
 164:	57 09       	sbc	r21, r7
 166:	c4 01       	movw	r24, r8
 168:	09 2c       	mov	r0, r9
 16a:	00 0c       	add	r0, r0
 16c:	aa 0b       	sbc	r26, r26
 16e:	bb 0b       	sbc	r27, r27
 170:	bc 01       	movw	r22, r24
 172:	cd 01       	movw	r24, r26
 174:	6f 5f       	subi	r22, 0xFF	; 255
 176:	71 09       	sbc	r23, r1
 178:	81 09       	sbc	r24, r1
 17a:	91 09       	sbc	r25, r1
 17c:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsi3>
 180:	20 e0       	ldi	r18, 0x00	; 0
 182:	32 e0       	ldi	r19, 0x02	; 2
 184:	40 e0       	ldi	r20, 0x00	; 0
 186:	50 e0       	ldi	r21, 0x00	; 0
 188:	24 19       	sub	r18, r4
 18a:	35 09       	sbc	r19, r5
 18c:	46 09       	sbc	r20, r6
 18e:	57 09       	sbc	r21, r7
 190:	0e 94 2d 03 	call	0x65a	; 0x65a <__divmodsi4>
 194:	da 01       	movw	r26, r20
 196:	c9 01       	movw	r24, r18
 198:	81 50       	subi	r24, 0x01	; 1
 19a:	9f 4f       	sbci	r25, 0xFF	; 255
 19c:	af 4f       	sbci	r26, 0xFF	; 255
 19e:	bf 4f       	sbci	r27, 0xFF	; 255
 1a0:	b4 01       	movw	r22, r8
 1a2:	0e 94 36 00 	call	0x6c	; 0x6c <_Z6motionii>
 1a6:	2f c2       	rjmp	.+1118   	; 0x606 <__stack+0x1a7>
			
			
			}
			else if (x>=y)
			{
				int i =map(y,0,512,0,255);
 1a8:	27 01       	movw	r4, r14
 1aa:	61 2c       	mov	r6, r1
 1ac:	71 2c       	mov	r7, r1
 1ae:	af ef       	ldi	r26, 0xFF	; 255
 1b0:	b0 e0       	ldi	r27, 0x00	; 0
 1b2:	a3 01       	movw	r20, r6
 1b4:	92 01       	movw	r18, r4
 1b6:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__muluhisi3>
 1ba:	4b 01       	movw	r8, r22
 1bc:	5c 01       	movw	r10, r24
 1be:	99 23       	and	r25, r25
 1c0:	34 f4       	brge	.+12     	; 0x1ce <main+0x144>
 1c2:	3f ef       	ldi	r19, 0xFF	; 255
 1c4:	83 0e       	add	r8, r19
 1c6:	31 e0       	ldi	r19, 0x01	; 1
 1c8:	93 1e       	adc	r9, r19
 1ca:	a1 1c       	adc	r10, r1
 1cc:	b1 1c       	adc	r11, r1
 1ce:	07 2e       	mov	r0, r23
 1d0:	79 e0       	ldi	r23, 0x09	; 9
 1d2:	b5 94       	asr	r11
 1d4:	a7 94       	ror	r10
 1d6:	97 94       	ror	r9
 1d8:	87 94       	ror	r8
 1da:	7a 95       	dec	r23
 1dc:	d1 f7       	brne	.-12     	; 0x1d2 <main+0x148>
 1de:	70 2d       	mov	r23, r0
				int j =map(x,y,512,255,i);
				PORTB |= (1<< PINB0);
 1e0:	c0 9a       	sbi	0x18, 0	; 24
				PORTD |= (1<< PIND2);
 1e2:	92 9a       	sbi	0x12, 2	; 18
				motion(j,i);
 1e4:	49 81       	ldd	r20, Y+1	; 0x01
 1e6:	5a 81       	ldd	r21, Y+2	; 0x02
 1e8:	ca 01       	movw	r24, r20
 1ea:	a0 e0       	ldi	r26, 0x00	; 0
 1ec:	b0 e0       	ldi	r27, 0x00	; 0
 1ee:	9c 01       	movw	r18, r24
 1f0:	ad 01       	movw	r20, r26
 1f2:	24 19       	sub	r18, r4
 1f4:	35 09       	sbc	r19, r5
 1f6:	46 09       	sbc	r20, r6
 1f8:	57 09       	sbc	r21, r7
 1fa:	c4 01       	movw	r24, r8
 1fc:	09 2c       	mov	r0, r9
 1fe:	00 0c       	add	r0, r0
 200:	aa 0b       	sbc	r26, r26
 202:	bb 0b       	sbc	r27, r27
 204:	bc 01       	movw	r22, r24
 206:	cd 01       	movw	r24, r26
 208:	6f 5f       	subi	r22, 0xFF	; 255
 20a:	71 09       	sbc	r23, r1
 20c:	81 09       	sbc	r24, r1
 20e:	91 09       	sbc	r25, r1
 210:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsi3>
 214:	20 e0       	ldi	r18, 0x00	; 0
 216:	32 e0       	ldi	r19, 0x02	; 2
 218:	40 e0       	ldi	r20, 0x00	; 0
 21a:	50 e0       	ldi	r21, 0x00	; 0
 21c:	24 19       	sub	r18, r4
 21e:	35 09       	sbc	r19, r5
 220:	46 09       	sbc	r20, r6
 222:	57 09       	sbc	r21, r7
 224:	0e 94 2d 03 	call	0x65a	; 0x65a <__divmodsi4>
 228:	da 01       	movw	r26, r20
 22a:	c9 01       	movw	r24, r18
 22c:	81 50       	subi	r24, 0x01	; 1
 22e:	9f 4f       	sbci	r25, 0xFF	; 255
 230:	af 4f       	sbci	r26, 0xFF	; 255
 232:	bf 4f       	sbci	r27, 0xFF	; 255
 234:	b4 01       	movw	r22, r8
 236:	0e 94 36 00 	call	0x6c	; 0x6c <_Z6motionii>
 23a:	e5 c1       	rjmp	.+970    	; 0x606 <__stack+0x1a7>
			}
			
		}
		// when the reading is from first quardrant
		if(x>512&&x<=1023&&y<=512&&y>=0)
 23c:	51 e0       	ldi	r21, 0x01	; 1
 23e:	e5 16       	cp	r14, r21
 240:	52 e0       	ldi	r21, 0x02	; 2
 242:	f5 06       	cpc	r15, r21
 244:	08 f0       	brcs	.+2      	; 0x248 <main+0x1be>
 246:	3d c1       	rjmp	.+634    	; 0x4c2 <__stack+0x63>
		{
			if((x+y)<=1023)
 248:	89 81       	ldd	r24, Y+1	; 0x01
 24a:	9a 81       	ldd	r25, Y+2	; 0x02
 24c:	8e 0d       	add	r24, r14
 24e:	9f 1d       	adc	r25, r15
 250:	81 15       	cp	r24, r1
 252:	94 40       	sbci	r25, 0x04	; 4
 254:	08 f0       	brcs	.+2      	; 0x258 <main+0x1ce>
 256:	41 c0       	rjmp	.+130    	; 0x2da <main+0x250>
			{
				int i=map(y,0,512,0,255);
 258:	97 01       	movw	r18, r14
 25a:	af ef       	ldi	r26, 0xFF	; 255
 25c:	b0 e0       	ldi	r27, 0x00	; 0
 25e:	0e 94 4c 03 	call	0x698	; 0x698 <__umulhisi3>
 262:	86 2e       	mov	r8, r22
 264:	97 2e       	mov	r9, r23
 266:	a8 2e       	mov	r10, r24
 268:	b9 2e       	mov	r11, r25
 26a:	07 2e       	mov	r0, r23
 26c:	79 e0       	ldi	r23, 0x09	; 9
 26e:	b5 94       	asr	r11
 270:	a7 94       	ror	r10
 272:	97 94       	ror	r9
 274:	87 94       	ror	r8
 276:	7a 95       	dec	r23
 278:	d1 f7       	brne	.-12     	; 0x26e <main+0x1e4>
 27a:	70 2d       	mov	r23, r0
				int j=map(x,512,1023-y,i,255);
 27c:	24 01       	movw	r4, r8
 27e:	09 2c       	mov	r0, r9
 280:	00 0c       	add	r0, r0
 282:	66 08       	sbc	r6, r6
 284:	77 08       	sbc	r7, r7
				PORTB |= (1<< PINB0);
 286:	c0 9a       	sbi	0x18, 0	; 24
				PORTD |= (1<< PIND2);
 288:	92 9a       	sbi	0x12, 2	; 18
				motion(i,j);
 28a:	49 81       	ldd	r20, Y+1	; 0x01
 28c:	5a 81       	ldd	r21, Y+2	; 0x02
 28e:	ca 01       	movw	r24, r20
 290:	a0 e0       	ldi	r26, 0x00	; 0
 292:	b0 e0       	ldi	r27, 0x00	; 0
 294:	9c 01       	movw	r18, r24
 296:	ad 01       	movw	r20, r26
 298:	32 50       	subi	r19, 0x02	; 2
 29a:	41 09       	sbc	r20, r1
 29c:	51 09       	sbc	r21, r1
 29e:	6f ef       	ldi	r22, 0xFF	; 255
 2a0:	70 e0       	ldi	r23, 0x00	; 0
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	64 19       	sub	r22, r4
 2a8:	75 09       	sbc	r23, r5
 2aa:	86 09       	sbc	r24, r6
 2ac:	97 09       	sbc	r25, r7
 2ae:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsi3>
 2b2:	91 01       	movw	r18, r2
 2b4:	2e 19       	sub	r18, r14
 2b6:	3f 09       	sbc	r19, r15
 2b8:	40 e0       	ldi	r20, 0x00	; 0
 2ba:	50 e0       	ldi	r21, 0x00	; 0
 2bc:	32 50       	subi	r19, 0x02	; 2
 2be:	41 09       	sbc	r20, r1
 2c0:	51 09       	sbc	r21, r1
 2c2:	0e 94 2d 03 	call	0x65a	; 0x65a <__divmodsi4>
 2c6:	ca 01       	movw	r24, r20
 2c8:	b9 01       	movw	r22, r18
 2ca:	64 0d       	add	r22, r4
 2cc:	75 1d       	adc	r23, r5
 2ce:	86 1d       	adc	r24, r6
 2d0:	97 1d       	adc	r25, r7
 2d2:	c4 01       	movw	r24, r8
 2d4:	0e 94 36 00 	call	0x6c	; 0x6c <_Z6motionii>
 2d8:	4d c0       	rjmp	.+154    	; 0x374 <main+0x2ea>
			}
			else
			{
				int i=map(x,512,1023,255,0);
 2da:	29 81       	ldd	r18, Y+1	; 0x01
 2dc:	3a 81       	ldd	r19, Y+2	; 0x02
 2de:	c9 01       	movw	r24, r18
 2e0:	a0 e0       	ldi	r26, 0x00	; 0
 2e2:	b0 e0       	ldi	r27, 0x00	; 0
 2e4:	9c 01       	movw	r18, r24
 2e6:	ad 01       	movw	r20, r26
 2e8:	32 50       	subi	r19, 0x02	; 2
 2ea:	41 09       	sbc	r20, r1
 2ec:	51 09       	sbc	r21, r1
 2ee:	a1 e0       	ldi	r26, 0x01	; 1
 2f0:	bf ef       	ldi	r27, 0xFF	; 255
 2f2:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__mulohisi3>
 2f6:	2f ef       	ldi	r18, 0xFF	; 255
 2f8:	31 e0       	ldi	r19, 0x01	; 1
 2fa:	40 e0       	ldi	r20, 0x00	; 0
 2fc:	50 e0       	ldi	r21, 0x00	; 0
 2fe:	0e 94 2d 03 	call	0x65a	; 0x65a <__divmodsi4>
 302:	49 01       	movw	r8, r18
 304:	5a 01       	movw	r10, r20
 306:	8f ef       	ldi	r24, 0xFF	; 255
 308:	88 0e       	add	r8, r24
 30a:	91 1c       	adc	r9, r1
 30c:	a1 1c       	adc	r10, r1
 30e:	b1 1c       	adc	r11, r1
				int j=map(y,1023-x,512,255,i);
 310:	21 01       	movw	r4, r2
 312:	29 81       	ldd	r18, Y+1	; 0x01
 314:	3a 81       	ldd	r19, Y+2	; 0x02
 316:	42 1a       	sub	r4, r18
 318:	53 0a       	sbc	r5, r19
 31a:	61 2c       	mov	r6, r1
 31c:	71 2c       	mov	r7, r1
				PORTB |= (1<< PINB0);
 31e:	c0 9a       	sbi	0x18, 0	; 24
				PORTD &= ~(1<< PIND2);
 320:	92 98       	cbi	0x12, 2	; 18
				motion(i,j);
 322:	c7 01       	movw	r24, r14
 324:	a0 e0       	ldi	r26, 0x00	; 0
 326:	b0 e0       	ldi	r27, 0x00	; 0
 328:	9c 01       	movw	r18, r24
 32a:	ad 01       	movw	r20, r26
 32c:	24 19       	sub	r18, r4
 32e:	35 09       	sbc	r19, r5
 330:	46 09       	sbc	r20, r6
 332:	57 09       	sbc	r21, r7
 334:	c4 01       	movw	r24, r8
 336:	09 2c       	mov	r0, r9
 338:	00 0c       	add	r0, r0
 33a:	aa 0b       	sbc	r26, r26
 33c:	bb 0b       	sbc	r27, r27
 33e:	bc 01       	movw	r22, r24
 340:	cd 01       	movw	r24, r26
 342:	6f 5f       	subi	r22, 0xFF	; 255
 344:	71 09       	sbc	r23, r1
 346:	81 09       	sbc	r24, r1
 348:	91 09       	sbc	r25, r1
 34a:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsi3>
 34e:	20 e0       	ldi	r18, 0x00	; 0
 350:	32 e0       	ldi	r19, 0x02	; 2
 352:	40 e0       	ldi	r20, 0x00	; 0
 354:	50 e0       	ldi	r21, 0x00	; 0
 356:	24 19       	sub	r18, r4
 358:	35 09       	sbc	r19, r5
 35a:	46 09       	sbc	r20, r6
 35c:	57 09       	sbc	r21, r7
 35e:	0e 94 2d 03 	call	0x65a	; 0x65a <__divmodsi4>
 362:	ca 01       	movw	r24, r20
 364:	b9 01       	movw	r22, r18
 366:	61 50       	subi	r22, 0x01	; 1
 368:	7f 4f       	sbci	r23, 0xFF	; 255
 36a:	8f 4f       	sbci	r24, 0xFF	; 255
 36c:	9f 4f       	sbci	r25, 0xFF	; 255
 36e:	c4 01       	movw	r24, r8
 370:	0e 94 36 00 	call	0x6c	; 0x6c <_Z6motionii>
			}
		}

		// when the reading is from third quardrant
		if(x>=0&&x<=512&&y<=1023&&y>512)
 374:	49 81       	ldd	r20, Y+1	; 0x01
 376:	5a 81       	ldd	r21, Y+2	; 0x02
 378:	41 30       	cpi	r20, 0x01	; 1
 37a:	52 40       	sbci	r21, 0x02	; 2
 37c:	08 f0       	brcs	.+2      	; 0x380 <main+0x2f6>
 37e:	a1 c0       	rjmp	.+322    	; 0x4c2 <__stack+0x63>
 380:	e1 14       	cp	r14, r1
 382:	94 e0       	ldi	r25, 0x04	; 4
 384:	f9 06       	cpc	r15, r25
 386:	08 f0       	brcs	.+2      	; 0x38a <main+0x300>
 388:	9e ce       	rjmp	.-708    	; 0xc6 <main+0x3c>
 38a:	21 e0       	ldi	r18, 0x01	; 1
 38c:	e2 16       	cp	r14, r18
 38e:	22 e0       	ldi	r18, 0x02	; 2
 390:	f2 06       	cpc	r15, r18
 392:	08 f4       	brcc	.+2      	; 0x396 <main+0x30c>
 394:	4a c1       	rjmp	.+660    	; 0x62a <__stack+0x1cb>
		{
			
			if((x+y)<=1023)
 396:	89 81       	ldd	r24, Y+1	; 0x01
 398:	9a 81       	ldd	r25, Y+2	; 0x02
 39a:	8e 0d       	add	r24, r14
 39c:	9f 1d       	adc	r25, r15
 39e:	81 15       	cp	r24, r1
 3a0:	94 40       	sbci	r25, 0x04	; 4
 3a2:	08 f0       	brcs	.+2      	; 0x3a6 <main+0x31c>
 3a4:	42 c0       	rjmp	.+132    	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
			{
				int i=map(x,0,512,0,255);
 3a6:	29 81       	ldd	r18, Y+1	; 0x01
 3a8:	3a 81       	ldd	r19, Y+2	; 0x02
 3aa:	af ef       	ldi	r26, 0xFF	; 255
 3ac:	b0 e0       	ldi	r27, 0x00	; 0
 3ae:	0e 94 4c 03 	call	0x698	; 0x698 <__umulhisi3>
 3b2:	86 2e       	mov	r8, r22
 3b4:	97 2e       	mov	r9, r23
 3b6:	a8 2e       	mov	r10, r24
 3b8:	b9 2e       	mov	r11, r25
 3ba:	07 2e       	mov	r0, r23
 3bc:	79 e0       	ldi	r23, 0x09	; 9
 3be:	b5 94       	asr	r11
 3c0:	a7 94       	ror	r10
 3c2:	97 94       	ror	r9
 3c4:	87 94       	ror	r8
 3c6:	7a 95       	dec	r23
 3c8:	d1 f7       	brne	.-12     	; 0x3be <main+0x334>
 3ca:	70 2d       	mov	r23, r0
				int j=map(y,512,1023-x,i,255);
 3cc:	24 01       	movw	r4, r8
 3ce:	09 2c       	mov	r0, r9
 3d0:	00 0c       	add	r0, r0
 3d2:	66 08       	sbc	r6, r6
 3d4:	77 08       	sbc	r7, r7
				PORTB &= ~(1<< PINB0);
 3d6:	c0 98       	cbi	0x18, 0	; 24
				PORTD &= ~(1<< PIND2);
 3d8:	92 98       	cbi	0x12, 2	; 18
				motion(i,j);
 3da:	c7 01       	movw	r24, r14
 3dc:	a0 e0       	ldi	r26, 0x00	; 0
 3de:	b0 e0       	ldi	r27, 0x00	; 0
 3e0:	9c 01       	movw	r18, r24
 3e2:	ad 01       	movw	r20, r26
 3e4:	32 50       	subi	r19, 0x02	; 2
 3e6:	41 09       	sbc	r20, r1
 3e8:	51 09       	sbc	r21, r1
 3ea:	6f ef       	ldi	r22, 0xFF	; 255
 3ec:	70 e0       	ldi	r23, 0x00	; 0
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	64 19       	sub	r22, r4
 3f4:	75 09       	sbc	r23, r5
 3f6:	86 09       	sbc	r24, r6
 3f8:	97 09       	sbc	r25, r7
 3fa:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsi3>
 3fe:	91 01       	movw	r18, r2
 400:	49 81       	ldd	r20, Y+1	; 0x01
 402:	5a 81       	ldd	r21, Y+2	; 0x02
 404:	24 1b       	sub	r18, r20
 406:	35 0b       	sbc	r19, r21
 408:	40 e0       	ldi	r20, 0x00	; 0
 40a:	50 e0       	ldi	r21, 0x00	; 0
 40c:	32 50       	subi	r19, 0x02	; 2
 40e:	41 09       	sbc	r20, r1
 410:	51 09       	sbc	r21, r1
 412:	0e 94 2d 03 	call	0x65a	; 0x65a <__divmodsi4>
 416:	ca 01       	movw	r24, r20
 418:	b9 01       	movw	r22, r18
 41a:	64 0d       	add	r22, r4
 41c:	75 1d       	adc	r23, r5
 41e:	86 1d       	adc	r24, r6
 420:	97 1d       	adc	r25, r7
 422:	c4 01       	movw	r24, r8
 424:	0e 94 36 00 	call	0x6c	; 0x6c <_Z6motionii>
 428:	00 c1       	rjmp	.+512    	; 0x62a <__stack+0x1cb>
				
			}
			else
			{
				int i=map(y,512,1023,255,0);
 42a:	c7 01       	movw	r24, r14
 42c:	a0 e0       	ldi	r26, 0x00	; 0
 42e:	b0 e0       	ldi	r27, 0x00	; 0
 430:	9c 01       	movw	r18, r24
 432:	ad 01       	movw	r20, r26
 434:	32 50       	subi	r19, 0x02	; 2
 436:	41 09       	sbc	r20, r1
 438:	51 09       	sbc	r21, r1
 43a:	a1 e0       	ldi	r26, 0x01	; 1
 43c:	bf ef       	ldi	r27, 0xFF	; 255
 43e:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__mulohisi3>
 442:	2f ef       	ldi	r18, 0xFF	; 255
 444:	31 e0       	ldi	r19, 0x01	; 1
 446:	40 e0       	ldi	r20, 0x00	; 0
 448:	50 e0       	ldi	r21, 0x00	; 0
 44a:	0e 94 2d 03 	call	0x65a	; 0x65a <__divmodsi4>
 44e:	49 01       	movw	r8, r18
 450:	5a 01       	movw	r10, r20
 452:	8f ef       	ldi	r24, 0xFF	; 255
 454:	88 0e       	add	r8, r24
 456:	91 1c       	adc	r9, r1
 458:	a1 1c       	adc	r10, r1
 45a:	b1 1c       	adc	r11, r1
				int j=map(x,1023-y,512,255,i);
 45c:	21 01       	movw	r4, r2
 45e:	4e 18       	sub	r4, r14
 460:	5f 08       	sbc	r5, r15
 462:	61 2c       	mov	r6, r1
 464:	71 2c       	mov	r7, r1
				PORTB &= ~(1<< PINB0);
 466:	c0 98       	cbi	0x18, 0	; 24
				PORTD &= ~(1<< PIND2);
 468:	92 98       	cbi	0x12, 2	; 18
				motion(i,j);
 46a:	29 81       	ldd	r18, Y+1	; 0x01
 46c:	3a 81       	ldd	r19, Y+2	; 0x02
 46e:	c9 01       	movw	r24, r18
 470:	a0 e0       	ldi	r26, 0x00	; 0
 472:	b0 e0       	ldi	r27, 0x00	; 0
 474:	9c 01       	movw	r18, r24
 476:	ad 01       	movw	r20, r26
 478:	24 19       	sub	r18, r4
 47a:	35 09       	sbc	r19, r5
 47c:	46 09       	sbc	r20, r6
 47e:	57 09       	sbc	r21, r7
 480:	c4 01       	movw	r24, r8
 482:	09 2c       	mov	r0, r9
 484:	00 0c       	add	r0, r0
 486:	aa 0b       	sbc	r26, r26
 488:	bb 0b       	sbc	r27, r27
 48a:	bc 01       	movw	r22, r24
 48c:	cd 01       	movw	r24, r26
 48e:	6f 5f       	subi	r22, 0xFF	; 255
 490:	71 09       	sbc	r23, r1
 492:	81 09       	sbc	r24, r1
 494:	91 09       	sbc	r25, r1
 496:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsi3>
 49a:	20 e0       	ldi	r18, 0x00	; 0
 49c:	32 e0       	ldi	r19, 0x02	; 2
 49e:	40 e0       	ldi	r20, 0x00	; 0
 4a0:	50 e0       	ldi	r21, 0x00	; 0
 4a2:	24 19       	sub	r18, r4
 4a4:	35 09       	sbc	r19, r5
 4a6:	46 09       	sbc	r20, r6
 4a8:	57 09       	sbc	r21, r7
 4aa:	0e 94 2d 03 	call	0x65a	; 0x65a <__divmodsi4>
 4ae:	ca 01       	movw	r24, r20
 4b0:	b9 01       	movw	r22, r18
 4b2:	61 50       	subi	r22, 0x01	; 1
 4b4:	7f 4f       	sbci	r23, 0xFF	; 255
 4b6:	8f 4f       	sbci	r24, 0xFF	; 255
 4b8:	9f 4f       	sbci	r25, 0xFF	; 255
 4ba:	c4 01       	movw	r24, r8
 4bc:	0e 94 36 00 	call	0x6c	; 0x6c <_Z6motionii>
 4c0:	b4 c0       	rjmp	.+360    	; 0x62a <__stack+0x1cb>
			}
		}
		// when the reading is from fourth quardrant
		if(x>=512&&x<=1023&&y<=1023&&y>=512)
 4c2:	89 81       	ldd	r24, Y+1	; 0x01
 4c4:	9a 81       	ldd	r25, Y+2	; 0x02
 4c6:	92 50       	subi	r25, 0x02	; 2
 4c8:	81 15       	cp	r24, r1
 4ca:	92 40       	sbci	r25, 0x02	; 2
 4cc:	08 f0       	brcs	.+2      	; 0x4d0 <__stack+0x71>
 4ce:	fb cd       	rjmp	.-1034   	; 0xc6 <main+0x3c>
 4d0:	e1 14       	cp	r14, r1
 4d2:	44 e0       	ldi	r20, 0x04	; 4
 4d4:	f4 06       	cpc	r15, r20
 4d6:	08 f0       	brcs	.+2      	; 0x4da <__stack+0x7b>
 4d8:	f6 cd       	rjmp	.-1044   	; 0xc6 <main+0x3c>
 4da:	e1 14       	cp	r14, r1
 4dc:	52 e0       	ldi	r21, 0x02	; 2
 4de:	f5 06       	cpc	r15, r21
 4e0:	08 f4       	brcc	.+2      	; 0x4e4 <__stack+0x85>
 4e2:	f1 cd       	rjmp	.-1054   	; 0xc6 <main+0x3c>
		{
			if(x<=y)
 4e4:	89 81       	ldd	r24, Y+1	; 0x01
 4e6:	9a 81       	ldd	r25, Y+2	; 0x02
 4e8:	e8 16       	cp	r14, r24
 4ea:	f9 06       	cpc	r15, r25
 4ec:	08 f4       	brcc	.+2      	; 0x4f0 <__stack+0x91>
 4ee:	43 c0       	rjmp	.+134    	; 0x576 <__stack+0x117>

#include <avr/io.h>
#include<avr/interrupt.h>
long map(long x, long in_min, long in_max, long out_min, long out_max)
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 4f0:	27 01       	movw	r4, r14
 4f2:	61 2c       	mov	r6, r1
 4f4:	71 2c       	mov	r7, r1
 4f6:	92 e0       	ldi	r25, 0x02	; 2
 4f8:	59 1a       	sub	r5, r25
 4fa:	61 08       	sbc	r6, r1
 4fc:	71 08       	sbc	r7, r1
		// when the reading is from fourth quardrant
		if(x>=512&&x<=1023&&y<=1023&&y>=512)
		{
			if(x<=y)
			{
				int i=map(y,512,1023,255,0);
 4fe:	a1 e0       	ldi	r26, 0x01	; 1
 500:	bf ef       	ldi	r27, 0xFF	; 255
 502:	a3 01       	movw	r20, r6
 504:	92 01       	movw	r18, r4
 506:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__mulohisi3>
 50a:	2f ef       	ldi	r18, 0xFF	; 255
 50c:	31 e0       	ldi	r19, 0x01	; 1
 50e:	40 e0       	ldi	r20, 0x00	; 0
 510:	50 e0       	ldi	r21, 0x00	; 0
 512:	0e 94 2d 03 	call	0x65a	; 0x65a <__divmodsi4>
 516:	49 01       	movw	r8, r18
 518:	5a 01       	movw	r10, r20
 51a:	8f ef       	ldi	r24, 0xFF	; 255
 51c:	88 0e       	add	r8, r24
 51e:	91 1c       	adc	r9, r1
 520:	a1 1c       	adc	r10, r1
 522:	b1 1c       	adc	r11, r1
				int j=map(x,512,y,i,255);
 524:	64 01       	movw	r12, r8
 526:	09 2c       	mov	r0, r9
 528:	00 0c       	add	r0, r0
 52a:	ee 08       	sbc	r14, r14
 52c:	ff 08       	sbc	r15, r15
				PORTB &= ~(1<< PINB0);
 52e:	c0 98       	cbi	0x18, 0	; 24
				PORTD &= ~(1<< PIND2);
 530:	92 98       	cbi	0x12, 2	; 18
				motion(j,i);
 532:	29 81       	ldd	r18, Y+1	; 0x01
 534:	3a 81       	ldd	r19, Y+2	; 0x02
 536:	c9 01       	movw	r24, r18
 538:	a0 e0       	ldi	r26, 0x00	; 0
 53a:	b0 e0       	ldi	r27, 0x00	; 0
 53c:	9c 01       	movw	r18, r24
 53e:	ad 01       	movw	r20, r26
 540:	32 50       	subi	r19, 0x02	; 2
 542:	41 09       	sbc	r20, r1
 544:	51 09       	sbc	r21, r1
 546:	6f ef       	ldi	r22, 0xFF	; 255
 548:	70 e0       	ldi	r23, 0x00	; 0
 54a:	80 e0       	ldi	r24, 0x00	; 0
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	6c 19       	sub	r22, r12
 550:	7d 09       	sbc	r23, r13
 552:	8e 09       	sbc	r24, r14
 554:	9f 09       	sbc	r25, r15
 556:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsi3>
 55a:	a3 01       	movw	r20, r6
 55c:	92 01       	movw	r18, r4
 55e:	0e 94 2d 03 	call	0x65a	; 0x65a <__divmodsi4>
 562:	da 01       	movw	r26, r20
 564:	c9 01       	movw	r24, r18
 566:	8c 0d       	add	r24, r12
 568:	9d 1d       	adc	r25, r13
 56a:	ae 1d       	adc	r26, r14
 56c:	bf 1d       	adc	r27, r15
 56e:	b4 01       	movw	r22, r8
 570:	0e 94 36 00 	call	0x6c	; 0x6c <_Z6motionii>
 574:	a8 cd       	rjmp	.-1200   	; 0xc6 <main+0x3c>

#include <avr/io.h>
#include<avr/interrupt.h>
long map(long x, long in_min, long in_max, long out_min, long out_max)
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 576:	49 81       	ldd	r20, Y+1	; 0x01
 578:	5a 81       	ldd	r21, Y+2	; 0x02
 57a:	ca 01       	movw	r24, r20
 57c:	a0 e0       	ldi	r26, 0x00	; 0
 57e:	b0 e0       	ldi	r27, 0x00	; 0
 580:	9c 01       	movw	r18, r24
 582:	ad 01       	movw	r20, r26
 584:	32 50       	subi	r19, 0x02	; 2
 586:	41 09       	sbc	r20, r1
 588:	51 09       	sbc	r21, r1
 58a:	29 83       	std	Y+1, r18	; 0x01
 58c:	3a 83       	std	Y+2, r19	; 0x02
 58e:	4b 83       	std	Y+3, r20	; 0x03
 590:	5c 83       	std	Y+4, r21	; 0x04
				PORTD &= ~(1<< PIND2);
				motion(j,i);
			}
			else
			{
				int i=map(x,512,1023,255,0);
 592:	a1 e0       	ldi	r26, 0x01	; 1
 594:	bf ef       	ldi	r27, 0xFF	; 255
 596:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__mulohisi3>
 59a:	2f ef       	ldi	r18, 0xFF	; 255
 59c:	31 e0       	ldi	r19, 0x01	; 1
 59e:	40 e0       	ldi	r20, 0x00	; 0
 5a0:	50 e0       	ldi	r21, 0x00	; 0
 5a2:	0e 94 2d 03 	call	0x65a	; 0x65a <__divmodsi4>
 5a6:	49 01       	movw	r8, r18
 5a8:	5a 01       	movw	r10, r20
 5aa:	8f ef       	ldi	r24, 0xFF	; 255
 5ac:	88 0e       	add	r8, r24
 5ae:	91 1c       	adc	r9, r1
 5b0:	a1 1c       	adc	r10, r1
 5b2:	b1 1c       	adc	r11, r1
				int j=map(y,512,x,i,255);
 5b4:	24 01       	movw	r4, r8
 5b6:	09 2c       	mov	r0, r9
 5b8:	00 0c       	add	r0, r0
 5ba:	66 08       	sbc	r6, r6
 5bc:	77 08       	sbc	r7, r7
				PORTB &= ~(1<< PINB0);
 5be:	c0 98       	cbi	0x18, 0	; 24
				PORTD &= ~(1<< PIND2);
 5c0:	92 98       	cbi	0x12, 2	; 18
				motion(i,j);
 5c2:	c7 01       	movw	r24, r14
 5c4:	a0 e0       	ldi	r26, 0x00	; 0
 5c6:	b0 e0       	ldi	r27, 0x00	; 0
 5c8:	9c 01       	movw	r18, r24
 5ca:	ad 01       	movw	r20, r26
 5cc:	32 50       	subi	r19, 0x02	; 2
 5ce:	41 09       	sbc	r20, r1
 5d0:	51 09       	sbc	r21, r1
 5d2:	6f ef       	ldi	r22, 0xFF	; 255
 5d4:	70 e0       	ldi	r23, 0x00	; 0
 5d6:	80 e0       	ldi	r24, 0x00	; 0
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	64 19       	sub	r22, r4
 5dc:	75 09       	sbc	r23, r5
 5de:	86 09       	sbc	r24, r6
 5e0:	97 09       	sbc	r25, r7
 5e2:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsi3>
 5e6:	29 81       	ldd	r18, Y+1	; 0x01
 5e8:	3a 81       	ldd	r19, Y+2	; 0x02
 5ea:	4b 81       	ldd	r20, Y+3	; 0x03
 5ec:	5c 81       	ldd	r21, Y+4	; 0x04
 5ee:	0e 94 2d 03 	call	0x65a	; 0x65a <__divmodsi4>
 5f2:	ca 01       	movw	r24, r20
 5f4:	b9 01       	movw	r22, r18
 5f6:	64 0d       	add	r22, r4
 5f8:	75 1d       	adc	r23, r5
 5fa:	86 1d       	adc	r24, r6
 5fc:	97 1d       	adc	r25, r7
 5fe:	c4 01       	movw	r24, r8
 600:	0e 94 36 00 	call	0x6c	; 0x6c <_Z6motionii>
 604:	60 cd       	rjmp	.-1344   	; 0xc6 <main+0x3c>
				motion(j,i);
			}
			
		}
		// when the reading is from first quardrant
		if(x>512&&x<=1023&&y<=512&&y>=0)
 606:	89 81       	ldd	r24, Y+1	; 0x01
 608:	9a 81       	ldd	r25, Y+2	; 0x02
 60a:	81 50       	subi	r24, 0x01	; 1
 60c:	92 40       	sbci	r25, 0x02	; 2
 60e:	8f 3f       	cpi	r24, 0xFF	; 255
 610:	91 40       	sbci	r25, 0x01	; 1
 612:	08 f4       	brcc	.+2      	; 0x616 <__stack+0x1b7>
 614:	19 ce       	rjmp	.-974    	; 0x248 <main+0x1be>
 616:	b4 ce       	rjmp	.-664    	; 0x380 <main+0x2f6>
 618:	89 81       	ldd	r24, Y+1	; 0x01
 61a:	9a 81       	ldd	r25, Y+2	; 0x02
 61c:	81 50       	subi	r24, 0x01	; 1
 61e:	92 40       	sbci	r25, 0x02	; 2
 620:	8f 3f       	cpi	r24, 0xFF	; 255
 622:	91 40       	sbci	r25, 0x01	; 1
 624:	08 f0       	brcs	.+2      	; 0x628 <__stack+0x1c9>
 626:	4d cf       	rjmp	.-358    	; 0x4c2 <__stack+0x63>
 628:	09 ce       	rjmp	.-1006   	; 0x23c <main+0x1b2>
				PORTD &= ~(1<< PIND2);
				motion(i,j);
			}
		}
		// when the reading is from fourth quardrant
		if(x>=512&&x<=1023&&y<=1023&&y>=512)
 62a:	89 81       	ldd	r24, Y+1	; 0x01
 62c:	9a 81       	ldd	r25, Y+2	; 0x02
 62e:	92 50       	subi	r25, 0x02	; 2
 630:	81 15       	cp	r24, r1
 632:	92 40       	sbci	r25, 0x02	; 2
 634:	08 f4       	brcc	.+2      	; 0x638 <__stack+0x1d9>
 636:	51 cf       	rjmp	.-350    	; 0x4da <__stack+0x7b>
 638:	46 cd       	rjmp	.-1396   	; 0xc6 <main+0x3c>

0000063a <__mulsi3>:
 63a:	db 01       	movw	r26, r22
 63c:	8f 93       	push	r24
 63e:	9f 93       	push	r25
 640:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__muluhisi3>
 644:	bf 91       	pop	r27
 646:	af 91       	pop	r26
 648:	a2 9f       	mul	r26, r18
 64a:	80 0d       	add	r24, r0
 64c:	91 1d       	adc	r25, r1
 64e:	a3 9f       	mul	r26, r19
 650:	90 0d       	add	r25, r0
 652:	b2 9f       	mul	r27, r18
 654:	90 0d       	add	r25, r0
 656:	11 24       	eor	r1, r1
 658:	08 95       	ret

0000065a <__divmodsi4>:
 65a:	05 2e       	mov	r0, r21
 65c:	97 fb       	bst	r25, 7
 65e:	1e f4       	brtc	.+6      	; 0x666 <__divmodsi4+0xc>
 660:	00 94       	com	r0
 662:	0e 94 44 03 	call	0x688	; 0x688 <__negsi2>
 666:	57 fd       	sbrc	r21, 7
 668:	07 d0       	rcall	.+14     	; 0x678 <__divmodsi4_neg2>
 66a:	0e 94 6e 03 	call	0x6dc	; 0x6dc <__udivmodsi4>
 66e:	07 fc       	sbrc	r0, 7
 670:	03 d0       	rcall	.+6      	; 0x678 <__divmodsi4_neg2>
 672:	4e f4       	brtc	.+18     	; 0x686 <__divmodsi4_exit>
 674:	0c 94 44 03 	jmp	0x688	; 0x688 <__negsi2>

00000678 <__divmodsi4_neg2>:
 678:	50 95       	com	r21
 67a:	40 95       	com	r20
 67c:	30 95       	com	r19
 67e:	21 95       	neg	r18
 680:	3f 4f       	sbci	r19, 0xFF	; 255
 682:	4f 4f       	sbci	r20, 0xFF	; 255
 684:	5f 4f       	sbci	r21, 0xFF	; 255

00000686 <__divmodsi4_exit>:
 686:	08 95       	ret

00000688 <__negsi2>:
 688:	90 95       	com	r25
 68a:	80 95       	com	r24
 68c:	70 95       	com	r23
 68e:	61 95       	neg	r22
 690:	7f 4f       	sbci	r23, 0xFF	; 255
 692:	8f 4f       	sbci	r24, 0xFF	; 255
 694:	9f 4f       	sbci	r25, 0xFF	; 255
 696:	08 95       	ret

00000698 <__umulhisi3>:
 698:	a2 9f       	mul	r26, r18
 69a:	b0 01       	movw	r22, r0
 69c:	b3 9f       	mul	r27, r19
 69e:	c0 01       	movw	r24, r0
 6a0:	a3 9f       	mul	r26, r19
 6a2:	70 0d       	add	r23, r0
 6a4:	81 1d       	adc	r24, r1
 6a6:	11 24       	eor	r1, r1
 6a8:	91 1d       	adc	r25, r1
 6aa:	b2 9f       	mul	r27, r18
 6ac:	70 0d       	add	r23, r0
 6ae:	81 1d       	adc	r24, r1
 6b0:	11 24       	eor	r1, r1
 6b2:	91 1d       	adc	r25, r1
 6b4:	08 95       	ret

000006b6 <__muluhisi3>:
 6b6:	0e 94 4c 03 	call	0x698	; 0x698 <__umulhisi3>
 6ba:	a5 9f       	mul	r26, r21
 6bc:	90 0d       	add	r25, r0
 6be:	b4 9f       	mul	r27, r20
 6c0:	90 0d       	add	r25, r0
 6c2:	a4 9f       	mul	r26, r20
 6c4:	80 0d       	add	r24, r0
 6c6:	91 1d       	adc	r25, r1
 6c8:	11 24       	eor	r1, r1
 6ca:	08 95       	ret

000006cc <__mulshisi3>:
 6cc:	b7 ff       	sbrs	r27, 7
 6ce:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <__muluhisi3>

000006d2 <__mulohisi3>:
 6d2:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__muluhisi3>
 6d6:	82 1b       	sub	r24, r18
 6d8:	93 0b       	sbc	r25, r19
 6da:	08 95       	ret

000006dc <__udivmodsi4>:
 6dc:	a1 e2       	ldi	r26, 0x21	; 33
 6de:	1a 2e       	mov	r1, r26
 6e0:	aa 1b       	sub	r26, r26
 6e2:	bb 1b       	sub	r27, r27
 6e4:	fd 01       	movw	r30, r26
 6e6:	0d c0       	rjmp	.+26     	; 0x702 <__udivmodsi4_ep>

000006e8 <__udivmodsi4_loop>:
 6e8:	aa 1f       	adc	r26, r26
 6ea:	bb 1f       	adc	r27, r27
 6ec:	ee 1f       	adc	r30, r30
 6ee:	ff 1f       	adc	r31, r31
 6f0:	a2 17       	cp	r26, r18
 6f2:	b3 07       	cpc	r27, r19
 6f4:	e4 07       	cpc	r30, r20
 6f6:	f5 07       	cpc	r31, r21
 6f8:	20 f0       	brcs	.+8      	; 0x702 <__udivmodsi4_ep>
 6fa:	a2 1b       	sub	r26, r18
 6fc:	b3 0b       	sbc	r27, r19
 6fe:	e4 0b       	sbc	r30, r20
 700:	f5 0b       	sbc	r31, r21

00000702 <__udivmodsi4_ep>:
 702:	66 1f       	adc	r22, r22
 704:	77 1f       	adc	r23, r23
 706:	88 1f       	adc	r24, r24
 708:	99 1f       	adc	r25, r25
 70a:	1a 94       	dec	r1
 70c:	69 f7       	brne	.-38     	; 0x6e8 <__udivmodsi4_loop>
 70e:	60 95       	com	r22
 710:	70 95       	com	r23
 712:	80 95       	com	r24
 714:	90 95       	com	r25
 716:	9b 01       	movw	r18, r22
 718:	ac 01       	movw	r20, r24
 71a:	bd 01       	movw	r22, r26
 71c:	cf 01       	movw	r24, r30
 71e:	08 95       	ret

00000720 <_exit>:
 720:	f8 94       	cli

00000722 <__stop_program>:
 722:	ff cf       	rjmp	.-2      	; 0x722 <__stop_program>
