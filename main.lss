
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000224  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000224  00000298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000011  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006aa  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005dd  00000000  00000000  000009ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000147  00000000  00000000  00000f97  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ac  00000000  00000000  000010e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000033a  00000000  00000000  0000118c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001c3  00000000  00000000  000014c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001689  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 7f 00 	call	0xfe	; 0xfe <main>
  64:	0c 94 10 01 	jmp	0x220	; 0x220 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Receive>:
#define BAUD 9600
#define ubbr_value FOSC/16/BAUD-1

unsigned char Receive(void)
{
	while (! (UCSRA & (1 << RXC)) );
  6c:	5f 9b       	sbis	0x0b, 7	; 11
  6e:	fe cf       	rjmp	.-4      	; 0x6c <Receive>
	return UDR;
  70:	8c b1       	in	r24, 0x0c	; 12
}
  72:	08 95       	ret

00000074 <Transmit>:

void Transmit(unsigned char data)
{
	while (! (UCSRA & (1 << UDRE)) );
  74:	5d 9b       	sbis	0x0b, 5	; 11
  76:	fe cf       	rjmp	.-4      	; 0x74 <Transmit>
	UDR = data;
  78:	8c b9       	out	0x0c, r24	; 12
  7a:	08 95       	ret

0000007c <map>:

}
long map(long x, long in_min, long in_max, long out_min, long out_max)
{
  7c:	4f 92       	push	r4
  7e:	5f 92       	push	r5
  80:	6f 92       	push	r6
  82:	7f 92       	push	r7
  84:	af 92       	push	r10
  86:	bf 92       	push	r11
  88:	cf 92       	push	r12
  8a:	df 92       	push	r13
  8c:	ef 92       	push	r14
  8e:	ff 92       	push	r15
  90:	0f 93       	push	r16
  92:	1f 93       	push	r17
  94:	cf 93       	push	r28
  96:	df 93       	push	r29
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
  9c:	29 01       	movw	r4, r18
  9e:	3a 01       	movw	r6, r20
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  a0:	9b 01       	movw	r18, r22
  a2:	ac 01       	movw	r20, r24
  a4:	24 19       	sub	r18, r4
  a6:	35 09       	sbc	r19, r5
  a8:	46 09       	sbc	r20, r6
  aa:	57 09       	sbc	r21, r7
  ac:	89 89       	ldd	r24, Y+17	; 0x11
  ae:	9a 89       	ldd	r25, Y+18	; 0x12
  b0:	ab 89       	ldd	r26, Y+19	; 0x13
  b2:	bc 89       	ldd	r27, Y+20	; 0x14
  b4:	bc 01       	movw	r22, r24
  b6:	cd 01       	movw	r24, r26
  b8:	6a 19       	sub	r22, r10
  ba:	7b 09       	sbc	r23, r11
  bc:	8c 09       	sbc	r24, r12
  be:	9d 09       	sbc	r25, r13
  c0:	0e 94 a5 00 	call	0x14a	; 0x14a <__mulsi3>
  c4:	a8 01       	movw	r20, r16
  c6:	97 01       	movw	r18, r14
  c8:	24 19       	sub	r18, r4
  ca:	35 09       	sbc	r19, r5
  cc:	46 09       	sbc	r20, r6
  ce:	57 09       	sbc	r21, r7
  d0:	0e 94 b5 00 	call	0x16a	; 0x16a <__divmodsi4>
  d4:	ca 01       	movw	r24, r20
  d6:	b9 01       	movw	r22, r18
  d8:	6a 0d       	add	r22, r10
  da:	7b 1d       	adc	r23, r11
  dc:	8c 1d       	adc	r24, r12
  de:	9d 1d       	adc	r25, r13
}
  e0:	df 91       	pop	r29
  e2:	cf 91       	pop	r28
  e4:	1f 91       	pop	r17
  e6:	0f 91       	pop	r16
  e8:	ff 90       	pop	r15
  ea:	ef 90       	pop	r14
  ec:	df 90       	pop	r13
  ee:	cf 90       	pop	r12
  f0:	bf 90       	pop	r11
  f2:	af 90       	pop	r10
  f4:	7f 90       	pop	r7
  f6:	6f 90       	pop	r6
  f8:	5f 90       	pop	r5
  fa:	4f 90       	pop	r4
  fc:	08 95       	ret

000000fe <main>:
int main(void)
{


  UCSRA = (1 << U2X);
  fe:	82 e0       	ldi	r24, 0x02	; 2
 100:	8b b9       	out	0x0b, r24	; 11
   UBRRH = (unsigned char) (ubbr_value >> 8);
 102:	10 bc       	out	0x20, r1	; 32
   UBRRL = (unsigned char) ubbr_value;
 104:	8f ef       	ldi	r24, 0xFF	; 255
 106:	89 b9       	out	0x09, r24	; 9
   UCSRB = (1 << TXEN);
 108:	88 e0       	ldi	r24, 0x08	; 8
 10a:	8a b9       	out	0x0a, r24	; 10
   UCSRC = (1 << URSEL)| (3 << UCSZ0);
 10c:	86 e8       	ldi	r24, 0x86	; 134
 10e:	80 bd       	out	0x20, r24	; 32

  ADMUX |= 1<< REFS0;
 110:	3e 9a       	sbi	0x07, 6	; 7
  ADCSRA |= 1<< ADPS2;
 112:	32 9a       	sbi	0x06, 2	; 6
  ADCSRA |= 1<< ADEN;
 114:	37 9a       	sbi	0x06, 7	; 6
		uint8_t x1 = ADCL;
    Transmit(x1);
    Transmit(ADCH);


		ADMUX ^= (1<<MUX0);
 116:	c1 e0       	ldi	r28, 0x01	; 1
  ADMUX |= 1<< REFS0;
  ADCSRA |= 1<< ADPS2;
  ADCSRA |= 1<< ADEN;
	while (1)
	{
    ADCSRA |= 1<< ADSC;
 118:	36 9a       	sbi	0x06, 6	; 6
		while (ADCSRA & (1<< ADSC));
 11a:	36 99       	sbic	0x06, 6	; 6
 11c:	fe cf       	rjmp	.-4      	; 0x11a <main+0x1c>
		uint8_t x1 = ADCL;
 11e:	84 b1       	in	r24, 0x04	; 4
    Transmit(x1);
 120:	0e 94 3a 00 	call	0x74	; 0x74 <Transmit>
    Transmit(ADCH);
 124:	85 b1       	in	r24, 0x05	; 5
 126:	0e 94 3a 00 	call	0x74	; 0x74 <Transmit>


		ADMUX ^= (1<<MUX0);
 12a:	87 b1       	in	r24, 0x07	; 7
 12c:	8c 27       	eor	r24, r28
 12e:	87 b9       	out	0x07, r24	; 7
		ADCSRA |= 1<< ADSC;
 130:	36 9a       	sbi	0x06, 6	; 6
		while (ADCSRA & (1<< ADSC));
 132:	36 99       	sbic	0x06, 6	; 6
 134:	fe cf       	rjmp	.-4      	; 0x132 <main+0x34>
		uint8_t y1 = ADCL;
 136:	84 b1       	in	r24, 0x04	; 4
    Transmit(y1);
 138:	0e 94 3a 00 	call	0x74	; 0x74 <Transmit>
    Transmit(ADCH);
 13c:	85 b1       	in	r24, 0x05	; 5
 13e:	0e 94 3a 00 	call	0x74	; 0x74 <Transmit>
		ADMUX ^= (1<<MUX0);
 142:	87 b1       	in	r24, 0x07	; 7
 144:	8c 27       	eor	r24, r28
 146:	87 b9       	out	0x07, r24	; 7



  }
 148:	e7 cf       	rjmp	.-50     	; 0x118 <main+0x1a>

0000014a <__mulsi3>:
 14a:	db 01       	movw	r26, r22
 14c:	8f 93       	push	r24
 14e:	9f 93       	push	r25
 150:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <__muluhisi3>
 154:	bf 91       	pop	r27
 156:	af 91       	pop	r26
 158:	a2 9f       	mul	r26, r18
 15a:	80 0d       	add	r24, r0
 15c:	91 1d       	adc	r25, r1
 15e:	a3 9f       	mul	r26, r19
 160:	90 0d       	add	r25, r0
 162:	b2 9f       	mul	r27, r18
 164:	90 0d       	add	r25, r0
 166:	11 24       	eor	r1, r1
 168:	08 95       	ret

0000016a <__divmodsi4>:
 16a:	05 2e       	mov	r0, r21
 16c:	97 fb       	bst	r25, 7
 16e:	1e f4       	brtc	.+6      	; 0x176 <__divmodsi4+0xc>
 170:	00 94       	com	r0
 172:	0e 94 cc 00 	call	0x198	; 0x198 <__negsi2>
 176:	57 fd       	sbrc	r21, 7
 178:	07 d0       	rcall	.+14     	; 0x188 <__divmodsi4_neg2>
 17a:	0e 94 df 00 	call	0x1be	; 0x1be <__udivmodsi4>
 17e:	07 fc       	sbrc	r0, 7
 180:	03 d0       	rcall	.+6      	; 0x188 <__divmodsi4_neg2>
 182:	4e f4       	brtc	.+18     	; 0x196 <__divmodsi4_exit>
 184:	0c 94 cc 00 	jmp	0x198	; 0x198 <__negsi2>

00000188 <__divmodsi4_neg2>:
 188:	50 95       	com	r21
 18a:	40 95       	com	r20
 18c:	30 95       	com	r19
 18e:	21 95       	neg	r18
 190:	3f 4f       	sbci	r19, 0xFF	; 255
 192:	4f 4f       	sbci	r20, 0xFF	; 255
 194:	5f 4f       	sbci	r21, 0xFF	; 255

00000196 <__divmodsi4_exit>:
 196:	08 95       	ret

00000198 <__negsi2>:
 198:	90 95       	com	r25
 19a:	80 95       	com	r24
 19c:	70 95       	com	r23
 19e:	61 95       	neg	r22
 1a0:	7f 4f       	sbci	r23, 0xFF	; 255
 1a2:	8f 4f       	sbci	r24, 0xFF	; 255
 1a4:	9f 4f       	sbci	r25, 0xFF	; 255
 1a6:	08 95       	ret

000001a8 <__muluhisi3>:
 1a8:	0e 94 01 01 	call	0x202	; 0x202 <__umulhisi3>
 1ac:	a5 9f       	mul	r26, r21
 1ae:	90 0d       	add	r25, r0
 1b0:	b4 9f       	mul	r27, r20
 1b2:	90 0d       	add	r25, r0
 1b4:	a4 9f       	mul	r26, r20
 1b6:	80 0d       	add	r24, r0
 1b8:	91 1d       	adc	r25, r1
 1ba:	11 24       	eor	r1, r1
 1bc:	08 95       	ret

000001be <__udivmodsi4>:
 1be:	a1 e2       	ldi	r26, 0x21	; 33
 1c0:	1a 2e       	mov	r1, r26
 1c2:	aa 1b       	sub	r26, r26
 1c4:	bb 1b       	sub	r27, r27
 1c6:	fd 01       	movw	r30, r26
 1c8:	0d c0       	rjmp	.+26     	; 0x1e4 <__udivmodsi4_ep>

000001ca <__udivmodsi4_loop>:
 1ca:	aa 1f       	adc	r26, r26
 1cc:	bb 1f       	adc	r27, r27
 1ce:	ee 1f       	adc	r30, r30
 1d0:	ff 1f       	adc	r31, r31
 1d2:	a2 17       	cp	r26, r18
 1d4:	b3 07       	cpc	r27, r19
 1d6:	e4 07       	cpc	r30, r20
 1d8:	f5 07       	cpc	r31, r21
 1da:	20 f0       	brcs	.+8      	; 0x1e4 <__udivmodsi4_ep>
 1dc:	a2 1b       	sub	r26, r18
 1de:	b3 0b       	sbc	r27, r19
 1e0:	e4 0b       	sbc	r30, r20
 1e2:	f5 0b       	sbc	r31, r21

000001e4 <__udivmodsi4_ep>:
 1e4:	66 1f       	adc	r22, r22
 1e6:	77 1f       	adc	r23, r23
 1e8:	88 1f       	adc	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	1a 94       	dec	r1
 1ee:	69 f7       	brne	.-38     	; 0x1ca <__udivmodsi4_loop>
 1f0:	60 95       	com	r22
 1f2:	70 95       	com	r23
 1f4:	80 95       	com	r24
 1f6:	90 95       	com	r25
 1f8:	9b 01       	movw	r18, r22
 1fa:	ac 01       	movw	r20, r24
 1fc:	bd 01       	movw	r22, r26
 1fe:	cf 01       	movw	r24, r30
 200:	08 95       	ret

00000202 <__umulhisi3>:
 202:	a2 9f       	mul	r26, r18
 204:	b0 01       	movw	r22, r0
 206:	b3 9f       	mul	r27, r19
 208:	c0 01       	movw	r24, r0
 20a:	a3 9f       	mul	r26, r19
 20c:	70 0d       	add	r23, r0
 20e:	81 1d       	adc	r24, r1
 210:	11 24       	eor	r1, r1
 212:	91 1d       	adc	r25, r1
 214:	b2 9f       	mul	r27, r18
 216:	70 0d       	add	r23, r0
 218:	81 1d       	adc	r24, r1
 21a:	11 24       	eor	r1, r1
 21c:	91 1d       	adc	r25, r1
 21e:	08 95       	ret

00000220 <_exit>:
 220:	f8 94       	cli

00000222 <__stop_program>:
 222:	ff cf       	rjmp	.-2      	; 0x222 <__stop_program>
