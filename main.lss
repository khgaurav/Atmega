
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000032e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000032e  000003a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000011  00000000  00000000  000003a2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000711  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005e6  00000000  00000000  00000b29  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001c1  00000000  00000000  0000110f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ac  00000000  00000000  000012d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000323  00000000  00000000  0000137c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000025f  00000000  00000000  0000169f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  000018fe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 80 00 	call	0x100	; 0x100 <main>
  64:	0c 94 95 01 	jmp	0x32a	; 0x32a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Receive>:
#define FOSC 1000000// Clock Speed
#define BAUD 4800
#define ubbr_value (FOSC/(16*BAUD))-1
int Receive()
{
	while (! (UCSRA & (1 << RXC)) );
  6c:	5f 9b       	sbis	0x0b, 7	; 11
  6e:	fe cf       	rjmp	.-4      	; 0x6c <Receive>
	return UDR;
  70:	8c b1       	in	r24, 0x0c	; 12
}
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	08 95       	ret

00000076 <Transmit>:

void Transmit(unsigned char data)
{
	while (! (UCSRA & (1 << UDRE)) );
  76:	5d 9b       	sbis	0x0b, 5	; 11
  78:	fe cf       	rjmp	.-4      	; 0x76 <Transmit>
	UDR = data;
  7a:	8c b9       	out	0x0c, r24	; 12
  7c:	08 95       	ret

0000007e <map>:

}
long map(long x, long in_min, long in_max, long out_min, long out_max)
{
  7e:	4f 92       	push	r4
  80:	5f 92       	push	r5
  82:	6f 92       	push	r6
  84:	7f 92       	push	r7
  86:	af 92       	push	r10
  88:	bf 92       	push	r11
  8a:	cf 92       	push	r12
  8c:	df 92       	push	r13
  8e:	ef 92       	push	r14
  90:	ff 92       	push	r15
  92:	0f 93       	push	r16
  94:	1f 93       	push	r17
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	29 01       	movw	r4, r18
  a0:	3a 01       	movw	r6, r20
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  a2:	9b 01       	movw	r18, r22
  a4:	ac 01       	movw	r20, r24
  a6:	24 19       	sub	r18, r4
  a8:	35 09       	sbc	r19, r5
  aa:	46 09       	sbc	r20, r6
  ac:	57 09       	sbc	r21, r7
  ae:	89 89       	ldd	r24, Y+17	; 0x11
  b0:	9a 89       	ldd	r25, Y+18	; 0x12
  b2:	ab 89       	ldd	r26, Y+19	; 0x13
  b4:	bc 89       	ldd	r27, Y+20	; 0x14
  b6:	bc 01       	movw	r22, r24
  b8:	cd 01       	movw	r24, r26
  ba:	6a 19       	sub	r22, r10
  bc:	7b 09       	sbc	r23, r11
  be:	8c 09       	sbc	r24, r12
  c0:	9d 09       	sbc	r25, r13
  c2:	0e 94 02 01 	call	0x204	; 0x204 <__mulsi3>
  c6:	a8 01       	movw	r20, r16
  c8:	97 01       	movw	r18, r14
  ca:	24 19       	sub	r18, r4
  cc:	35 09       	sbc	r19, r5
  ce:	46 09       	sbc	r20, r6
  d0:	57 09       	sbc	r21, r7
  d2:	0e 94 26 01 	call	0x24c	; 0x24c <__divmodsi4>
  d6:	ca 01       	movw	r24, r20
  d8:	b9 01       	movw	r22, r18
  da:	6a 0d       	add	r22, r10
  dc:	7b 1d       	adc	r23, r11
  de:	8c 1d       	adc	r24, r12
  e0:	9d 1d       	adc	r25, r13
}
  e2:	df 91       	pop	r29
  e4:	cf 91       	pop	r28
  e6:	1f 91       	pop	r17
  e8:	0f 91       	pop	r16
  ea:	ff 90       	pop	r15
  ec:	ef 90       	pop	r14
  ee:	df 90       	pop	r13
  f0:	cf 90       	pop	r12
  f2:	bf 90       	pop	r11
  f4:	af 90       	pop	r10
  f6:	7f 90       	pop	r7
  f8:	6f 90       	pop	r6
  fa:	5f 90       	pop	r5
  fc:	4f 90       	pop	r4
  fe:	08 95       	ret

00000100 <main>:

int main(void)
{

  TCCR0 |= 1<<WGM00 | 1<< WGM01  | 1<< COM01 |1 <<CS00;
 100:	83 b7       	in	r24, 0x33	; 51
 102:	89 66       	ori	r24, 0x69	; 105
 104:	83 bf       	out	0x33, r24	; 51
DDRB |= 1<< PB3 | 1<<PINB0 | 1<<PINB1;
 106:	87 b3       	in	r24, 0x17	; 23
 108:	8b 60       	ori	r24, 0x0B	; 11
 10a:	87 bb       	out	0x17, r24	; 23
TCCR2 |= 1<<WGM20 | 1<< WGM21 | 1<< COM21 |1 <<CS20;
 10c:	85 b5       	in	r24, 0x25	; 37
 10e:	89 66       	ori	r24, 0x69	; 105
 110:	85 bd       	out	0x25, r24	; 37
DDRD |= 1<< PB7 | 1<< PD4;
 112:	81 b3       	in	r24, 0x11	; 17
 114:	80 69       	ori	r24, 0x90	; 144
 116:	81 bb       	out	0x11, r24	; 17
PORTB &= ~(1<< PINB0);
 118:	c0 98       	cbi	0x18, 0	; 24
PORTD &= ~(1<< PIND4);
 11a:	94 98       	cbi	0x12, 4	; 18
UCSRA = (1 << U2X);
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	8b b9       	out	0x0b, r24	; 11

  UBRRH = 0x03;
 120:	83 e0       	ldi	r24, 0x03	; 3
 122:	80 bd       	out	0x20, r24	; 32
  UBRRL = 0x40;
 124:	80 e4       	ldi	r24, 0x40	; 64
 126:	89 b9       	out	0x09, r24	; 9
  UCSRB = (1 << RXEN);
 128:	80 e1       	ldi	r24, 0x10	; 16
 12a:	8a b9       	out	0x0a, r24	; 10
  UCSRC = (1 << URSEL) | (3 << UCSZ0);
 12c:	86 e8       	ldi	r24, 0x86	; 134
 12e:	80 bd       	out	0x20, r24	; 32
		if(Receive()==97)
		{

			int x=0;
			int ch=Receive()-'0';
			for(int i=100;i>=1;i/=10)
 130:	2a e0       	ldi	r18, 0x0A	; 10
 132:	c2 2e       	mov	r12, r18
 134:	d1 2c       	mov	r13, r1


	while (1)
	{

		if(Receive()==97)
 136:	0e 94 36 00 	call	0x6c	; 0x6c <Receive>
 13a:	81 36       	cpi	r24, 0x61	; 97
 13c:	91 05       	cpc	r25, r1
 13e:	51 f5       	brne	.+84     	; 0x194 <main+0x94>
		{

			int x=0;
			int ch=Receive()-'0';
 140:	0e 94 36 00 	call	0x6c	; 0x6c <Receive>
 144:	c0 97       	sbiw	r24, 0x30	; 48
 146:	5c 01       	movw	r10, r24
 148:	03 e0       	ldi	r16, 0x03	; 3
 14a:	10 e0       	ldi	r17, 0x00	; 0
			for(int i=100;i>=1;i/=10)
 14c:	94 e6       	ldi	r25, 0x64	; 100
 14e:	e9 2e       	mov	r14, r25
 150:	f1 2c       	mov	r15, r1
	{

		if(Receive()==97)
		{

			int x=0;
 152:	c0 e0       	ldi	r28, 0x00	; 0
 154:	d0 e0       	ldi	r29, 0x00	; 0
			int ch=Receive()-'0';
			for(int i=100;i>=1;i/=10)
			x+=(Receive()-'0')*i;
 156:	0e 94 36 00 	call	0x6c	; 0x6c <Receive>
 15a:	c0 97       	sbiw	r24, 0x30	; 48
 15c:	8e 9d       	mul	r24, r14
 15e:	90 01       	movw	r18, r0
 160:	8f 9d       	mul	r24, r15
 162:	30 0d       	add	r19, r0
 164:	9e 9d       	mul	r25, r14
 166:	30 0d       	add	r19, r0
 168:	11 24       	eor	r1, r1
 16a:	c2 0f       	add	r28, r18
 16c:	d3 1f       	adc	r29, r19
		if(Receive()==97)
		{

			int x=0;
			int ch=Receive()-'0';
			for(int i=100;i>=1;i/=10)
 16e:	c7 01       	movw	r24, r14
 170:	b6 01       	movw	r22, r12
 172:	0e 94 12 01 	call	0x224	; 0x224 <__divmodhi4>
 176:	7b 01       	movw	r14, r22
 178:	01 50       	subi	r16, 0x01	; 1
 17a:	11 09       	sbc	r17, r1
 17c:	61 f7       	brne	.-40     	; 0x156 <main+0x56>
			x+=(Receive()-'0')*i;
			OCR0=x;
 17e:	cc bf       	out	0x3c, r28	; 60
			if(ch==0)
 180:	a1 14       	cp	r10, r1
 182:	b1 04       	cpc	r11, r1
 184:	11 f4       	brne	.+4      	; 0x18a <main+0x8a>
				PORTB|=(1<<PINB0);
 186:	c0 9a       	sbi	0x18, 0	; 24
 188:	09 c0       	rjmp	.+18     	; 0x19c <main+0x9c>
			else if(ch==1)
 18a:	aa 94       	dec	r10
 18c:	ab 28       	or	r10, r11
 18e:	31 f4       	brne	.+12     	; 0x19c <main+0x9c>
				PORTB &= ~(1<< PINB0);
 190:	c0 98       	cbi	0x18, 0	; 24
 192:	04 c0       	rjmp	.+8      	; 0x19c <main+0x9c>
		}
		else
		{
			OCR0=0;
 194:	1c be       	out	0x3c, r1	; 60
			OCR2=0;
 196:	13 bc       	out	0x23, r1	; 35
			PORTB &= ~(1<< PINB0);
 198:	c0 98       	cbi	0x18, 0	; 24
			PORTD &= ~(1<< PIND4);
 19a:	94 98       	cbi	0x12, 4	; 18
		}
		if(Receive()==98)
 19c:	0e 94 36 00 	call	0x6c	; 0x6c <Receive>
 1a0:	82 36       	cpi	r24, 0x62	; 98
 1a2:	91 05       	cpc	r25, r1
 1a4:	51 f5       	brne	.+84     	; 0x1fa <main+0xfa>
		{

			int y=0;
			int ch=Receive()-'0';
 1a6:	0e 94 36 00 	call	0x6c	; 0x6c <Receive>
 1aa:	c0 97       	sbiw	r24, 0x30	; 48
 1ac:	5c 01       	movw	r10, r24
 1ae:	03 e0       	ldi	r16, 0x03	; 3
 1b0:	10 e0       	ldi	r17, 0x00	; 0
			for(int i=100;i>=1;i/=10)
 1b2:	84 e6       	ldi	r24, 0x64	; 100
 1b4:	e8 2e       	mov	r14, r24
 1b6:	f1 2c       	mov	r15, r1
			PORTD &= ~(1<< PIND4);
		}
		if(Receive()==98)
		{

			int y=0;
 1b8:	c0 e0       	ldi	r28, 0x00	; 0
 1ba:	d0 e0       	ldi	r29, 0x00	; 0
			int ch=Receive()-'0';
			for(int i=100;i>=1;i/=10)
			y+=(Receive()-'0')*i;
 1bc:	0e 94 36 00 	call	0x6c	; 0x6c <Receive>
 1c0:	c0 97       	sbiw	r24, 0x30	; 48
 1c2:	8e 9d       	mul	r24, r14
 1c4:	90 01       	movw	r18, r0
 1c6:	8f 9d       	mul	r24, r15
 1c8:	30 0d       	add	r19, r0
 1ca:	9e 9d       	mul	r25, r14
 1cc:	30 0d       	add	r19, r0
 1ce:	11 24       	eor	r1, r1
 1d0:	c2 0f       	add	r28, r18
 1d2:	d3 1f       	adc	r29, r19
		if(Receive()==98)
		{

			int y=0;
			int ch=Receive()-'0';
			for(int i=100;i>=1;i/=10)
 1d4:	c7 01       	movw	r24, r14
 1d6:	b6 01       	movw	r22, r12
 1d8:	0e 94 12 01 	call	0x224	; 0x224 <__divmodhi4>
 1dc:	7b 01       	movw	r14, r22
 1de:	01 50       	subi	r16, 0x01	; 1
 1e0:	11 09       	sbc	r17, r1
 1e2:	61 f7       	brne	.-40     	; 0x1bc <main+0xbc>
			y+=(Receive()-'0')*i;
			OCR2=y;
 1e4:	c3 bd       	out	0x23, r28	; 35
			if(ch==0)
 1e6:	a1 14       	cp	r10, r1
 1e8:	b1 04       	cpc	r11, r1
 1ea:	11 f4       	brne	.+4      	; 0x1f0 <main+0xf0>
				PORTD|=(1<<PIND4);
 1ec:	94 9a       	sbi	0x12, 4	; 18
 1ee:	a3 cf       	rjmp	.-186    	; 0x136 <main+0x36>
			else if(ch==1)
 1f0:	aa 94       	dec	r10
 1f2:	ab 28       	or	r10, r11
 1f4:	09 f0       	breq	.+2      	; 0x1f8 <main+0xf8>
 1f6:	9f cf       	rjmp	.-194    	; 0x136 <main+0x36>
 1f8:	03 c0       	rjmp	.+6      	; 0x200 <main+0x100>
				PORTD &= ~(1<< PIND4);
		}
		else
		{
			OCR0=0;
 1fa:	1c be       	out	0x3c, r1	; 60
			OCR2=0;
 1fc:	13 bc       	out	0x23, r1	; 35
			PORTB &= ~(1<< PINB0);
 1fe:	c0 98       	cbi	0x18, 0	; 24
			PORTD &= ~(1<< PIND4);
 200:	94 98       	cbi	0x12, 4	; 18
 202:	99 cf       	rjmp	.-206    	; 0x136 <main+0x36>

00000204 <__mulsi3>:
 204:	db 01       	movw	r26, r22
 206:	8f 93       	push	r24
 208:	9f 93       	push	r25
 20a:	0e 94 45 01 	call	0x28a	; 0x28a <__muluhisi3>
 20e:	bf 91       	pop	r27
 210:	af 91       	pop	r26
 212:	a2 9f       	mul	r26, r18
 214:	80 0d       	add	r24, r0
 216:	91 1d       	adc	r25, r1
 218:	a3 9f       	mul	r26, r19
 21a:	90 0d       	add	r25, r0
 21c:	b2 9f       	mul	r27, r18
 21e:	90 0d       	add	r25, r0
 220:	11 24       	eor	r1, r1
 222:	08 95       	ret

00000224 <__divmodhi4>:
 224:	97 fb       	bst	r25, 7
 226:	07 2e       	mov	r0, r23
 228:	16 f4       	brtc	.+4      	; 0x22e <__divmodhi4+0xa>
 22a:	00 94       	com	r0
 22c:	07 d0       	rcall	.+14     	; 0x23c <__divmodhi4_neg1>
 22e:	77 fd       	sbrc	r23, 7
 230:	09 d0       	rcall	.+18     	; 0x244 <__divmodhi4_neg2>
 232:	0e 94 50 01 	call	0x2a0	; 0x2a0 <__udivmodhi4>
 236:	07 fc       	sbrc	r0, 7
 238:	05 d0       	rcall	.+10     	; 0x244 <__divmodhi4_neg2>
 23a:	3e f4       	brtc	.+14     	; 0x24a <__divmodhi4_exit>

0000023c <__divmodhi4_neg1>:
 23c:	90 95       	com	r25
 23e:	81 95       	neg	r24
 240:	9f 4f       	sbci	r25, 0xFF	; 255
 242:	08 95       	ret

00000244 <__divmodhi4_neg2>:
 244:	70 95       	com	r23
 246:	61 95       	neg	r22
 248:	7f 4f       	sbci	r23, 0xFF	; 255

0000024a <__divmodhi4_exit>:
 24a:	08 95       	ret

0000024c <__divmodsi4>:
 24c:	05 2e       	mov	r0, r21
 24e:	97 fb       	bst	r25, 7
 250:	1e f4       	brtc	.+6      	; 0x258 <__divmodsi4+0xc>
 252:	00 94       	com	r0
 254:	0e 94 3d 01 	call	0x27a	; 0x27a <__negsi2>
 258:	57 fd       	sbrc	r21, 7
 25a:	07 d0       	rcall	.+14     	; 0x26a <__divmodsi4_neg2>
 25c:	0e 94 64 01 	call	0x2c8	; 0x2c8 <__udivmodsi4>
 260:	07 fc       	sbrc	r0, 7
 262:	03 d0       	rcall	.+6      	; 0x26a <__divmodsi4_neg2>
 264:	4e f4       	brtc	.+18     	; 0x278 <__divmodsi4_exit>
 266:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__negsi2>

0000026a <__divmodsi4_neg2>:
 26a:	50 95       	com	r21
 26c:	40 95       	com	r20
 26e:	30 95       	com	r19
 270:	21 95       	neg	r18
 272:	3f 4f       	sbci	r19, 0xFF	; 255
 274:	4f 4f       	sbci	r20, 0xFF	; 255
 276:	5f 4f       	sbci	r21, 0xFF	; 255

00000278 <__divmodsi4_exit>:
 278:	08 95       	ret

0000027a <__negsi2>:
 27a:	90 95       	com	r25
 27c:	80 95       	com	r24
 27e:	70 95       	com	r23
 280:	61 95       	neg	r22
 282:	7f 4f       	sbci	r23, 0xFF	; 255
 284:	8f 4f       	sbci	r24, 0xFF	; 255
 286:	9f 4f       	sbci	r25, 0xFF	; 255
 288:	08 95       	ret

0000028a <__muluhisi3>:
 28a:	0e 94 86 01 	call	0x30c	; 0x30c <__umulhisi3>
 28e:	a5 9f       	mul	r26, r21
 290:	90 0d       	add	r25, r0
 292:	b4 9f       	mul	r27, r20
 294:	90 0d       	add	r25, r0
 296:	a4 9f       	mul	r26, r20
 298:	80 0d       	add	r24, r0
 29a:	91 1d       	adc	r25, r1
 29c:	11 24       	eor	r1, r1
 29e:	08 95       	ret

000002a0 <__udivmodhi4>:
 2a0:	aa 1b       	sub	r26, r26
 2a2:	bb 1b       	sub	r27, r27
 2a4:	51 e1       	ldi	r21, 0x11	; 17
 2a6:	07 c0       	rjmp	.+14     	; 0x2b6 <__udivmodhi4_ep>

000002a8 <__udivmodhi4_loop>:
 2a8:	aa 1f       	adc	r26, r26
 2aa:	bb 1f       	adc	r27, r27
 2ac:	a6 17       	cp	r26, r22
 2ae:	b7 07       	cpc	r27, r23
 2b0:	10 f0       	brcs	.+4      	; 0x2b6 <__udivmodhi4_ep>
 2b2:	a6 1b       	sub	r26, r22
 2b4:	b7 0b       	sbc	r27, r23

000002b6 <__udivmodhi4_ep>:
 2b6:	88 1f       	adc	r24, r24
 2b8:	99 1f       	adc	r25, r25
 2ba:	5a 95       	dec	r21
 2bc:	a9 f7       	brne	.-22     	; 0x2a8 <__udivmodhi4_loop>
 2be:	80 95       	com	r24
 2c0:	90 95       	com	r25
 2c2:	bc 01       	movw	r22, r24
 2c4:	cd 01       	movw	r24, r26
 2c6:	08 95       	ret

000002c8 <__udivmodsi4>:
 2c8:	a1 e2       	ldi	r26, 0x21	; 33
 2ca:	1a 2e       	mov	r1, r26
 2cc:	aa 1b       	sub	r26, r26
 2ce:	bb 1b       	sub	r27, r27
 2d0:	fd 01       	movw	r30, r26
 2d2:	0d c0       	rjmp	.+26     	; 0x2ee <__udivmodsi4_ep>

000002d4 <__udivmodsi4_loop>:
 2d4:	aa 1f       	adc	r26, r26
 2d6:	bb 1f       	adc	r27, r27
 2d8:	ee 1f       	adc	r30, r30
 2da:	ff 1f       	adc	r31, r31
 2dc:	a2 17       	cp	r26, r18
 2de:	b3 07       	cpc	r27, r19
 2e0:	e4 07       	cpc	r30, r20
 2e2:	f5 07       	cpc	r31, r21
 2e4:	20 f0       	brcs	.+8      	; 0x2ee <__udivmodsi4_ep>
 2e6:	a2 1b       	sub	r26, r18
 2e8:	b3 0b       	sbc	r27, r19
 2ea:	e4 0b       	sbc	r30, r20
 2ec:	f5 0b       	sbc	r31, r21

000002ee <__udivmodsi4_ep>:
 2ee:	66 1f       	adc	r22, r22
 2f0:	77 1f       	adc	r23, r23
 2f2:	88 1f       	adc	r24, r24
 2f4:	99 1f       	adc	r25, r25
 2f6:	1a 94       	dec	r1
 2f8:	69 f7       	brne	.-38     	; 0x2d4 <__udivmodsi4_loop>
 2fa:	60 95       	com	r22
 2fc:	70 95       	com	r23
 2fe:	80 95       	com	r24
 300:	90 95       	com	r25
 302:	9b 01       	movw	r18, r22
 304:	ac 01       	movw	r20, r24
 306:	bd 01       	movw	r22, r26
 308:	cf 01       	movw	r24, r30
 30a:	08 95       	ret

0000030c <__umulhisi3>:
 30c:	a2 9f       	mul	r26, r18
 30e:	b0 01       	movw	r22, r0
 310:	b3 9f       	mul	r27, r19
 312:	c0 01       	movw	r24, r0
 314:	a3 9f       	mul	r26, r19
 316:	70 0d       	add	r23, r0
 318:	81 1d       	adc	r24, r1
 31a:	11 24       	eor	r1, r1
 31c:	91 1d       	adc	r25, r1
 31e:	b2 9f       	mul	r27, r18
 320:	70 0d       	add	r23, r0
 322:	81 1d       	adc	r24, r1
 324:	11 24       	eor	r1, r1
 326:	91 1d       	adc	r25, r1
 328:	08 95       	ret

0000032a <_exit>:
 32a:	f8 94       	cli

0000032c <__stop_program>:
 32c:	ff cf       	rjmp	.-2      	; 0x32c <__stop_program>
